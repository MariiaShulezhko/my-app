{"version":3,"sources":["../node_modules/@scandipwa/scandipwa/src/component/MyAccountNewsletterSubscription/index.js","../node_modules/@scandipwa/scandipwa/src/component/MyAccountNewsletterSubscription/MyAccountNewsletterSubscription.container.js","../node_modules/@scandipwa/scandipwa/src/component/MyAccountNewsletterSubscription/MyAccountNewsletterSubscription.component.js"],"names":["MyAccountNewsletterSubscription","mapStateToProps","state","customer","MyAccountReducer","newsletterConfirmStatus","ConfigReducer","newsletter_subscription_confirm","mapDispatchToProps","dispatch","updateCustomer","updateCustomerDetails","showErrorNotification","error","showNotification","getErrorMessage","showSuccessNotification","message","containerFunctions","onError","setSubscriptionStatus","bind","onCustomerSave","props","is_subscribed","this","isLoading","Object","keys","length","isSubscriptionSelected","prevProps","prevCustomer","setState","isSubscribed","wasSubscribed","__","form","fields","value","mutation","MyAccountQuery","getUpdateInformationMutation","isSignedIn","fetchMutation","updateCustomerV2","BrowserDatabase","setItem","CUSTOMER","ONE_MONTH_IN_SECONDS","showSubscriptionUpdateNotification","containerProps","PureComponent","connect","MyAccountNewsletterSubscriptionContainer","type","FIELD_TYPE","checkbox","attr","name","defaultChecked","events","onChange","label","block","elem","mix","onSubmit","returnAsObject","submit","aria-label","FieldForm","propTypes","CustomerType","isRequired","PropTypes","func","bool"],"mappings":"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","file":"static/js/account-newsletter.e50ec303.chunk.js","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport MyAccountNewsletterSubscription from './MyAccountNewsletterSubscription.container';\n\nexport default MyAccountNewsletterSubscription;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport Loader from 'Component/Loader';\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport { updateCustomerDetails } from 'Store/MyAccount/MyAccount.action';\nimport { CUSTOMER } from 'Store/MyAccount/MyAccount.dispatcher';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { CustomerType } from 'Type/Account.type';\nimport { isSignedIn } from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase/BrowserDatabase';\nimport { fetchMutation, getErrorMessage } from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\n\nimport MyAccountNewsletterSubscription from './MyAccountNewsletterSubscription.component';\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    customer: state.MyAccountReducer.customer,\n    newsletterConfirmStatus: state.ConfigReducer.newsletter_subscription_confirm\n});\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateCustomer: (customer) => dispatch(updateCustomerDetails(customer)),\n    showErrorNotification: (error) => dispatch(showNotification('error', getErrorMessage(error))),\n    showSuccessNotification: (message) => dispatch(showNotification('success', message))\n});\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container */\nexport class MyAccountNewsletterSubscriptionContainer extends PureComponent {\n    static propTypes = {\n        customer: CustomerType.isRequired,\n        updateCustomer: PropTypes.func.isRequired,\n        showErrorNotification: PropTypes.func.isRequired,\n        showSuccessNotification: PropTypes.func.isRequired,\n        newsletterConfirmStatus: PropTypes.bool.isRequired\n    };\n\n    containerFunctions = {\n        onError: this.onError,\n        setSubscriptionStatus: this.setSubscriptionStatus.bind(this),\n        onCustomerSave: this.onCustomerSave.bind(this)\n    };\n\n    __construct(props) {\n        const { customer, customer: { is_subscribed } = {} } = props;\n\n        super.__construct(props);\n        this.state = {\n            isLoading: Object.keys(customer).length === 0,\n            isSubscriptionSelected: is_subscribed || false\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            customer: prevCustomer\n        } = prevProps;\n\n        const {\n            customer,\n            customer: { is_subscribed } = {}\n        } = this.props;\n\n        if (Object.keys(prevCustomer).length === 0 && Object.keys(customer).length !== 0) {\n            this.setState({\n                isSubscriptionSelected: is_subscribed,\n                isLoading: false\n            });\n        }\n    }\n\n    containerProps() {\n        const { customer } = this.props;\n        const { isSubscriptionSelected } = this.state;\n\n        return { customer, isSubscriptionSelected };\n    }\n\n    setSubscriptionStatus() {\n        this.setState((state) => ({ isSubscriptionSelected: !state.isSubscriptionSelected }));\n    }\n\n    showSubscriptionUpdateNotification(isSubscribed, wasSubscribed) {\n        const {\n            showSuccessNotification,\n            newsletterConfirmStatus\n        } = this.props;\n        const { isSubscriptionSelected } = this.state;\n\n        if (!isSubscribed && wasSubscribed) {\n            showSuccessNotification(__('We have removed your newsletter subscription.'));\n        } else if (isSubscribed && !newsletterConfirmStatus && !wasSubscribed) {\n            showSuccessNotification(__('We have saved your subscription'));\n        } else if (!isSubscribed && newsletterConfirmStatus && isSubscriptionSelected) {\n            showSuccessNotification(__('A subscription confirmation email has been sent!'));\n        } else {\n            showSuccessNotification(__('We have updated your subscription.'));\n        }\n    }\n\n    onError() {\n        const { showErrorNotification } = this.props;\n\n        this.setState({ isLoading: false }, () => {\n            showErrorNotification(__('We are experiencing issues, please try again later'));\n        });\n    }\n\n    async onCustomerSave(form, fields) {\n        const {\n            updateCustomer,\n            customer: {\n                is_subscribed: wasSubscribed\n            }\n        } = this.props;\n\n        const {\n            isSubscribed: {\n                value = false\n            }\n        } = fields;\n\n        const customer = { is_subscribed: value };\n        const mutation = MyAccountQuery.getUpdateInformationMutation(customer);\n\n        if (!isSignedIn()) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n\n        try {\n            const { updateCustomerV2: { customer } } = await fetchMutation(mutation);\n\n            BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n            const { is_subscribed } = customer;\n\n            this.setState({ isLoading: false }, () => {\n                updateCustomer(customer);\n                this.showSubscriptionUpdateNotification(is_subscribed, wasSubscribed);\n            });\n        } catch (e) {\n            this.onError(e);\n        }\n    }\n\n    render() {\n        const { isLoading } = this.state;\n\n        return (\n            <>\n                <Loader isLoading={ isLoading } />\n                <MyAccountNewsletterSubscription\n                  { ...this.containerProps() }\n                  { ...this.containerFunctions }\n                />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountNewsletterSubscriptionContainer);\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport PropTypes from 'prop-types';\n\nimport { FIELD_TYPE } from 'Component/Field/Field.config';\nimport FieldForm from 'Component/FieldForm';\nimport { CustomerType } from 'Type/Account.type';\n\nimport './MyAccountNewsletterSubscription.style.scss';\n\n/** @namespace Component/MyAccountNewsletterSubscription/Component */\nexport class MyAccountNewsletterSubscription extends FieldForm {\n    static propTypes = {\n        customer: CustomerType.isRequired,\n        onCustomerSave: PropTypes.func.isRequired,\n        onError: PropTypes.func.isRequired,\n        isSubscriptionSelected: PropTypes.bool.isRequired\n    };\n\n    get fieldMap() {\n        const { setSubscriptionStatus, isSubscriptionSelected } = this.props;\n\n        return [\n            {\n                type: FIELD_TYPE.checkbox,\n                attr: {\n                    name: 'isSubscribed',\n                    defaultChecked: isSubscriptionSelected\n                },\n                events: {\n                    onChange: setSubscriptionStatus\n                },\n                label: __('General subscription')\n            }\n        ];\n    }\n\n    renderFormBody() {\n        return (\n            <div\n              block=\"FieldForm\"\n              elem=\"Fields\"\n              mix={ { block: 'MyAccountNewsletterSubscription' } }\n            >\n                { super.renderFormBody() }\n            </div>\n        );\n    }\n\n    getFormProps() {\n        const { onCustomerSave, onError } = this.props;\n\n        return {\n            onSubmit: onCustomerSave,\n            onError,\n            returnAsObject: true\n        };\n    }\n\n    renderActions() {\n        return (\n            <button\n              type={ FIELD_TYPE.submit }\n              block=\"Button\"\n              mix={ { block: 'MyAccountNewsletterSubscription', elem: 'Button' } }\n              aria-label={ __('Submit') }\n            >\n                { __('Save changes') }\n            </button>\n        );\n    }\n}\n\nexport default MyAccountNewsletterSubscription;\n"],"sourceRoot":""}