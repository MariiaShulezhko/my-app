{"version":3,"file":"static/js/dispatchers.chunk.js","sources":["/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/component/Header/Header.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountCreateAccount/MyAccountCreateAccount.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountOrder/MyAccountOrder.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/Cart.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/Category.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/CheckEmail.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/Config.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/ContactForm.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/MyAccount.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/NewsletterSubscription.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/Order.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/ProductCompare.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/ProductList.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/Region.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/Review.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/UrlRewrites.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/query/Wishlist.query.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/route/CartPage/CartPage.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/route/CategoryPage/CategoryPage.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/route/Checkout/Checkout.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/route/MyAccount/MyAccount.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/route/SearchPage/SearchPage.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/route/SendConfirmationPage/SendConfirmationPage.config.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Breadcrumbs/Breadcrumbs.action.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Breadcrumbs/Breadcrumbs.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Cart/Cart.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Category/Category.action.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Category/Category.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Checkout/Checkout.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Config/Config.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/ContactForm/ContactForm.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/LinkedProducts/LinkedProducts.action.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/LinkedProducts/LinkedProducts.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Meta/Meta.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/MyAccount/MyAccount.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/NewsletterSubscription/NewsletterSubscription.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/NoMatch/NoMatch.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Order/Order.action.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Order/Order.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Product/Product.action.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Product/Product.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/ProductCompare/ProductCompare.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/ProductList/ProductList.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/ProductListInfo/ProductListInfo.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Review/Review.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/SearchBar/SearchBar.action.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/SearchBar/SearchBar.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/UrlRewrites/UrlRewrites.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/store/Wishlist/Wishlist.dispatcher.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/util/Address/index.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/util/Wishlist/Wishlist.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/util/Wishlist/index.js"],"sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const PDP = 'pdp';\nexport const POPUP = 'popup';\nexport const CATEGORY = 'category';\nexport const CUSTOMER_ACCOUNT = 'customer_account';\nexport const CUSTOMER_SUB_ACCOUNT = 'customer_sub_account';\nexport const CUSTOMER_ACCOUNT_PAGE = 'customer_account_page';\nexport const CUSTOMER_WISHLIST = 'wishlist';\nexport const CUSTOMER_ORDER = 'customer_order';\nexport const HOME_PAGE = 'home';\nexport const MENU = 'menu';\nexport const MENU_SUBCATEGORY = 'menu_subcategory';\nexport const SEARCH = 'search';\nexport const FILTER = 'filter';\nexport const CART = 'cart';\nexport const CART_OVERLAY = 'cart_overlay';\nexport const CART_EDITING = 'cart_editing';\nexport const CHECKOUT = 'checkout';\nexport const CHECKOUT_SUCCESS = 'checkout_success';\nexport const CHECKOUT_ACCOUNT = 'checkout_account';\nexport const CMS_PAGE = 'cms-page';\nexport const MY_ACCOUNT = 'my-account';\nexport const NO_MATCH = 'no-match';\nexport const CONTACT_US = 'contact-us';\nexport const PRODUCT_COMPARE = 'product-compare';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const SHOW_VAT_NUMBER_REQUIRED = 'req';\nexport const SHOW_VAT_NUMBER_OPTIONAL = 'opt';\nexport const CONFIRMATION_REQUIRED = 'confirmation_required';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const ORDER_ITEMS = 'Items';\nexport const ORDER_INVOICES = 'Invoice';\nexport const ORDER_SHIPMENTS = 'Shipment';\nexport const ORDER_REFUNDS = 'Refund';\nexport const ORDER_ID = 'ORDER_ID';\n\nexport const ORDER_ACTION_LABELS = {\n    [ORDER_INVOICES]: {\n        print: __('Print Invoice'),\n        printUrl: '/sales/order/printInvoice/invoice_id',\n        printAll: __('Print All Invoices'),\n        printAllUrl: '/sales/order/printInvoice/order_id'\n    },\n    [ORDER_SHIPMENTS]: {\n        print: __('Print Shipment'),\n        printUrl: '/sales/order/printShipment/shipment_id',\n        printAll: __('Print All Shipments'),\n        printAllUrl: '/sales/order/printShipment/order_id'\n    },\n    [ORDER_REFUNDS]: {\n        print: __('Print Refund'),\n        printUrl: '/sales/order/printCreditmemo/creditmemo_id',\n        printAll: __('Print All Refunds'),\n        printAllUrl: '/sales/order/printCreditmemo/order_id'\n    }\n};\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { CHECKOUT_URL } from 'Route/Checkout/Checkout.config';\nimport { Field, Fragment } from 'Util/Query';\n\n/** @namespace Query/Cart/Query */\nexport class CartQuery {\n    // #region MUTATIONS\n    getAddProductToCartMutation(cartId, cartItems) {\n        return new Field('addProductsToCart')\n            .addArgument('cartId', 'String!', cartId)\n            .addArgument('cartItems', '[CartItemInput!]!', cartItems)\n            .addField(this._getUserErrorsField());\n    }\n\n    getUpdateCartItemsMutation(input) {\n        return new Field('updateCartItems')\n            .addArgument('input', 'UpdateCartItemsInput', input)\n            .addField(this._getCartUpdateField());\n    }\n\n    getCreateEmptyCartMutation() {\n        return new Field('createEmptyCart');\n    }\n    // #endregion\n\n    // #region ERROR\n    _getUserErrorsFields() {\n        return [\n            'message',\n            'code'\n        ];\n    }\n\n    _getUserErrorsField() {\n        return new Field('user_errors')\n            .addFieldList(this._getUserErrorsFields());\n    }\n    // #endregion\n\n    _getCartUpdateField() {\n        return new Field('cart')\n            .addField('id');\n    }\n\n    getRemoveCartItemMutation(item_id, quoteId) {\n        const input = {\n            cart_id: quoteId,\n            cart_item_id: item_id\n        };\n\n        return new Field('removeItemFromCart')\n            .addArgument('input', 'RemoveItemFromCartInput', input)\n            .addField(this._getCart());\n    }\n\n    getMergeCartQuery(sourceCartId, destinationCartId) {\n        return new Field('mergeCarts')\n            .addArgument('source_cart_id', 'String!', sourceCartId)\n            .addArgument('destination_cart_id', 'String!', destinationCartId)\n            .addField('id');\n    }\n\n    /* Cart config */\n\n    getCartDisplayConfig() {\n        return new Field('getCartDisplayConfig')\n            .setAlias('cartDisplayConfig')\n            .addFieldList(this._getCartDisplayConfigFields());\n    }\n\n    _getCartDisplayConfigFields() {\n        return [\n            'display_tax_in_price',\n            'display_tax_in_subtotal',\n            'display_tax_in_shipping_amount',\n            'include_tax_in_order_total',\n            'display_full_tax_summary',\n            'display_zero_tax_subtotal'\n        ];\n    }\n\n    /* Data for new cart */\n\n    getCartQuery(cartId) {\n        return new Field('cart')\n            .setAlias('cartData')\n            .addArgument('cart_id', 'String!', cartId)\n            .addFieldList(this._getCartTotalsFields());\n    }\n\n    _getCartTotalsFields() {\n        return [\n            'id',\n            'email',\n            this._getPricesField(),\n            this._getShippingAddressesField(),\n            this._getMinimumOrderAmount(),\n            this._getCartItemsField(),\n            'total_quantity',\n            'is_virtual',\n            'is_in_store_pickup_available'\n        ];\n    }\n\n    _getPriceField() {\n        return [\n            'value',\n            'currency'\n        ];\n    }\n\n    _getAmountField() {\n        return new Field('amount')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getBaseAmountField() {\n        return new Field('base_amount')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getCartItemsField() {\n        return new Field('items')\n            .addFieldList(this._getCartItemsFields());\n    }\n\n    _getCartItemsFields() {\n        return [\n            'id',\n            'uid',\n            'sku',\n            'quantity',\n            this._getCartItemProduct(),\n            this._getCartItemPricesField(),\n            this._getCartDownloadableProductLinkField(),\n            this._getCartBundleProductFragment(),\n            this._getCartConfigurableProductFragment(),\n            this._getCartVirtualProductFragments(),\n            this._getCartSimpleProductFragments()\n        ];\n    }\n\n    _getCartItemProduct() {\n        return new Field('product')\n            .addFieldList(ProductListQuery._getCartProductInterfaceFields());\n    }\n\n    _getCartDownloadableProductLinkField() {\n        return new Fragment('DownloadableCartItem')\n            .addFieldList([\n                this._getDownloadableLinkField(),\n                this._getDownloadableSamplesField(),\n                this._getCustomizableOptionsField('downloadable_customizable_options')\n            ]);\n    }\n\n    _getDownloadableLinkField() {\n        return new Field('links')\n            .addFieldList(this._getDownloadableLinkFields());\n    }\n\n    _getDownloadableLinkFields() {\n        return [\n            'id',\n            'title',\n            'sort_order',\n            'price'\n        ];\n    }\n\n    _getDownloadableSamplesField() {\n        return new Field('samples')\n            .addFieldList(this._getDownloadableSamplesFields());\n    }\n\n    _getDownloadableSamplesFields() {\n        return [\n            'id',\n            'title'\n        ];\n    }\n\n    _getCartBundleProductFragment() {\n        return new Fragment('BundleCartItem')\n            .addFieldList([\n                this._getBundleOptionsField(),\n                this._getCustomizableOptionsField('bundle_customizable_options')\n            ]);\n    }\n\n    _getBundleOptionsField() {\n        return new Field('bundle_options')\n            .addFieldList(this._getBundleOptionsFields());\n    }\n\n    _getBundleOptionsFields() {\n        return [\n            'id',\n            'label',\n            'type',\n            this._getBundleOptionValuesField()\n        ];\n    }\n\n    _getBundleOptionValuesField() {\n        return new Field('values')\n            .addFieldList(this._getBundleOptionValuesFields());\n    }\n\n    _getBundleOptionValuesFields() {\n        return [\n            'id',\n            'label',\n            'quantity',\n            'price'\n        ];\n    }\n\n    _getCartConfigurableProductFragment() {\n        return new Fragment('ConfigurableCartItem')\n            .addFieldList([\n                this._getConfigurableOptionsField(),\n                this._getCustomizableOptionsField('configurable_customizable_options')\n            ]);\n    }\n\n    _getConfigurableOptionsField() {\n        return new Field('configurable_options')\n            .addFieldList(this._getConfigurableOptionsFields());\n    }\n\n    _getConfigurableOptionsFields() {\n        return [\n            'id',\n            'option_label',\n            'value_label'\n        ];\n    }\n\n    _getCartSimpleProductFragments() {\n        return new Fragment('SimpleCartItem')\n            .addFieldList([\n                this._getCustomizableOptionsField('simple_customizable_options')\n            ]);\n    }\n\n    _getCartVirtualProductFragments() {\n        return new Fragment('VirtualCartItem')\n            .addFieldList([\n                this._getCustomizableOptionsField('virtual_customizable_options')\n            ]);\n    }\n\n    _getCustomizableOptionsField(alias) {\n        return new Field('customizable_options')\n            .setAlias(alias)\n            .addFieldList(this._getCustomizableOptionsFields());\n    }\n\n    _getCustomizableOptionsFields() {\n        return [\n            'id',\n            'label',\n            'label',\n            'type',\n            'sort_order',\n            'is_required',\n            this._getCustomizableOptionValueField()\n        ];\n    }\n\n    _getCustomizableOptionValueField() {\n        return new Field('values')\n            .addFieldList(this._getCustomizableOptionValueFields());\n    }\n\n    _getCustomizableOptionValueFields() {\n        return [\n            'id',\n            'label',\n            'value'\n        ];\n    }\n\n    _getCartItemPricesField() {\n        return new Field('prices')\n            .addFieldList(this._getCartItemPricesFields());\n    }\n\n    _getCartItemPricesFields() {\n        return [\n            this._getCartItemPriceField(),\n            this._getCartItemRowTotalField(),\n            this._getCartItemRowTotalInclTaxField(),\n            this._getCartItemTotalDiscountField()\n        ];\n    }\n\n    _getCartItemPriceField() {\n        return new Field('price')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getCartItemRowTotalField() {\n        return new Field('row_total')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getCartItemRowTotalInclTaxField() {\n        return new Field('row_total_including_tax')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getCartItemDiscountsField() {\n        return new Field('discounts')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getCartItemTotalDiscountField() {\n        return new Field('total_item_discount')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getPricesField() {\n        return new Field('prices')\n            .addFieldList(this._getPricesFields());\n    }\n\n    _getPricesFields() {\n        return [\n            'applied_rule_ids',\n            'coupon_code',\n            'quote_currency_code',\n            this._getGrandTotalField(),\n            this._getSubtotalInclTaxField(),\n            this._getSubtotalExclTaxField(),\n            this._getSubtotalWithDiscountExclTaxField(),\n            this._getDiscountField(),\n            this._getAppliedTaxesField()\n        ];\n    }\n\n    _getGrandTotalField() {\n        return new Field('grand_total')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getSubtotalInclTaxField() {\n        return new Field('subtotal_including_tax')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getSubtotalExclTaxField() {\n        return new Field('subtotal_excluding_tax')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getSubtotalWithDiscountExclTaxField() {\n        return new Field('subtotal_with_discount_excluding_tax')\n            .addFieldList(this._getPriceField());\n    }\n\n    _getDiscountField() {\n        return new Field('discount')\n            .addFieldList(this._getDiscountFields());\n    }\n\n    _getDiscountFields() {\n        return [\n            'label',\n            this._getAmountField()\n        ];\n    }\n\n    _getAppliedTaxesField() {\n        return new Field('applied_taxes')\n            .addFieldList(this._getAppliedTaxesFields());\n    }\n\n    _getAppliedTaxesFields() {\n        return [\n            'label',\n            'percent',\n            this._getAmountField()\n        ];\n    }\n\n    _getShippingAddressesField() {\n        return new Field('shipping_addresses')\n            .addFieldList(this._getShippingAddressesFields());\n    }\n\n    _getShippingAddressesFields() {\n        return [\n            this._getAvailableShippingMethodField(),\n            this._getSelectedShippingMethodField(),\n            'customer_notes'\n        ];\n    }\n\n    _getAvailableShippingMethodField() {\n        return new Field('available_shipping_methods')\n            .addFieldList(this._getAvailableShippingMethodFields());\n    }\n\n    _getAvailableShippingMethodFields() {\n        return [\n            'available',\n            'method_code',\n            'carrier_code',\n            'carrier_title',\n            'error_message'\n        ];\n    }\n\n    _getSelectedShippingMethodField() {\n        return new Field('selected_shipping_method')\n            .addFieldList(this._getSelectedShippingMethodFields());\n    }\n\n    _getSelectedShippingMethodFields() {\n        const { pathname = '' } = location;\n        const checkoutData = (\n            pathname.includes(CHECKOUT_URL)\n                ? [this._getOrderShippingAddressField()]\n                : []\n        );\n\n        return [\n            'amount_incl_tax',\n            'carrier_code',\n            'carrier_title',\n            'method_code',\n            'method_title',\n            'tax_amount',\n            this._getAmountField(),\n            ...checkoutData\n        ];\n    }\n\n    _getOrderShippingAddressField() {\n        return new Field('address')\n            .addFieldList(this._getOrderAddressFields());\n    }\n\n    _getOrderAddressFields() {\n        return [\n            'city',\n            this._getCountryField(),\n            'firstname',\n            'lastname',\n            'postcode',\n            this._getRegionField(),\n            'telephone',\n            'vat_id',\n            'email',\n            'street'\n        ];\n    }\n\n    _getCountryField() {\n        return new Field('country')\n            .addFieldList(this._getCountryFields());\n    }\n\n    _getCountryFields() {\n        return [\n            'code'\n        ];\n    }\n\n    _getRegionField() {\n        return new Field('region')\n            .addFieldList(this._getRegionFields());\n    }\n\n    _getRegionFields() {\n        return [\n            'label',\n            'region_id'\n        ];\n    }\n\n    _getMinimumOrderAmount() {\n        return new Field('minimum_order_amount')\n            .addFieldList(this._getMinimumOrderAmountFields());\n    }\n\n    _getMinimumOrderAmountFields() {\n        return [\n            'minimum_order_amount_reached',\n            'minimum_order_description'\n        ];\n    }\n\n    /* Cart coupon */\n\n    _getCart() {\n        return new Field('cart')\n            .setAlias('cartData')\n            .addFieldList(this._getCartTotalsFields());\n    }\n\n    getApplyCouponMutation(couponCode, quoteId) {\n        const input = {\n            cart_id: quoteId,\n            coupon_code: couponCode\n        };\n\n        return new Field('applyCouponToCart')\n            .addArgument('input', 'ApplyCouponToCartInput', input)\n            .addField(this._getCart());\n    }\n\n    getRemoveCouponMutation(quoteId) {\n        return new Field('removeCouponFromCart')\n            .addArgument('input', 'RemoveCouponFromCartInput', { cart_id: quoteId })\n            .addField(this._getCart());\n    }\n}\n\nexport default new CartQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/**\n * Category Query\n * @class CategoryQuery\n * @namespace Query/Category/Query\n */\nexport class CategoryQuery {\n    __construct() {\n        super.__construct();\n        this.options = {};\n    }\n\n    getQuery(options = {}) {\n        this.options = options;\n\n        return new Field('category')\n            .addArgument(...this._getConditionalArguments())\n            .addFieldList(this._getDefaultFields())\n            .addField(this._getChildrenFields());\n    }\n\n    _getConditionalArguments() {\n        const { categoryIds } = this.options;\n\n        if (categoryIds) {\n            return ['id', 'Int!', categoryIds];\n        }\n\n        throw new Error(__('There was an error requesting the category'));\n    }\n\n    _getChildrenFields() {\n        return new Field('children')\n            .addFieldList(this._getDefaultFields());\n    }\n\n    _getBreadcrumbsField() {\n        return new Field('breadcrumbs')\n            .addFieldList(this._getBreadcrumbFields());\n    }\n\n    _getBreadcrumbFields() {\n        return [\n            'category_name',\n            'category_level',\n            'category_url',\n            'category_is_active'\n        ];\n    }\n\n    _getCmsBlockFields() {\n        return [\n            'content',\n            'disabled',\n            'title',\n            'identifier'\n        ];\n    }\n\n    _getCmsBlockField() {\n        return new Field('cms_block')\n            .addFieldList(this._getCmsBlockFields());\n    }\n\n    _getDefaultFields() {\n        return [\n            'id',\n            'url',\n            'name',\n            'image',\n            'url_key',\n            'url_path',\n            'is_active',\n            'meta_title',\n            'description',\n            'canonical_url',\n            'product_count',\n            'meta_keywords',\n            'default_sort_by',\n            'meta_description',\n            'landing_page',\n            'display_mode',\n            'is_anchor',\n            this._getCmsBlockField(),\n            this._getBreadcrumbsField()\n        ];\n    }\n}\n\nexport default new CategoryQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/**\n * Email availability check Query\n * @class CheckEmailQuery\n * @namespace Query/CheckEmail/Query */\nexport class CheckEmailQuery {\n    getIsEmailAvailableQuery(email) {\n        const query = new Field('isEmailAvailable')\n            .addArgument('email', 'String!', email)\n            .addField('is_email_available');\n\n        return query;\n    }\n}\n\nexport default new CheckEmailQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { isSignedIn } from 'Util/Auth';\nimport { getCartId } from 'Util/Cart';\nimport { Field } from 'Util/Query';\n\n/** @namespace Query/Config/Query */\nexport class ConfigQuery {\n    getStoreListField() {\n        return new Field('storeList')\n            .addFieldList(this._getStoreListFields());\n    }\n\n    getCheckoutAgreements() {\n        return new Field('checkoutAgreements')\n            .addFieldList(this._getCheckoutAgreementFields());\n    }\n\n    getCurrencyData() {\n        return new Field('currencyData')\n            .addFieldList([\n                this.getCurrencyFields(),\n                'current_currency_code'\n            ]);\n    }\n\n    getCurrencyFields() {\n        return new Field('available_currencies_data')\n            .addFieldList(this._getAvailableCurrenciesFields());\n    }\n\n    _getAvailableCurrenciesFields() {\n        return [\n            'id',\n            'label',\n            'value'\n        ];\n    }\n\n    getCurrencyRates() {\n        return new Field('currency').addFieldList(this.getCurrencyRatesFields());\n    }\n\n    getCurrencyRatesFields() {\n        return [\n            'base_currency_code',\n            new Field('exchange_rates').addFieldList(this._getExchangeRatesFields())\n        ];\n    }\n\n    _getExchangeRatesFields() {\n        return [\n            'currency_to',\n            'rate'\n        ];\n    }\n\n    getPriceDisplayTypeField() {\n        return new Field('priceTaxDisplay')\n            .addFieldList([\n                'product_price_display_type',\n                'shipping_price_display_type'\n            ]);\n    }\n\n    getSaveSelectedCurrencyMutation(newCurrency) {\n        const query = new Field('saveSelectedCurrency')\n            .addArgument('currency', 'String', newCurrency)\n            .addFieldList([\n                this.getCurrencyData()\n            ]);\n\n        if (!isSignedIn()) {\n            const guestQuoteId = getCartId();\n\n            query.addArgument('guestCartId', 'String', guestQuoteId);\n        }\n\n        return query;\n    }\n\n    _getCheckoutAgreementFields() {\n        return [\n            'agreement_id',\n            'checkbox_text',\n            'content',\n            'content_height',\n            'is_html',\n            'mode',\n            'name'\n        ];\n    }\n\n    _getStoreListFields() {\n        return [\n            'name',\n            'is_active',\n            'base_url',\n            'base_link_url',\n            'code'\n        ];\n    }\n\n    getQuery() {\n        return new Field('storeConfig')\n            .addFieldList(this._getStoreConfigFields());\n    }\n\n    _getTimeDateFormatFields() {\n        return [\n            'use_calendar',\n            'year_range',\n            'date_fields_order',\n            'time_format'\n        ];\n    }\n\n    _getStoreConfigFields() {\n        return [\n            'code',\n            'is_active',\n            'cms_home_page',\n            'cms_no_route',\n            'copyright',\n            'timezone',\n            'header_logo_src',\n            'timezone',\n            'title_prefix',\n            'title_suffix',\n            'default_display_currency_code',\n            'default_keywords',\n            'default_title',\n            'default_description',\n            'default_country',\n            'downloadable_links_target_new_window',\n            'secure_base_media_url',\n            'logo_alt',\n            'logo_height',\n            'logo_width',\n            'cookie_text',\n            'cookie_link',\n            'terms_are_enabled',\n            'address_lines_quantity',\n            'base_url',\n            'pagination_frame',\n            'pagination_frame_skip',\n            'anchor_text_for_previous',\n            'anchor_text_for_next',\n            'reviews_are_enabled',\n            'reviews_allow_guest',\n            'wishlist_general_active',\n            'demo_notice',\n            'guest_checkout',\n            'is_email_confirmation_required',\n            'display_product_stock_status',\n            'base_link_url',\n            'show_vat_number_on_storefront',\n            'show_tax_vat_number',\n            'product_use_categories',\n            'category_url_suffix',\n            'cookie_lifetime',\n            'plp_list_mode',\n            'layered_navigation_product_count_enabled',\n            'region_display_all',\n            'redirect_dashboard',\n            'product_alert_allow_price',\n            'product_alert_allow_stock',\n            'newsletter_general_active',\n            'newsletter_subscription_allow_guest_subscribe',\n            'newsletter_subscription_confirm',\n            'delivery_instore_active',\n            'access_token_lifetime',\n            'is_allowed_reorder',\n            'rss_order_subscribe_allow',\n            'downloadable_disable_guest_checkout',\n            'minimun_password_length',\n            'required_character_classes_number',\n            ...this._getTimeDateFormatFields(),\n            this.getPriceDisplayTypeField()\n        ];\n    }\n}\n\nexport default new ConfigQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/** @namespace Query/ContactForm/Query */\nexport class ContactFormQuery {\n    getSendContactFormMutation(options) {\n        const mutation = new Field('contactForm');\n\n        this._addSendContactFormMutationArguments(mutation, options);\n        mutation.addFieldList(this._getSendContactFormMutationResponse());\n\n        return mutation;\n    }\n\n    getContactPageConfigQuery() {\n        return new Field('contactPageConfig')\n            .addFieldList(this._getContactPageConfigFields());\n    }\n\n    _addSendContactFormMutationArguments(mutation, options) {\n        return mutation.addArgument('contact', 'ContactForm!', options);\n    }\n\n    _getSendContactFormMutationResponse() {\n        return ['message'];\n    }\n\n    _getContactPageConfigFields() {\n        return ['enabled'];\n    }\n}\n\nexport default new ContactFormQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/**\n * MyAccount Mutations\n * @class MyAccount\n * @namespace Query/MyAccount/Query */\nexport class MyAccountQuery {\n    /**\n     * Get ResetPassword mutation\n     * @param {{customer_id: String, token: String, password: String, password_confirmation: String}} options A object containing different aspects of query, each item can be omitted\n     * @return {Field}\n     * @memberof MyAccount\n     */\n    getResetPasswordMutation(options) {\n        const {\n            customer_id,\n            token,\n            password,\n            password_confirmation\n        } = options;\n\n        return new Field('s_resetPassword')\n            .addArgument('token', 'String!', token)\n            .addArgument('password', 'String!', password)\n            .addArgument('password_confirmation', 'String!', password_confirmation)\n            .addArgument('customer_id', 'String!', customer_id)\n            .addField('status');\n    }\n\n    /**\n     * Get SignIn mutation\n     * @param {{email: String, password: String}} options A object containing different aspects of query, each item can be omitted\n     * @return {Field}\n     * @memberof MyAccount\n     */\n    getSignInMutation(options) {\n        const { email, password } = options;\n\n        return new Field('generateCustomerToken')\n            .addArgument('email', 'String!', email)\n            .addArgument('password', 'String!', password)\n            .addField('token');\n    }\n\n    getUpdateInformationMutation(options) {\n        return new Field('updateCustomerV2')\n            .addArgument('input', 'CustomerUpdateInput!', options)\n            .addField(this._getCustomerField());\n    }\n\n    getUpdateEmailMutation(options) {\n        const { email, password } = options;\n\n        return new Field('updateCustomerEmail')\n            .addArgument('email', 'String!', email)\n            .addArgument('password', 'String!', password)\n            .addField(this._getCustomerField());\n    }\n\n    getChangeCustomerPasswordMutation(options) {\n        const { password, newPassword } = options;\n\n        return new Field('changeCustomerPassword')\n            .addArgument('currentPassword', 'String!', password)\n            .addArgument('newPassword', 'String!', newPassword)\n            .addField('id')\n            .addField('email');\n    }\n\n    getCreateAddressMutation(options) {\n        return new Field('createCustomerAddress')\n            .addArgument('input', 'CustomerAddressInput!', options)\n            .addFieldList(this._getAddressFields());\n    }\n\n    getDeleteAddressMutation(id) {\n        return new Field('deleteCustomerAddress')\n            .addArgument('id', 'Int!', id);\n    }\n\n    getUpdateAddressMutation(id, options) {\n        return new Field('updateCustomerAddress')\n            .addArgument('id', 'Int!', id)\n            .addArgument('input', 'CustomerAddressInput!', options)\n            .addFieldList(this._getAddressFields());\n    }\n\n    getCreateAccountMutation(options) {\n        const { customer, password, orderID } = options;\n\n        return new Field('createCustomer')\n            .addArgument('input', 'CustomerInput!', { ...customer, password, orderID })\n            .addField(this._getCustomerField());\n    }\n\n    getResendConfirmationMutation(options) {\n        const { email } = options;\n\n        return new Field('resendConfirmationEmail')\n            .addArgument('email', 'String!', email)\n            .addFieldList(this._getResendConfirmationFields());\n    }\n\n    _getResendConfirmationFields() {\n        return [\n            'status'\n        ];\n    }\n\n    getConfirmAccountMutation(options) {\n        const { key, email, password } = options;\n\n        return new Field('confirmCustomerEmail')\n            .addArgument('key', 'String!', key)\n            .addArgument('email', 'String!', email)\n            .addArgument('password', 'String!', password)\n            .addFieldList(this._getConfirmAccountFields());\n    }\n\n    getRevokeAccountToken() {\n        return new Field('revokeCustomerToken')\n            .addFieldList(this.getRevokeAccountTokenFields());\n    }\n\n    getCustomerQuery() {\n        return this._getCustomerField();\n    }\n\n    _getConfirmAccountFields() {\n        return [\n            'status',\n            'token',\n            this._getCustomerField()\n        ];\n    }\n\n    getRevokeAccountTokenFields() {\n        return [\n            'result'\n        ];\n    }\n\n    _getCustomerField() {\n        return new Field('customer')\n            .addFieldList(this._getCustomerFields());\n    }\n\n    _getCustomerFields() {\n        return [\n            'created_at',\n            'confirmation_required',\n            'group_id',\n            'prefix',\n            'firstname',\n            'middlename',\n            'lastname',\n            'suffix',\n            'email',\n            'default_billing',\n            'default_shipping',\n            'dob',\n            'taxvat',\n            'id',\n            'is_subscribed',\n            this._getAddressesField()\n        ];\n    }\n\n    _getAddressesField() {\n        return new Field('addresses')\n            .addFieldList(this._getAddressFields());\n    }\n\n    _getRegionField() {\n        return new Field('region')\n            .addFieldList(this._getRegionFields());\n    }\n\n    _getRegionFields() {\n        return [\n            'region_code',\n            'region',\n            'region_id'\n        ];\n    }\n\n    _getAddressFields() {\n        return [\n            'id',\n            'customer_id',\n            'country_id',\n            'street',\n            'telephone',\n            'postcode',\n            'city',\n            'firstname',\n            'lastname',\n            'middlename',\n            'prefix',\n            'suffix',\n            'default_shipping',\n            'default_billing',\n            'vat_id',\n            this._getRegionField()\n        ];\n    }\n\n    /**\n     * Get ForgotPassword mutation\n     * @param {{email: String}} options\n     * @returns {Field}\n     * @memberof MyAccount\n     */\n    getForgotPasswordMutation(options) {\n        const { email } = options;\n\n        return new Field('forgotPassword')\n            .addArgument('email', 'String!', email)\n            .addField('status');\n    }\n}\n\nexport default new MyAccountQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/**\n * NewsletterSubscription Mutations\n * @class NewsletterSubscriptionQuery\n * @namespace Query/NewsletterSubscription/Query */\nexport class NewsletterSubscriptionQuery {\n    getSubscribeToNewsletterMutation(email) {\n        return new Field('subscribeEmailToNewsletter')\n            .addArgument('email', 'String!', email)\n            .addFieldList(this._getPageFields());\n    }\n\n    _getPageFields() {\n        return [\n            'status'\n        ];\n    }\n}\n\nexport default new NewsletterSubscriptionQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/**\n * Order Query\n * @class OrderQuery\n * @namespace Query/Order/Query */\nexport class OrderQuery {\n    getReorder(incrementId) {\n        return new Field('reorderItems')\n            .addArgument('orderNumber', 'String!', incrementId)\n            .addField(this._getReorderField());\n    }\n\n    getSubscribeToOrderStatus(incrementId) {\n        return new Field('subscribeToOrderStatus')\n            .addArgument('orderNumber', 'String!', incrementId)\n            .addFieldList(this._getSubscribeToOrderStatusOutputFields());\n    }\n\n    getOrderListQuery(options) {\n        return new Field('customer')\n            .addFieldList(this._getOrderListFields(options));\n    }\n\n    getOrderByInvoice(invoiceId) {\n        return new Field('orderByInvoice')\n            .addArgument('invoiceId', 'Int!', invoiceId)\n            .addFieldList(this._getOrderItemsFields(true));\n    }\n\n    getOrderByShipment(shipmentId) {\n        return new Field('orderByShipment')\n            .addArgument('shipmentId', 'Int!', shipmentId)\n            .addFieldList(this._getOrderItemsFields(true));\n    }\n\n    getOrderByRefund(refundId) {\n        return new Field('orderByRefund')\n            .addArgument('refundId', 'Int!', refundId)\n            .addFieldList(this._getOrderItemsFields(true));\n    }\n\n    _getOrderListFields(options) {\n        return [\n            this._getOrdersField(options)\n        ];\n    }\n\n    _getOrdersField(options) {\n        const { orderId, page = 1 } = options || {};\n        const ordersField = new Field('orders');\n\n        if (orderId) {\n            return ordersField\n                .addArgument('filter', 'CustomerOrdersFilterInput', { entity_id: { eq: orderId } })\n                .addFieldList(this._getOrdersFields(true));\n        }\n\n        return ordersField\n            .addArgument('currentPage', 'Int', page)\n            .addFieldList(this._getOrdersFields());\n    }\n\n    _getOrdersFields(isSingleOrder = false) {\n        return [\n            'total_count',\n            this._getOrderItemsField(isSingleOrder),\n            this._getSearchResultPageInfoField()\n        ];\n    }\n\n    _getSearchResultPageInfoField() {\n        return new Field('page_info')\n            .addFieldList(this._getSearchResultPageInfoFields());\n    }\n\n    _getSearchResultPageInfoFields() {\n        return [\n            'current_page',\n            'page_size',\n            'total_pages'\n        ];\n    }\n\n    _getOrderItemsField(isSingleOrder) {\n        return new Field('items')\n            .addFieldList(this._getOrderItemsFields(isSingleOrder));\n    }\n\n    _getOrderItemsFields(isSingleOrder) {\n        const basicFields = [\n            'id',\n            'increment_id',\n            'order_date',\n            'status',\n            'can_reorder',\n            'rss_link',\n            this._getOrderItemTotalField()\n        ];\n\n        if (isSingleOrder) {\n            return [...basicFields, ...this._getSingleOrderFields()];\n        }\n\n        return basicFields;\n    }\n\n    _getSingleOrderFields() {\n        return [\n            'carrier',\n            this._getOrderShipmentsField(),\n            this._getOrderItemsProductsField(),\n            this._getOrderInvoicesField(),\n            this._getOrderRefundsField(),\n            this._getOrderShippingAddressField(),\n            this._getOrderBillingAddressField(),\n            this._getOrderPaymentMethodsField(),\n            this._getOrderShippingMethodField(),\n            this._getOrderCommentsField()\n        ];\n    }\n\n    _getOrderCommentsField() {\n        return new Field('comments')\n            .addFieldList(this._getOrderCommentsFields());\n    }\n\n    _getOrderCommentsFields() {\n        return [\n            'timestamp',\n            'message'\n        ];\n    }\n\n    _getOrderItemTotalField() {\n        return new Field('total')\n            .addFieldList(this._getOrderItemTotalFields());\n    }\n\n    _getOrderItemTotalFields() {\n        return [\n            this._getOrderGrandTotalField(),\n            this._getOrderDiscountsField(),\n            this._getOrderBaseGrantTotalField(),\n            this._getOrderSubtotalField(),\n            this._getOrderTotalShippingField(),\n            this._getOrderTotalTaxField(),\n            this._getOrderShippingHandlingField(),\n            this._getOrderTaxesField()\n        ];\n    }\n\n    _getOrderTaxesField() {\n        return new Field('taxes')\n            .addFieldList(this._getOrderTaxesFields());\n    }\n\n    _getOrderTaxesFields() {\n        return [\n            'rate',\n            'title',\n            this._getOrderAmountField()\n        ];\n    }\n\n    _getOrderShippingHandlingField() {\n        return new Field('shipping_handling')\n            .addFieldList(this._getOrderShippingHandlingFields());\n    }\n\n    _getOrderShippingHandlingFields() {\n        return [\n            this._getOrderShippingAmountExclTaxField(),\n            this._getOrderShippingAmountInclTaxField(),\n            this._getOrderShippingDiscountsField(),\n            this._getOrderShippingHandlingTotalField(),\n            this._getOrderTaxesField()\n        ];\n    }\n\n    _getOrderShippingDiscountsField() {\n        return new Field('discounts')\n            .addFieldList(this._getOrderShippingDiscountsFields());\n    }\n\n    _getOrderShippingDiscountsFields() {\n        return [\n            this._getOrderAmountField()\n        ];\n    }\n\n    _getOrderShippingAmountExclTaxField() {\n        return new Field('amount_excluding_tax')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderShippingAmountInclTaxField() {\n        return new Field('amount_including_tax')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderShippingHandlingTotalField() {\n        return new Field('total_amount')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderTotalTaxField() {\n        return new Field('total_tax')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderTotalShippingField() {\n        return new Field('total_shipping')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderBaseGrantTotalField() {\n        return new Field('base_grand_total')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderSubtotalField() {\n        return new Field('subtotal')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderGrandTotalField() {\n        return new Field('grand_total')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderPriceFields() {\n        return [\n            'value',\n            'currency'\n        ];\n    }\n\n    _getOrderShipmentsField() {\n        return new Field('shipments')\n            .addFieldList(this._getOrderShipmentsFields());\n    }\n\n    _getOrderShipmentsFields() {\n        return [\n            'id',\n            'number',\n            this._getOrderCommentsField(),\n            this._getOrderShipmentTrackingField(),\n            this._getShipmentsItemsProductsField()\n        ];\n    }\n\n    _getShipmentsItemsProductsField() {\n        return new Field('items')\n            .addFieldList(this._getShipmentsItemsProductsFields());\n    }\n\n    _getShipmentsItemsProductsFields() {\n        return [\n            'quantity_shipped',\n            ...this._getBaseOrderItemProductsFields()\n        ];\n    }\n\n    _getOrderShipmentTrackingField() {\n        return new Field('tracking')\n            .addFieldList(this._getOrderShipmentTrackingFields());\n    }\n\n    _getOrderShipmentTrackingFields() {\n        return [\n            'carrier',\n            'number',\n            'title'\n        ];\n    }\n\n    _getOrderRefundsField() {\n        return new Field('credit_memos')\n            .addFieldList(this._getOrderRefundsFields());\n    }\n\n    _getOrderRefundsFields() {\n        return [\n            'id',\n            'number',\n            this._getOrderCommentsField(),\n            this._getRefundsItemsProductsField(),\n            this._getOrderItemTotalField()\n        ];\n    }\n\n    _getOrderDiscountsField() {\n        return new Field('discounts')\n            .addFieldList(this._getOrderDiscountsFields());\n    }\n\n    _getOrderDiscountsFields() {\n        return [\n            'label',\n            this._getOrderAmountField()\n        ];\n    }\n\n    _getOrderAmountField() {\n        return new Field('amount')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getRefundsItemsProductsField() {\n        return new Field('items')\n            .addFieldList(this._getRefundsItemsProductsFields());\n    }\n\n    _getRefundsItemsProductsFields() {\n        return [\n            'quantity_refunded',\n            ...this._getBaseOrderItemProductsFields(),\n            this._getRefundsItemInformationField(),\n            this._getOrderProductRowSubtotalField(),\n            this._getOrderDiscountsField()\n        ];\n    }\n\n    _getRefundsItemInformationField() {\n        return new Field('order_item')\n            .addFieldList(this._getOrderItemProductsFields());\n    }\n\n    _getOrderInvoicesField() {\n        return new Field('invoices')\n            .addFieldList(this._getOrderInvoicesFields());\n    }\n\n    _getOrderInvoicesFields() {\n        return [\n            'id',\n            'number',\n            this._getOrderCommentsField(),\n            this._getInvoiceItemsProductsField(),\n            this._getOrderItemTotalField()\n        ];\n    }\n\n    _getInvoiceItemsProductsField() {\n        return new Field('items')\n            .addFieldList(this._getInvoiceItemProductsFields());\n    }\n\n    _getInvoiceItemProductsFields() {\n        return [\n            'quantity_invoiced',\n            this._getOrderProductRowSubtotalField(),\n            ...this._getBaseOrderItemProductsFields()\n        ];\n    }\n\n    _getOrderItemsProductsField() {\n        return new Field('items')\n            .addFieldList(this._getOrderItemProductsFields());\n    }\n\n    _getOrderItemProductsFields() {\n        return [\n            'product_url_key',\n            'quantity_ordered',\n            'quantity_shipped',\n            'quantity_refunded',\n            'quantity_canceled',\n            this._getOrderProductEnteredOptionsField(),\n            this._getOrderProductSelectedOptionsField(),\n            this._getOrderProductRowSubtotalField(),\n            ...this._getBaseOrderItemProductsFields()\n        ];\n    }\n\n    _getBaseOrderItemProductsFields() {\n        return [\n            'product_name',\n            'product_sku',\n            this._getOrderProductSalePriceField()\n        ];\n    }\n\n    _getOrderProductRowSubtotalField() {\n        return new Field('row_subtotal')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderProductRowSubtotalInclTaxField() {\n        return new Field('row_subtotal_incl_tax')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getOrderProductEnteredOptionsField() {\n        return new Field('entered_options')\n            .addFieldList(this._getOrderProductOptionsFields());\n    }\n\n    _getOrderProductSelectedOptionsField() {\n        return new Field('selected_options')\n            .addFieldList(this._getOrderProductOptionsFields());\n    }\n\n    _getOrderProductOptionsFields() {\n        return [\n            'label',\n            'value',\n            this._getOrderProductBundleOptionItemsField(),\n            'linkItems'\n        ];\n    }\n\n    _getOrderProductBundleOptionItemsField() {\n        return new Field('items')\n            .addFieldList(this._getOrderProductBundleOptionItemsFields());\n    }\n\n    _getOrderProductBundleOptionItemsFields() {\n        return [\n            'title',\n            'qty',\n            'price'\n        ];\n    }\n\n    _getOrderProductSalePriceField() {\n        return new Field('product_sale_price')\n            .addFieldList(this._getOrderPriceFields());\n    }\n\n    _getReorderField() {\n        return new Field('userInputErrors')\n            .addFieldList(this._getReorderFields());\n    }\n\n    _getReorderFields() {\n        return [\n            'code',\n            'message',\n            'path'\n        ];\n    }\n\n    _getOrderShippingAddressField() {\n        return new Field('shipping_address')\n            .addFieldList(this._getOrderAddressFields());\n    }\n\n    _getOrderBillingAddressField() {\n        return new Field('billing_address')\n            .addFieldList(this._getOrderAddressFields());\n    }\n\n    _getOrderAddressFields() {\n        return [\n            'city',\n            'country_id',\n            'firstname',\n            'lastname',\n            'postcode',\n            'region',\n            'region_id',\n            'telephone',\n            'vat_id',\n            this._getOrderAddressStreetField()\n        ];\n    }\n\n    _getOrderAddressStreetField() {\n        return new Field('street');\n    }\n\n    _getOrderPaymentMethodsField() {\n        return new Field('payment_methods')\n            .addFieldList(this._getOrderPaymentMethodsFields());\n    }\n\n    _getOrderPaymentMethodsFields() {\n        return [\n            'name',\n            'type',\n            'purchase_number',\n            this._getOrderPaymentMethodAdditionalField()\n        ];\n    }\n\n    _getOrderPaymentMethodAdditionalField() {\n        return new Field('additional_data')\n            .addFieldList(this._getOrderPaymentMethodAdditionalFields());\n    }\n\n    _getOrderPaymentMethodAdditionalFields() {\n        return [\n            'name',\n            'value'\n        ];\n    }\n\n    _getOrderShippingMethodField() {\n        return new Field('shipping_method');\n    }\n\n    getDownloadableQuery() {\n        return new Field('customerDownloadableProducts')\n            .addField(this._getDownloadableField());\n    }\n\n    getOrderByIdQuery(orderId) {\n        return this._getOrderByIdField(orderId);\n    }\n\n    linkOrderMutation(customerEmail) {\n        return new Field('linkOrder')\n            .addArgument('customer_email', 'String!', customerEmail);\n    }\n\n    _getOrderByIdField(orderId) {\n        return new Field('Customer')\n            .addArgument('id', 'Int!', orderId)\n            .addFieldList(this._getOrderItemsFields());\n    }\n\n    _getDownloadableField() {\n        return new Field('items')\n            .addFieldList(this._getDownloadableFields());\n    }\n\n    _getDownloadableFields() {\n        return [\n            'order_id',\n            'order_increment_id',\n            'date',\n            'status',\n            'download_url',\n            'link_title',\n            'remaining_downloads',\n            'title'\n        ];\n    }\n}\n\nexport default new OrderQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { ProductListQuery } from 'Query/ProductList.query';\nimport { Field } from 'Util/Query';\n\n/** @namespace Query/ProductCompare/Query */\nexport class ProductCompareQuery extends ProductListQuery {\n    getCreateEmptyCompareList() {\n        return new Field('createCompareList')\n            .addArgument('input', 'CreateCompareListInput', {})\n            .addFieldList(this._getCompareListFields());\n    }\n\n    getCreateCompareList(products) {\n        return new Field('createCompareList')\n            .addArgument('input', 'CreateCompareListInput', { products })\n            .addFieldList(this._getCompareListFields());\n    }\n\n    getDeleteCompareList(uid) {\n        return new Field('deleteCompareList')\n            .addArgument('uid', 'ID!', uid)\n            .addField('result');\n    }\n\n    getAddProductsToCompareList(uid, products) {\n        return new Field('addProductsToCompareList')\n            .addArgument('input', 'AddProductsToCompareListInput', { uid, products })\n            .addFieldList(this._getCompareListFields());\n    }\n\n    getRemoveProductsFromCompareList(uid, products) {\n        return new Field('removeProductsFromCompareList')\n            .addArgument('input', 'RemoveProductsFromCompareListInput', { uid, products })\n            .addFieldList(this._getCompareListFields());\n    }\n\n    getAssignCompareList(uid) {\n        return new Field('assignCompareListToCustomer')\n            .addArgument('uid', 'ID!', uid)\n            .addFieldList(this._getAssignFields());\n    }\n\n    _getAssignFields() {\n        return [\n            'result',\n            this._getAssignCompareListField()\n        ];\n    }\n\n    _getAssignCompareListField() {\n        return new Field('compare_list')\n            .addFieldList(this._getCompareListFields());\n    }\n\n    getCompareList(uid) {\n        return new Field('compareList')\n            .addArgument('uid', 'ID!', uid)\n            .addFieldList(this._getCompareListFields());\n    }\n\n    getCompareListIds(uid) {\n        return new Field('compareList')\n            .addArgument('uid', 'ID!', uid)\n            .addField(this._getComparableItemIdsField());\n    }\n\n    _getCompareListFields() {\n        return [\n            'uid',\n            'item_count',\n            // 'review_count',\n            // 'rating_summary',\n            this._getCompareAttributeField(),\n            this._getComparableItemField()\n        ];\n    }\n\n    _getCompareAttributeField() {\n        return new Field('attributes')\n            .addFieldList(this._getCompareAttributeFields());\n    }\n\n    _getCompareAttributeFields() {\n        return [\n            'label',\n            'code'\n        ];\n    }\n\n    _getComparableItemAttributeField() {\n        return new Field('attributes')\n            .addFieldList(this._getComparableItemAttributeFields());\n    }\n\n    _getComparableItemAttributeFields() {\n        return [\n            'value',\n            'code'\n        ];\n    }\n\n    _getComparableItemFields() {\n        return [\n            this._getCompareProductField(),\n            this._getComparableItemAttributeField()\n        ];\n    }\n\n    _getComparableItemIdsFields() {\n        return [\n            this._getProductIdsField()\n        ];\n    }\n\n    _getCompareProductField() {\n        return new Field('product')\n            .addFieldList(this._getProductInterfaceFields(true, false))\n            .addFieldList(['url'])\n            .addField(this._getReviewCountField())\n            .addField(this._getRatingSummaryField())\n            .addField(this._getDescriptionField())\n            .addField(this._getGroupedProductItems());\n    }\n\n    _getProductIdsField() {\n        return new Field('product')\n            .addFieldList(this._getProductIdsFields());\n    }\n\n    _getComparableItemField() {\n        return new Field('items')\n            .addFieldList(this._getComparableItemFields());\n    }\n\n    _getComparableItemIdsField() {\n        return new Field('items')\n            .addFieldList(this._getComparableItemIdsFields());\n    }\n\n    _getProductIdsFields() {\n        return [\n            'id'\n        ];\n    }\n}\n\nexport default new ProductCompareQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { SORT_DIRECTION_TYPE } from 'Route/CategoryPage/CategoryPage.config';\nimport { NONE_SORT_OPTION_VALUE } from 'Route/SearchPage/SearchPage.config';\nimport { CUSTOMER } from 'Store/MyAccount/MyAccount.dispatcher';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { Field, Fragment } from 'Util/Query';\n\n/**\n * Product List Query\n * @class ProductListQuery\n * @namespace Query/ProductList/Query */\nexport class ProductListQuery {\n    __construct() {\n        super.__construct();\n        this.options = {};\n    }\n\n    getQuery(options) {\n        if (!options) {\n            throw new Error('Missing argument `options`');\n        }\n\n        this.options = options;\n\n        return this._getProductsField();\n    }\n\n    _getProductsField() {\n        const products = new Field('products')\n            .addFieldList(this._getProductFields());\n\n        this._getProductArguments().forEach((arg) => products.addArgument(...arg));\n\n        return products;\n    }\n\n    _getPriceFilter(key, value) {\n        const [from, to] = value[0].split('_');\n\n        if (from === '*') {\n            return { [key]: { to } };\n        }\n\n        if (to === '*') {\n            return { [key]: { from } };\n        }\n\n        return {\n            [key]: { from, to }\n        };\n    }\n\n    _getCustomFilters(filters = {}) {\n        return Object.entries(filters)\n            .reduce((acc, [key, attribute]) => {\n                if (!attribute.length) {\n                    return acc;\n                }\n\n                if (key === 'price') {\n                    return {\n                        ...acc,\n                        ...this._getPriceFilter(key, attribute)\n                    };\n                }\n\n                return {\n                    ...acc,\n                    [key]: { in: attribute }\n                };\n            }, {});\n    }\n\n    _getFilterArgumentMap() {\n        return {\n            categoryIds: (id) => ({ category_id: { eq: id } }),\n            categoryUrlPath: (url) => ({ category_url_path: { eq: url } }),\n            priceRange: ({ min, max }) => {\n                const price = {};\n\n                if (min) {\n                    price.from = min;\n                }\n\n                if (max) {\n                    price.to = max;\n                }\n\n                return { price };\n            },\n            productsSkuArray: (sku) => ({ sku: { in: sku } }),\n            productSKU: (sku) => ({ sku: { eq: sku } }),\n            productID: (id) => ({ id: { eq: id } }),\n            productUrlPath: (url) => ({ url_key: { eq: url } }),\n            customFilters: this._getCustomFilters.bind(this),\n            newToDate: (date) => ({ news_to_date: { gteq: date } }),\n            conditions: (conditions) => ({ conditions: { eq: conditions } }),\n            customerGroupId: (id) => ({ customer_group_id: { eq: id } })\n        };\n    }\n\n    _getArgumentsMap() {\n        const { requireInfo } = this.options;\n        const filterArgumentMap = this._getFilterArgumentMap();\n\n        return {\n            currentPage: { type: 'Int!' },\n            pageSize: {\n                type: 'Int!',\n                handler: (option) => (requireInfo ? 1 : option)\n            },\n            search: {\n                type: 'String!',\n                handler: (option) => option.replace(/\\+/g, ' ')\n            },\n            sort: {\n                type: 'ProductAttributeSortInput!',\n                handler: ({ sortKey, sortDirection }) => {\n                    if (sortKey === NONE_SORT_OPTION_VALUE) {\n                        return {};\n                    }\n\n                    return { [sortKey]: sortDirection || SORT_DIRECTION_TYPE.asc };\n                }\n            },\n            filter: {\n                type: 'ProductAttributeFilterInput!',\n                handler: (initialOptions = {}) => {\n                    // add customer group by default to all requests\n                    const { group_id } = BrowserDatabase.getItem(CUSTOMER) || {};\n\n                    const options = {\n                        ...initialOptions,\n                        customerGroupId: group_id || '0'\n                    };\n\n                    const {\n                        customFilters: { category_id } = {}\n                    } = options;\n\n                    /**\n                     * Remove category ID from select, if there is a custom filter\n                     * of category already selected in filtering options.\n                     */\n                    if (category_id) {\n                        // eslint-disable-next-line fp/no-delete\n                        options.categoryIds = undefined;\n                    }\n\n                    const parsedOptions = Object.entries(options).reduce(\n                        (acc, [key, option]) => {\n                            // if there is no value, or if the key is just not present in options object\n                            if (!option || !filterArgumentMap[key]) {\n                                return acc;\n                            }\n\n                            return { ...acc, ...filterArgumentMap[key](option) };\n                        },\n                        {}\n                    );\n\n                    return parsedOptions;\n                }\n            }\n        };\n    }\n\n    _getProductArguments() {\n        const { args } = this.options;\n        const argumentMap = this._getArgumentsMap();\n\n        return Object.entries(args).reduce((acc, [key, arg]) => {\n            if (!arg) {\n                return acc;\n            }\n            const { type, handler = (option) => option } = argumentMap[key];\n\n            return [...acc, [key, type, handler(arg)]];\n        }, []);\n    }\n\n    _getProductFields() {\n        const { requireInfo, isSingleProduct, notRequireInfo } = this.options;\n\n        // do not request total count for PDP\n        if (isSingleProduct || notRequireInfo) {\n            return [\n                this._getItemsField()\n            ];\n        }\n\n        // for filters only request\n        if (requireInfo) {\n            return [\n                this._getSortField(),\n                this._getAggregationsField()\n            ];\n        }\n\n        return [\n            'total_count',\n            this._getItemsField(),\n            this._getPageInfoField()\n        ];\n    }\n\n    _getCartProductInterfaceFields() {\n        return [\n            'uid',\n            'id',\n            'sku',\n            'name',\n            'type_id',\n            'stock_status',\n            'url',\n            'salable_qty',\n            this._getStockItemField(),\n            this._getProductThumbnailField(),\n            this._getCartConfigurableProductFragment(),\n            this._getAttributesField(false, true),\n            this._getProductLinksField()\n        ];\n    }\n\n    _getCartConfigurableProductFragment() {\n        return new Fragment('ConfigurableProduct')\n            .addFieldList([\n                this._getConfigurableOptionsField(),\n                this._getCartVariantsField()\n            ]);\n    }\n\n    _getCartVariantsField() {\n        return new Field('variants')\n            .setAlias('variants')\n            .addFieldList(this._getCartVariantFields());\n    }\n\n    _getCartVariantFields() {\n        return [\n            this._getCartProductField()\n        ];\n    }\n\n    _getCartProductField() {\n        return new Field('product')\n            .addFieldList([\n                'id',\n                'sku',\n                'stock_status',\n                'salable_qty',\n                this._getStockItemField(),\n                this._getProductThumbnailField(),\n                this._getAttributesField(true, true)\n            ]);\n    }\n\n    _getProductInterfaceFields(isVariant, isForLinkedProducts = false, isForWishlist = false) {\n        const {\n            isPlp = false,\n            isSingleProduct,\n            noAttributes = false,\n            noVariants = false,\n            noVariantAttributes = false\n        } = this.options;\n\n        // set option to always request images for product variants if they're requested for wishlist\n        if (isForWishlist) {\n            this.options.isForWishlist = true;\n        }\n\n        // Basic fields returned always\n        const fields = [\n            'uid',\n            'id',\n            'sku',\n            'name',\n            'type_id',\n            'stock_status',\n            'salable_qty',\n            this._getStockItemField(),\n            this._getPriceRangeField()\n        ];\n\n        // Additional fields, which we want to return always, except when it's variants on PLP (due to hugh number of items)\n        if (!(isPlp && isVariant) || isForWishlist) {\n            fields.push(\n                this._getProductImageField(),\n                this._getProductThumbnailField(),\n                this._getProductSmallField(),\n                this._getShortDescriptionField(),\n                'special_from_date',\n                'special_to_date',\n                this._getTierPricesField()\n            );\n        }\n\n        // if it is normal product and we need attributes\n        // or if, it is variant, but we need variant attributes or variants them-self\n        if ((!isVariant && !noAttributes) || (isVariant && !noVariantAttributes && !noVariants)) {\n            fields.push(this._getAttributesField(isVariant));\n        }\n\n        // to all products (non-variants)\n        if (!isVariant) {\n            fields.push(\n                'url',\n                this._getUrlRewritesFields(),\n                this._getReviewCountField(),\n                this._getRatingSummaryField(),\n                this._getCustomizableProductFragment()\n            );\n\n            // if variants are not needed\n            if (!noVariants) {\n                fields.push(\n                    this._getConfigurableProductFragment(),\n                    this._getBundleProductFragment(),\n                    this._getGroupedProductItems()\n                );\n            }\n        }\n\n        // prevent linked products from looping\n        if (isForLinkedProducts) {\n            fields.push(this._getProductLinksField());\n        }\n\n        // additional information to PDP loads\n        if (isSingleProduct) {\n            fields.push(\n                'stock_status',\n                this._getDescriptionField(),\n                this._getMediaGalleryField(),\n                this._getSimpleProductFragment()\n            );\n\n            // for variants of PDP requested product\n            if (!isVariant) {\n                fields.push(\n                    'canonical_url',\n                    'meta_title',\n                    'meta_keyword',\n                    'meta_description',\n                    this._getCategoriesField(),\n                    this._getReviewsField(),\n                    this._getVirtualProductFragment(),\n                    this._getCustomizableProductFragment(),\n                    this._getProductLinksField()\n                );\n            }\n        }\n\n        return fields;\n    }\n\n    /**\n     * For grouped products, returns the subfields of the elements of the `items` field\n     * @returns {*[]}\n     * @private\n     */\n    _getGroupedProductItemFields() {\n        return [\n            this._getProductField(),\n            'position',\n            'qty'\n        ];\n    }\n\n    /**\n     * A GroupedProduct-specific field that queries the products that are grouped under this product\n     * @returns {Field}\n     * @private\n     */\n    _getGroupedProductItems() {\n        return new Fragment('GroupedProduct').addField(\n            new Field('items')\n                .addFieldList(this._getGroupedProductItemFields())\n        );\n    }\n\n    /**\n     * A DownloadableProduct-specific field that queries the links and samples\n     * @returns {Field}\n     * @private\n     */\n    _getDownloadableProductFields() {\n        return new Fragment('DownloadableProduct')\n            .addFieldList(this._getDownloadableProductLinks());\n    }\n\n    _getDownloadableProductLinks() {\n        return [\n            'links_title',\n            'samples_title',\n            'links_purchased_separately',\n            this._getDownloadableProductLinkField(),\n            this._getDownloadableProductSampleField()\n        ];\n    }\n\n    _getDownloadableProductLinksRequired() {\n        return new Fragment('DownloadableProduct')\n            .addFieldList(this._getDownloadableProductLinksRequiredFields());\n    }\n\n    _getDownloadableProductLinksRequiredFields() {\n        return [\n            'links_purchased_separately'\n        ];\n    }\n\n    _getDownloadableProductLinkField() {\n        return new Field('downloadable_product_links')\n            .addFieldList(this._getDownloadableProductLinkFields());\n    }\n\n    _getDownloadableProductLinkFields() {\n        return [\n            'sample_url',\n            'sort_order',\n            'title',\n            'id',\n            'uid',\n            'price'\n        ];\n    }\n\n    _getDownloadableProductSampleField() {\n        return new Field('downloadable_product_samples')\n            .addFieldList(this._getDownloadableProductSampleFields());\n    }\n\n    _getDownloadableProductSampleFields() {\n        return [\n            'title',\n            'sort_order',\n            'sample_url'\n        ];\n    }\n\n    _getItemsField() {\n        const { isSingleProduct } = this.options;\n\n        const items = new Field('items')\n            .addFieldList(this._getProductInterfaceFields());\n\n        if (isSingleProduct) {\n            // items.addField(this._getGroupedProductItems());\n            items.addField(this._getDownloadableProductFields());\n        } else {\n            items.addField(this._getDownloadableProductLinksRequired());\n        }\n\n        return items;\n    }\n\n    _getProductField() {\n        const { isForLinkedProducts, isForWishlist = false } = this.options;\n\n        return new Field('product')\n            .addFieldList(this._getProductInterfaceFields(true, isForLinkedProducts, isForWishlist));\n    }\n\n    _getShortDescriptionFields() {\n        return [\n            'html'\n        ];\n    }\n\n    _getShortDescriptionField() {\n        return new Field('short_description')\n            .addFieldList(this._getShortDescriptionFields());\n    }\n\n    _getStockItemField() {\n        return new Field('stock_item')\n            .addFieldList(this._getStockItemFields());\n    }\n\n    _getStockItemFields() {\n        return [\n            'in_stock',\n            'min_sale_qty',\n            'max_sale_qty',\n            'qty_increments'\n        ];\n    }\n\n    _getBreadcrumbFields() {\n        return [\n            'category_id',\n            'category_name',\n            'category_level',\n            'category_url',\n            'category_is_active'\n        ];\n    }\n\n    _getBreadcrumbsField() {\n        return new Field('breadcrumbs')\n            .addFieldList(this._getBreadcrumbFields());\n    }\n\n    _getCategoryFields() {\n        return [\n            'id',\n            'name',\n            'url',\n            this._getBreadcrumbsField()\n        ];\n    }\n\n    _getCategoriesField() {\n        return new Field('categories')\n            .addFieldList(this._getCategoryFields());\n    }\n\n    _getMinimalPriceFields() {\n        return [\n            this._getDiscountField(),\n            this._getFinalPriceField(),\n            this._getFinalPriceExclTaxField(),\n            this._getRegularPriceField(),\n            this._getRegularPriceExclTaxField(),\n            this._getDefaultPriceField(),\n            this._getDefaultFinalPriceField(),\n            this._getDefaultFinalPriceExclTaxField()\n        ];\n    }\n\n    _getMinimalPriceField() {\n        return new Field('minimum_price')\n            .addFieldList(this._getMinimalPriceFields());\n    }\n\n    _getMaximalPriceField() {\n        return new Field('maximum_price')\n            .addFieldList(this._getMinimalPriceFields());\n    }\n\n    _getPriceRangeFields() {\n        // Using an array as potentially would want to add maximum price\n        return [\n            this._getMinimalPriceField(),\n            this._getMaximalPriceField()\n        ];\n    }\n\n    _getPriceRangeField() {\n        return new Field('price_range')\n            .addFieldList(this._getPriceRangeFields());\n    }\n\n    /**\n     * @returns {[string]} an array representing the subfields of the product thumbnail\n     * @private\n     */\n    _getProductThumbnailFields() {\n        return [\n            'path',\n            'url'\n        ];\n    }\n\n    _getProductSmallFields() {\n        return this._getProductThumbnailFields();\n    }\n\n    /**\n     * Returns the field for fetching the thumbnail of a product.\n     * Not to be confused with the media thumbnail field, which has the same name but is a subfield of media_gallery_entries\n     * @returns {Field}\n     * @private\n     */\n    _getProductThumbnailField() {\n        return new Field('thumbnail')\n            .addFieldList(this._getProductThumbnailFields());\n    }\n\n    _getProductSmallField() {\n        return new Field('small_image')\n            .addFieldList(this._getProductSmallFields());\n    }\n\n    _getProductImageField() {\n        return new Field('image')\n            .addFieldList(this._getProductThumbnailFields());\n    }\n\n    _getAttributeOptionField(noSwatches) {\n        return [\n            'label',\n            'value',\n            !noSwatches && this._getSwatchDataField()\n        ];\n    }\n\n    _getAttributeOptionsField(noSwatches) {\n        return new Field('attribute_options')\n            .addFieldList(this._getAttributeOptionField(noSwatches));\n    }\n\n    _getAdditionalAttributeFields(isCart) {\n        if (isCart) {\n            return [];\n        }\n\n        return [\n            'attribute_type',\n            'attribute_group_id',\n            'attribute_group_name'\n        ];\n    }\n\n    _getAttributeOptionsFields(isVariant) {\n        if (isVariant) {\n            return [];\n        }\n\n        return [\n            this._getAttributeOptionsField()\n        ];\n    }\n\n    _getAttributeFields(isVariant = false, isCart = false) {\n        return [\n            'attribute_id',\n            'attribute_value',\n            'attribute_code',\n            'attribute_label',\n            ...this._getAdditionalAttributeFields(isCart),\n            ...this._getAttributeOptionsFields(isVariant)\n        ];\n    }\n\n    _getAttributesField(isVariant, isCart) {\n        return new Field('s_attributes')\n            .setAlias('attributes')\n            .addFieldList(this._getAttributeFields(isVariant, isCart));\n    }\n\n    _getMediaGalleryFields() {\n        return [\n            'id',\n            'file',\n            'label',\n            'position',\n            'disabled',\n            'media_type',\n            'types',\n            this._getVideoContentField(),\n            this._getMediaThumbnailField(),\n            this._getMediaBaseField(),\n            this._getMediaLargeField()\n        ];\n    }\n\n    /**\n     * Returns a field querying video-specific data for a media gallery entry.\n     * @returns {Field} the video_content field\n     * @private\n     */\n    _getVideoContentField() {\n        return new Field('video_content').addFieldList([\n            'media_type',\n            'video_description',\n            'video_metadata',\n            'video_provider',\n            'video_title',\n            'video_url'\n        ]);\n    }\n\n    /**\n     * Returns a field querying the thumbnail of a media gallery entry.\n     * Not to be confused with the product thumbnail field, which has the same name but is a direct subfield of the product\n     * @returns {Field}\n     * @private\n     */\n    _getMediaThumbnailField() {\n        return new Field('thumbnail').addField('url');\n    }\n\n    _getMediaBaseField() {\n        return new Field('base').addField('url');\n    }\n\n    _getMediaLargeField() {\n        return new Field('large').addField('url');\n    }\n\n    _getMediaGalleryField() {\n        return new Field('media_gallery_entries')\n            .addFieldList(this._getMediaGalleryFields());\n    }\n\n    _getProductLinksField() {\n        return new Field('product_links')\n            .addFieldList(this._getProductLinkFields());\n    }\n\n    _getDescriptionFields() {\n        return [\n            'html'\n        ];\n    }\n\n    _getDescriptionField() {\n        return new Field('description')\n            .addFieldList(this._getDescriptionFields());\n    }\n\n    _getUrlRewritesFields() {\n        return new Field('url_rewrites')\n            .addFieldList(['url']);\n    }\n\n    _getProductLinkFields() {\n        return [\n            'position',\n            'link_type',\n            'linked_product_sku'\n        ];\n    }\n\n    _getRatingsBreakdownFields() {\n        return [\n            new Field('name').setAlias('rating_code'),\n            'value'\n        ];\n    }\n\n    _getRatingsBreakdownField() {\n        return new Field('ratings_breakdown')\n            .setAlias('rating_votes')\n            .addFieldList(this._getRatingsBreakdownFields());\n    }\n\n    _getReviewItemsFields() {\n        return [\n            'average_rating',\n            'nickname',\n            new Field('summary').setAlias('title'),\n            new Field('text').setAlias('detail'),\n            'created_at',\n            this._getRatingsBreakdownField()\n        ];\n    }\n\n    _getReviewItemsField() {\n        return new Field('items')\n            .addFieldList(this._getReviewItemsFields());\n    }\n\n    _getReviewsFields() {\n        return [\n            this._getReviewItemsField()\n        ];\n    }\n\n    _getReviewsField() {\n        return new Field('reviews')\n            // Hard-coded pages, it will be very hard to\n            // paginate using current implementation\n            // eslint-disable-next-line no-magic-numbers\n            .addArgument('pageSize', 'Int', 20)\n            .addArgument('currentPage', 'Int', 1)\n            .addFieldList(this._getReviewsFields());\n    }\n\n    _getReviewCountField() {\n        return new Field('review_count');\n    }\n\n    _getRatingSummaryField() {\n        return new Field('rating_summary');\n    }\n\n    _getBundleOptionsFields() {\n        return [\n            'uid',\n            'label',\n            'quantity',\n            'position',\n            'is_default',\n            'price',\n            'price_type',\n            'can_change_quantity',\n            this._getProductBundleOptionField()\n        ];\n    }\n\n    _getProductBundleOptionField() {\n        return new Field('product')\n            .addFieldList(this._getProductBundleOptionFields());\n    }\n\n    _getProductBundleOptionFields() {\n        return [\n            'name',\n            'stock_status',\n            this._getPriceRangeField()\n        ];\n    }\n\n    _getBundleOptionsField() {\n        return new Field('options')\n            .addFieldList(this._getBundleOptionsFields());\n    }\n\n    _getBundleItemsFields() {\n        return [\n            'uid',\n            'option_id',\n            'title',\n            'required',\n            'type',\n            'position',\n            'sku',\n            this._getBundleOptionsField()\n        ];\n    }\n\n    _getBundleItemsField() {\n        return new Field('items')\n            .addFieldList(this._getBundleItemsFields());\n    }\n\n    _getBundlePriceOptionSelectionFields() {\n        return [\n            'selection_id',\n            'final_option_price',\n            'final_option_price_excl_tax',\n            'regular_option_price',\n            'regular_option_price_excl_tax'\n        ];\n    }\n\n    _getBundlePriceOptionFields() {\n        return [\n            'option_id',\n            new Field('selection_details')\n                .addFieldList(this._getBundlePriceOptionSelectionFields())\n        ];\n    }\n\n    _getBundlePriceOptionsField() {\n        return new Field('bundle_options')\n            .addFieldList(this._getBundlePriceOptionFields());\n    }\n\n    _getBundleProductFragmentFields() {\n        return [\n            'dynamic_price',\n            'dynamic_sku',\n            'ship_bundle_items',\n            'dynamic_weight',\n            this._getBundleItemsField(),\n            this._getBundlePriceOptionsField()\n        ];\n    }\n\n    _getValueFields() {\n        return [\n            'value_index'\n        ];\n    }\n\n    _getValuesField() {\n        return new Field('values')\n            .addFieldList(this._getValueFields());\n    }\n\n    _getConfigurableOptionFields() {\n        return [\n            'attribute_code',\n            this._getValuesField()\n        ];\n    }\n\n    _getConfigurableOptionsField() {\n        return new Field('configurable_options')\n            .addFieldList(this._getConfigurableOptionFields());\n    }\n\n    _getVariantFields() {\n        return [\n            this._getProductField()\n        ];\n    }\n\n    _getVariantsField() {\n        const { isPlp = false, isForWishlist = false } = this.options;\n\n        // For PLP page we have optimized variants graphql field\n        const variantsField = isPlp && !isForWishlist ? 'variants_plp' : 'variants';\n\n        return new Field(variantsField)\n            .setAlias('variants')\n            .addFieldList(this._getVariantFields());\n    }\n\n    _getConfigurableProductFragmentFields() {\n        return [\n            this._getConfigurableOptionsField(),\n            this._getVariantsField()\n        ];\n    }\n\n    _getCustomizableTextValueFields() {\n        return [\n            'price',\n            'priceInclTax',\n            'priceExclTax',\n            'price_type',\n            'currency',\n            'sku',\n            'max_characters'\n        ];\n    }\n\n    _getCustomizableTextValueField(alias) {\n        return new Field('value')\n            .addFieldList(this._getCustomizableTextValueFields())\n            .setAlias(alias);\n    }\n\n    _getCustomizableTextFields(alias) {\n        return [\n            this._getCustomizableTextValueField(alias),\n            'product_sku'\n        ];\n    }\n\n    _getCustomizableFileValueField(alias) {\n        return new Field('value')\n            .addFieldList([\n                'price',\n                'priceInclTax',\n                'priceExclTax',\n                'price_type',\n                'currency',\n                'sku',\n                'file_extension'\n            ])\n            .setAlias(alias);\n    }\n\n    _getCustomizableAreaOption() {\n        return new Fragment('CustomizableAreaOption')\n            .addFieldList(this._getCustomizableTextFields('areaValues'));\n    }\n\n    _getCustomizableFieldOption() {\n        return new Fragment('CustomizableFieldOption')\n            .addFieldList(this._getCustomizableTextFields('fieldValues'));\n    }\n\n    _getCustomizableFileOption() {\n        return new Fragment('CustomizableFileOption')\n            .addFieldList([this._getCustomizableFileValueField('fileValues')]);\n    }\n\n    _getCustomizableDateValueFields() {\n        return [\n            'price',\n            'priceInclTax',\n            'priceExclTax',\n            'price_type',\n            'currency',\n            'sku'\n        ];\n    }\n\n    _getCustomizableDateValueField() {\n        return new Field('value')\n            .addFieldList(this._getCustomizableDateValueFields());\n    }\n\n    _getCustomizableDateFields(alias) {\n        return [\n            this._getCustomizableDateValueField(alias),\n            'product_sku'\n        ];\n    }\n\n    _getCustomizableDateOption() {\n        return new Fragment('CustomizableDateOption')\n            .addFieldList(this._getCustomizableDateFields());\n    }\n\n    _getCustomizableSelectionValueFields() {\n        return [\n            'uid',\n            'option_type_id',\n            'price',\n            'priceInclTax',\n            'priceExclTax',\n            'price_type',\n            'currency',\n            'sku',\n            'title',\n            'sort_order'\n        ];\n    }\n\n    _getCustomizableSelectionValueField(alias) {\n        return new Field('value')\n            .addFieldList(this._getCustomizableSelectionValueFields())\n            .setAlias(alias);\n    }\n\n    _getCustomizableCheckboxOption() {\n        return new Fragment('CustomizableCheckboxOption')\n            .addFieldList([this._getCustomizableSelectionValueField('checkboxValues')]);\n    }\n\n    _getCustomizableMultiOption() {\n        return new Fragment('CustomizableMultipleOption')\n            .addFieldList([this._getCustomizableSelectionValueField('checkboxValues')]); // same as checkbox\n    }\n\n    _getCustomizableDropdownOption() {\n        return new Fragment('CustomizableDropDownOption')\n            .addFieldList([this._getCustomizableSelectionValueField('dropdownValues')]);\n    }\n\n    _getCustomizableRadioOption() {\n        return new Fragment('CustomizableRadioOption')\n            .addFieldList([this._getCustomizableSelectionValueField('dropdownValues')]); // same as dropdown\n    }\n\n    _getCustomizableProductFragmentOptionsFields() {\n        return [\n            this._getCustomizableDropdownOption(),\n            this._getCustomizableRadioOption(),\n            this._getCustomizableCheckboxOption(),\n            this._getCustomizableMultiOption(),\n            this._getCustomizableFieldOption(),\n            this._getCustomizableAreaOption(),\n            this._getCustomizableFileOption(),\n            this._getCustomizableDateOption(),\n            'title',\n            'required',\n            'sort_order',\n            'type',\n            'uid'\n        ];\n    }\n\n    _getCustomizableProductFragmentOptionsField() {\n        return new Field('options')\n            .addFieldList(this._getCustomizableProductFragmentOptionsFields());\n    }\n\n    _getCustomizableProductFragment() {\n        return new Fragment('CustomizableProductInterface')\n            .addFieldList([this._getCustomizableProductFragmentOptionsField()]);\n    }\n\n    _getSimpleProductFragmentFields() {\n        return [\n            this._getTierPricesField()\n        ];\n    }\n\n    _getVirtualProductFragmentFields() {\n        return [\n            this._getTierPricesField()\n        ];\n    }\n\n    _getTierPricesField() {\n        return new Field('price_tiers')\n            .addFieldList(this._getTierPricesFields());\n    }\n\n    _getTierPricesFields() {\n        return [\n            this._getDiscountField(),\n            this._getFinalPriceField(),\n            'quantity'\n        ];\n    }\n\n    _getDiscountField() {\n        return new Field('discount')\n            .addField('amount_off')\n            .addField('percent_off');\n    }\n\n    _getFinalPriceField() {\n        return new Field('final_price')\n            .addField('currency')\n            .addField('value');\n    }\n\n    _getFinalPriceExclTaxField() {\n        return new Field('final_price_excl_tax')\n            .addField('currency')\n            .addField('value');\n    }\n\n    _getRegularPriceField() {\n        return new Field('regular_price')\n            .addField('currency')\n            .addField('value');\n    }\n\n    _getRegularPriceExclTaxField() {\n        return new Field('regular_price_excl_tax')\n            .addField('currency')\n            .addField('value');\n    }\n\n    _getDefaultFinalPriceExclTaxField() {\n        return new Field('default_final_price_excl_tax')\n            .addField('currency')\n            .addField('value');\n    }\n\n    _getDefaultPriceField() {\n        return new Field('default_price')\n            .addField('currency')\n            .addField('value');\n    }\n\n    _getDefaultFinalPriceField() {\n        return new Field('default_final_price')\n            .addField('currency')\n            .addField('value');\n    }\n\n    _getBundleProductFragment() {\n        return new Fragment('BundleProduct')\n            .addFieldList(this._getBundleProductFragmentFields());\n    }\n\n    _getConfigurableProductFragment() {\n        return new Fragment('ConfigurableProduct')\n            .addFieldList(this._getConfigurableProductFragmentFields());\n    }\n\n    _getSimpleProductFragment() {\n        return new Fragment('SimpleProduct')\n            .addFieldList(this._getSimpleProductFragmentFields());\n    }\n\n    _getVirtualProductFragment() {\n        return new Fragment('VirtualProduct')\n            .addFieldList(this._getVirtualProductFragmentFields());\n    }\n\n    _getSortOptionFields() {\n        return [\n            'value',\n            'label'\n        ];\n    }\n\n    _getSortOptionsField() {\n        return new Field('options')\n            .addFieldList(this._getSortOptionFields());\n    }\n\n    _getSortFields() {\n        return [\n            this._getSortOptionsField()\n        ];\n    }\n\n    _getSortField() {\n        return new Field('sort_fields')\n            .addFieldList(this._getSortFields());\n    }\n\n    _getSwatchDataFields() {\n        return [\n            'type',\n            'value'\n        ];\n    }\n\n    _getSwatchDataField() {\n        return new Field('swatch_data')\n            .addFieldList(this._getSwatchDataFields());\n    }\n\n    _getAggregationsField() {\n        return new Field('aggregations')\n            .setAlias('filters')\n            .addFieldList(this._getAggregationsFields());\n    }\n\n    _getAggregationsFields() {\n        return [\n            new Field('label').setAlias('name'),\n            new Field('attribute_code').setAlias('request_var'),\n            'is_boolean',\n            'has_swatch',\n            'position',\n            this._getAggregationsOptionsField()\n        ];\n    }\n\n    _getAggregationsOptionsField() {\n        return new Field('options')\n            .setAlias('filter_items')\n            .addFieldList(this._getAggregationsOptionsFields());\n    }\n\n    _getAggregationsOptionsFields() {\n        return [\n            'label',\n            'count',\n            new Field('value').setAlias('value_string'),\n            this._getSwatchDataField()\n        ];\n    }\n\n    _getPageInfoField() {\n        return new Field('page_info')\n            .addField('current_page')\n            .addField('total_pages');\n    }\n}\n\nexport default new ProductListQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/**\n * RegionQuery Mutations\n * @class RegionQuery\n * @namespace Query/Region/Query */\nexport class RegionQuery {\n    getCountriesQuery() {\n        return new Field('countries')\n            .addFieldList(this._getCountryFields());\n    }\n\n    _getCountryFields() {\n        return [\n            'id',\n            'is_state_required',\n            this._getAvailableRegionsField(),\n            new Field('full_name_locale').setAlias('label')\n        ];\n    }\n\n    _getAvailableRegionFields() {\n        return [\n            'code',\n            'name',\n            'id'\n        ];\n    }\n\n    _getAvailableRegionsField() {\n        return new Field('available_regions')\n            .addFieldList(this._getAvailableRegionFields());\n    }\n}\n\nexport default new RegionQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/** @namespace Query/Review/Query */\nexport class ReviewQuery {\n    getAddProductReviewMutation(reviewItem) {\n        return new Field('createProductReview')\n            .setAlias('addProductReview')\n            .addArgument('input', 'CreateProductReviewInput!', reviewItem)\n            .addField(new Field('review').addField('nickname'));\n    }\n\n    getRatingQuery() {\n        return new Field('productReviewRatingsMetadata')\n            .setAlias('reviewRatings')\n            .addFieldList(this._getRatingFields());\n    }\n\n    _getRatingFields() {\n        return [\n            this._getRatingItemsField()\n        ];\n    }\n\n    _getRatingItemsField() {\n        return new Field('items')\n            .addFieldList(this._getRatingItemsFields());\n    }\n\n    _getRatingItemsFields() {\n        return [\n            new Field('id').setAlias('rating_id'),\n            new Field('name').setAlias('rating_code'),\n            this._getRatingOptionsField()\n        ];\n    }\n\n    _getRatingOptionFields() {\n        return [\n            new Field('value_id').setAlias('option_id'),\n            'value'\n        ];\n    }\n\n    _getRatingOptionsField() {\n        return new Field('values')\n            .setAlias('rating_options')\n            .addFieldList(this._getRatingOptionFields());\n    }\n}\n\nexport default new ReviewQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n/**\n * UrlRewrites Query\n * @class UrlRewritesQuery\n * @namespace Query/UrlRewrites/Query */\nexport class UrlRewritesQuery {\n    getQuery({ urlParam }) {\n        return new Field('urlResolver')\n            .addArgument('url', 'String!', urlParam)\n            .addFieldList(this._getUrlResolverFields());\n    }\n\n    _getUrlResolverFields() {\n        return [\n            'id',\n            'sku',\n            'type'\n        ];\n    }\n}\n\nexport default new UrlRewritesQuery();\n","/* eslint-disable spaced-comment */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { isSignedIn } from 'Util/Auth';\nimport { getCartId } from 'Util/Cart';\nimport { Field } from 'Util/Query';\n\n/** @namespace Query/Wishlist/Query */\nexport class WishlistQuery {\n    //#region MUTATION\n    addProductsToWishlist(wishlistId, wishlistItems) {\n        return new Field('addProductsToWishlist')\n            .addArgument('wishlistId', 'ID!', wishlistId)\n            .addArgument('wishlistItems', '[WishlistItemInput!]!', wishlistItems)\n            .addField(this._getWishlistErrorsField());\n    }\n\n    updateProductsInWishlist(wishlistId, wishlistItems) {\n        return new Field('updateProductsInWishlist')\n            .addArgument('wishlistId', 'ID!', wishlistId)\n            .addArgument('wishlistItems', '[WishlistItemUpdateInput!]!', wishlistItems)\n            .addField(this._getWishlistErrorsField());\n    }\n    //#endregion\n\n    //#region ERROR\n    _getWishlistErrorsFields() {\n        return [\n            'message',\n            'code'\n        ];\n    }\n\n    _getWishlistErrorsField() {\n        return new Field('user_errors')\n            .addFieldList(this._getWishlistErrorsFields());\n    }\n    //#endregion\n\n    getWishlistQuery(sharingCode) {\n        const field = new Field('s_wishlist')\n            .setAlias('wishlist')\n            .addFieldList(this._getWishlistFields());\n\n        if (sharingCode) {\n            field.addArgument('sharing_code', 'ID', sharingCode);\n        }\n\n        return field;\n    }\n\n    getShareWishlistMutation(input) {\n        return new Field('s_shareWishlist')\n            .setAlias('shareWishlist')\n            .addArgument('input', 'ShareWishlistInput!', input);\n    }\n\n    getClearWishlist() {\n        return new Field('s_clearWishlist')\n            .setAlias('clearWishlist');\n    }\n\n    getMoveWishlistToCart(sharingCode) {\n        const field = new Field('s_moveWishlistToCart')\n            .setAlias('moveWishlistToCart');\n\n        if (sharingCode) {\n            field.addArgument('sharingCode', 'ID', sharingCode);\n\n            if (!isSignedIn()) {\n                const cartId = getCartId();\n\n                field.addArgument('guestCartId', 'ID', cartId);\n            }\n        }\n\n        return field;\n    }\n\n    getRemoveProductFromWishlistMutation(item_id) {\n        return new Field('s_removeProductFromWishlist')\n            .setAlias('removeProductFromWishlist')\n            .addArgument('itemId', 'ID!', item_id);\n    }\n\n    _getWishlistFields() {\n        return [\n            'id',\n            'updated_at',\n            'items_count',\n            'creators_name',\n            this._getItemsField()\n        ];\n    }\n\n    _getItemOptionsFields() {\n        return [\n            'label',\n            'value'\n        ];\n    }\n\n    _getItemOptionsField() {\n        return new Field('options')\n            .addFieldList(this._getItemOptionsFields());\n    }\n\n    _getWishlistItemsFields() {\n        return [\n            'id',\n            'sku',\n            'qty',\n            'description',\n            'price',\n            'price_without_tax',\n            'buy_request',\n            this._getItemOptionsField()\n        ];\n    }\n\n    _getItemsFields() {\n        return [\n            ...this._getWishlistItemsFields(),\n            this._getProductField()\n        ];\n    }\n\n    _getProductField() {\n        return new Field('product')\n            .addFieldList(ProductListQuery._getProductInterfaceFields(false, false, true));\n    }\n\n    _getItemsField() {\n        return new Field('items')\n            .addFieldList(this._getItemsFields());\n    }\n}\n\nexport default new WishlistQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\n// eslint-disable-next-line import/prefer-default-export\nexport const CART_URL = '/cart';\n","/* eslint-disable import/prefer-default-export */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const LOADING_TIME = 500;\n\nexport const DISPLAY_MODE_PRODUCTS = 'PRODUCTS';\n\nexport const DISPLAY_MODE_CMS_BLOCK = 'PAGE';\n\nexport const DISPLAY_MODE_BOTH = 'PRODUCTS_AND_PAGE';\n\nexport const LAYOUT_KEY = 'layout';\nexport const GRID_LAYOUT = 'grid';\nexport const LIST_LAYOUT = 'list';\n\nexport const SORT_DIRECTION_TYPE = {\n    asc: 'ASC',\n    desc: 'DESC'\n};\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { appendWithStoreCode } from 'Util/Url';\n\nexport const SHIPPING_STEP = 'SHIPPING_STEP';\nexport const BILLING_STEP = 'BILLING_STEP';\nexport const DETAILS_STEP = 'DETAILS_STEP';\n\nexport const BILLING_URL_STEP = 'billing';\nexport const SHIPPING_URL_STEP = 'shipping';\nexport const DETAILS_URL_STEP = 'success';\n\nexport const CHECKOUT_URL = '/checkout';\nexport const BILLING_URL = '/checkout/billing';\nexport const SHIPPING_URL = '/checkout/shipping';\n\nexport const CHECKOUT_URL_REGEX = new RegExp(`^(${appendWithStoreCode('')})?${CHECKOUT_URL}(/)?$`);\n\nexport const PAYMENT_TOTALS = 'PAYMENT_TOTALS';\n\nexport const UPDATE_EMAIL_CHECK_FREQUENCY = 1500; // ms\n","/* eslint-disable import/prefer-default-export */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const ACCOUNT_INFORMATION_EDIT_URL = '/customer/account/edit';\nexport const ACCOUNT_FORGOT_PASSWORD_URL = '/customer/account/forgotpassword';\nexport const ACCOUNT_CONFIRMATION_URL = '/customer/account/confirmation';\nexport const ACCOUNT_REGISTRATION_URL = '/customer/account/create';\nexport const ACCOUNT_LOGIN_URL = '/customer/account/login';\nexport const ACCOUNT_URL = '/customer/account';\nexport const ACCOUNT_ORDER_URL = '/sales/order/view/order_id';\nexport const ACCOUNT_ORDER_PRINT_URL = '/sales/order/print/order_id';\nexport const ACCOUNT_ORDER_HISTORY = '/sales/order/history';\n// eslint-disable-next-line max-len\nexport const LOCKED_ACCOUNT_ERROR_MESSAGE = __('The account sign-in was incorrect or your account is disabled temporarily. Please wait and try again later.');\n","/* eslint-disable import/prefer-default-export */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const NONE_SORT_OPTION_VALUE = 'none';\nexport const BEST_MATCH_SORT_OPTION_VALUE = 'position';\n\nexport const NONE_SORT_OPTION = {\n    label: __('None'),\n    value: NONE_SORT_OPTION_VALUE\n};\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const ACCOUNT_CONFIRMATION_NOT_REQUIRED = 'account_confirmation_not_required';\nexport const CONFIRMATION_SENT = 'confirmation_sent';\nexport const WRONG_EMAIL = 'wrong_email';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const UPDATE_BREADCRUMBS = 'UPDATE_BREADCRUMBS';\nexport const TOGGLE_BREADCRUMBS = 'TOGGLE_BREADCRUMBS';\n\n/**\n * Update current breadcrumbs with new breadcrumbs (rewrite if already exists).\n * @param  {Array<Object>} breadcrumbs List of breadcrumbs\n * @return {void}\n * @namespace Store/Breadcrumbs/Action/updateBreadcrumbs\n */\nexport const updateBreadcrumbs = (breadcrumbs) => ({\n    type: UPDATE_BREADCRUMBS,\n    breadcrumbs\n});\n\n/**\n * Toggle breadcrumbs display/hide\n * @param  {Boolean} areBreadcrumbsVisible\n * @return {void}\n * @namespace Store/Breadcrumbs/Action/toggleBreadcrumbs\n */\nexport const toggleBreadcrumbs = (areBreadcrumbsVisible) => ({\n    type: TOGGLE_BREADCRUMBS,\n    areBreadcrumbsVisible\n});\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { toggleBreadcrumbs, updateBreadcrumbs } from 'Store/Breadcrumbs/Breadcrumbs.action';\n\n/**\n * Breadcrumbs Dispatcher\n * @class BreadcrumbsDispatcher\n * @namespace Store/Breadcrumbs/Dispatcher\n */\nexport class BreadcrumbsDispatcher {\n    /**\n     * Set breadcrumbs\n     * @param {Array<Object>} breadcrumbs Breadcrumbs array\n     * @param {Function} dispatch\n     * @memberof BreadcrumbsDispatcher\n     */\n    update(breadcrumbs, dispatch) {\n        dispatch(toggleBreadcrumbs(true));\n        dispatch(updateBreadcrumbs(breadcrumbs));\n    }\n\n    /**\n     * Set breadcrumbs for category\n     * @param {Array<Object>} category Category breadcumbs items\n     * @param {Function} dispatch\n     * @memberof BreadcrumbsDispatcher\n     */\n    updateWithCategory(category, dispatch) {\n        const breadcrumbs = this._getCategoryBreadcrumbs(category);\n\n        dispatch(toggleBreadcrumbs(true));\n        dispatch(updateBreadcrumbs(breadcrumbs));\n    }\n\n    /**\n     * Set breadcrumbs for category\n     * @param product\n     * @param prevCategoryId\n     * @param {Function} dispatch\n     * @memberof BreadcrumbsDispatcher\n     */\n    updateWithProduct(product, prevCategoryId, dispatch) {\n        const breadcrumbs = this._getProductBreadcrumbs(product, prevCategoryId);\n\n        dispatch(toggleBreadcrumbs(true));\n        dispatch(updateBreadcrumbs(breadcrumbs));\n    }\n\n    /**\n     * Set breadcrumbs for category\n     * @param {Array<Object>} category Category breadcumbs items\n     * @param {Function} dispatch\n     * @memberof BreadcrumbsDispatcher\n     */\n    updateWithCmsPage({ title }, dispatch) {\n        const breadcrumbs = title\n            ? [\n                {\n                    url: '',\n                    name: title\n                }\n            ]\n            : [];\n\n        dispatch(updateBreadcrumbs(breadcrumbs));\n    }\n\n    /**\n     * Get breadcrumbs for category\n     * @param {Object} category Category breadcumbs items\n     * @return {Array<Object>} Breadcrumbs array\n     * @memberof BreadcrumbsDispatcher\n     */\n    _getCategoryBreadcrumbs(category) {\n        const { url, name, breadcrumbs } = category;\n        const breadcrumbsList = [];\n\n        if (breadcrumbs) {\n            breadcrumbs\n                .sort((a, b) => a.category_level - b.category_level)\n                .forEach((crumb) => {\n                    const { category_url, category_name, category_is_active } = crumb;\n\n                    // do not add link to inactive categories\n                    if (category_is_active) {\n                        breadcrumbsList.push({\n                            name: category_name,\n                            url: {\n                                pathname: category_url,\n                                state: { category: true }\n                            }\n                        });\n                    } else {\n                        breadcrumbsList.push({\n                            url: '',\n                            name: category_name\n                        });\n                    }\n                });\n        }\n\n        return [\n            { url, name },\n            ...breadcrumbsList.reverse()\n        ];\n    }\n\n    findCategoryById(categories, categoryId) {\n        return categories.find(({ id }) => id === categoryId);\n    }\n\n    findLongestBreadcrumbs(categories) {\n        const { breadcrumbsCategory = {} } = categories.reduce((acc, category) => {\n            const { longestBreadcrumbsLength } = acc;\n            const { breadcrumbs } = category;\n            const breadcrumbsLength = (breadcrumbs || []).length;\n\n            if (!breadcrumbsLength && longestBreadcrumbsLength !== 0) {\n                return acc;\n            }\n\n            if (longestBreadcrumbsLength === 0) {\n                return { ...acc, breadcrumbsCategory: category };\n            }\n\n            if (breadcrumbsLength <= longestBreadcrumbsLength) {\n                return acc;\n            }\n\n            return {\n                breadcrumbsCategory: category,\n                longestBreadcrumbsLength: breadcrumbsLength\n            };\n        }, {\n            breadcrumbsCategory: {},\n            longestBreadcrumbsLength: 0\n        });\n\n        return breadcrumbsCategory;\n    }\n\n    /**\n     * Get breadcrumbs for product\n     *\n     * @param {Object} product Product breadcumbs items\n     * @param prevCategoryId\n     * @return {Array<Object>} Breadcrumbs array\n     * @memberof BreadcrumbsDispatcher\n     */\n    _getProductBreadcrumbs(product, prevCategoryId = null) {\n        const { categories, url, name } = product;\n\n        if (!categories) {\n            return [];\n        }\n\n        if (!categories.length) {\n            return [{ url, name }];\n        }\n\n        return [\n            { url, name },\n            ...this._getCategoryBreadcrumbs(\n                this.findCategoryById(categories, prevCategoryId)\n                || this.findLongestBreadcrumbs(categories)\n            )\n        ];\n    }\n}\n\nexport default new BreadcrumbsDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport CartQuery from 'Query/Cart.query';\nimport { updateIsLoadingCart, updateTotals } from 'Store/Cart/Cart.action';\nimport { updateEmail, updateShippingFields } from 'Store/Checkout/Checkout.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { getRegionIdOfRegionName } from 'Util/Address';\nimport { getAuthorizationToken, isSignedIn } from 'Util/Auth';\nimport { getCartId, setCartId } from 'Util/Cart';\nimport { fetchMutation, fetchQuery, getErrorMessage } from 'Util/Request';\n\nexport const CURRENT_WEBSITE = 'base';\n\nexport const LinkedProductsDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/LinkedProducts/LinkedProducts.dispatcher'\n);\n\n/**\n * Product Cart Dispatcher\n * @class CartDispatcher\n * @namespace Store/Cart/Dispatcher\n */\nexport class CartDispatcher {\n    async updateInitialCartData(dispatch, isForCustomer = false, disableLoader = false) {\n        // Need to get current cart from BE, update cart\n        try {\n            // ! Get quote token first (local or from the backend) just to make sure it exists\n\n            if (!disableLoader) {\n                dispatch(updateIsLoadingCart(true));\n            }\n            // ! Get quote token first (local or from the backend) just to make sure it exists\n            const quoteId = await this._getCartId(dispatch);\n            const {\n                cartData = {},\n                cartData: {\n                    is_virtual = false,\n                    shipping_address: {\n                        selected_shipping_method: {\n                            address,\n                            address: {\n                                street = null,\n                                email = ''\n                            } = {}\n                        } = {},\n                        method_code\n                    } = {}\n                } = {}\n            } = await fetchQuery(\n                CartQuery.getCartQuery(\n                    quoteId\n                )\n            );\n\n            if (address && street) {\n                if (!is_virtual) {\n                    await dispatch(\n                        updateShippingFields({\n                            ...this.prepareCheckoutAddressFormat(address),\n                            method_code\n                        })\n                    );\n                }\n\n                await dispatch(updateEmail(email));\n            }\n\n            if (isForCustomer && !getAuthorizationToken()) {\n                dispatch(updateIsLoadingCart(false));\n\n                return null;\n            }\n\n            await this._updateCartData(cartData, dispatch);\n\n            if (!disableLoader) {\n                dispatch(updateIsLoadingCart(false));\n            }\n\n            return null;\n        } catch (error) {\n            dispatch(updateIsLoadingCart(false));\n\n            return this.createGuestEmptyCart(dispatch);\n        }\n    }\n\n    prepareCheckoutAddressFormat(address) {\n        const {\n            street: addressStreet = '',\n            email,\n            country_id,\n            region,\n            region_id,\n            ...data\n        } = address;\n\n        const street = addressStreet.split('\\n');\n\n        const street_index = {};\n\n        street.forEach((item, index) => {\n            street_index[`street_${index}`] = item;\n        });\n\n        return {\n            ...data,\n            country_id,\n            region,\n            region_id: getRegionIdOfRegionName(country_id, region),\n            street,\n            ...street_index\n        };\n    }\n\n    async createGuestEmptyCart(dispatch) {\n        try {\n            dispatch(updateIsLoadingCart(true));\n\n            const quoteId = await this._getNewQuoteId(dispatch);\n\n            setCartId(quoteId);\n\n            return quoteId;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return null;\n        }\n    }\n\n    async mergeCarts(sourceCartId, destinationCartId, dispatch) {\n        try {\n            const {\n                mergeCarts: {\n                    id = ''\n                } = {}\n            } = await fetchMutation(\n                CartQuery.getMergeCartQuery(sourceCartId, destinationCartId)\n            );\n\n            return id;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return null;\n        }\n    }\n\n    resetGuestCart(dispatch) {\n        return this._updateCartData({}, dispatch);\n    }\n\n    async changeItemQty(dispatch, options) {\n        const { uid, quantity = 1, cartId: originalCartId } = options;\n\n        const cartId = !originalCartId ? getCartId() : originalCartId;\n\n        try {\n            if (!cartId) {\n                return Promise.reject();\n            }\n\n            await fetchMutation(\n                CartQuery.getUpdateCartItemsMutation({\n                    cart_id: cartId,\n                    cart_items: [\n                        {\n                            cart_item_uid: uid,\n                            quantity\n                        }\n                    ]\n                })\n            );\n\n            return this.updateInitialCartData(dispatch);\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return Promise.reject();\n        }\n    }\n\n    async addProductToCart(dispatch, options = {}) {\n        const { products = [], cartId: userCartId } = options;\n\n        const cartId = userCartId || getCartId();\n\n        if (!Array.isArray(products) || products.length === 0) {\n            dispatch(showNotification('error', __('No product data!')));\n\n            return Promise.reject();\n        }\n\n        try {\n            if (!cartId) {\n                return Promise.reject();\n            }\n\n            const { addProductsToCart: { user_errors: errors = [] } = {} } = await fetchMutation(\n                CartQuery.getAddProductToCartMutation(cartId, products)\n            );\n\n            if (Array.isArray(errors) && errors.length > 0) {\n                errors.forEach((error) => {\n                    dispatch(showNotification('error', getErrorMessage(error)));\n                });\n\n                return Promise.reject();\n            }\n\n            await this.updateInitialCartData(dispatch);\n            dispatch(showNotification('success', __('Product was added to cart!')));\n        } catch (error) {\n            if (!navigator.onLine) {\n                dispatch(showNotification('error', __('Not possible to fetch while offline')));\n\n                return Promise.reject();\n            }\n\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return Promise.reject();\n        }\n\n        return Promise.resolve();\n    }\n\n    async removeProductFromCart(dispatch, item_id) {\n        try {\n            const isCustomerSignedIn = isSignedIn();\n            const cartId = getCartId();\n\n            if (!isCustomerSignedIn && !cartId) {\n                return null;\n            }\n\n            const { removeItemFromCart: { cartData = {} } = {} } = await fetchMutation(\n                CartQuery.getRemoveCartItemMutation(item_id, cartId)\n            );\n\n            this._updateCartData(cartData, dispatch);\n\n            return cartData;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return null;\n        }\n    }\n\n    async applyCouponToCart(dispatch, couponCode) {\n        try {\n            const isCustomerSignedIn = isSignedIn();\n            const cartId = getCartId();\n\n            if (!isCustomerSignedIn && !cartId) {\n                return false;\n            }\n\n            const { applyCouponToCart: { cartData = {} } = {} } = await fetchMutation(\n                CartQuery.getApplyCouponMutation(couponCode, cartId)\n            );\n\n            this._updateCartData(cartData, dispatch);\n            dispatch(showNotification('success', __('Coupon was applied!')));\n\n            return true;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return false;\n        }\n    }\n\n    async removeCouponFromCart(dispatch) {\n        try {\n            const isCustomerSignedIn = isSignedIn();\n            const cartId = getCartId();\n\n            if (!isCustomerSignedIn && !cartId) {\n                return;\n            }\n\n            const { removeCouponFromCart: { cartData = {} } = {} } = await fetchMutation(\n                CartQuery.getRemoveCouponMutation(cartId)\n            );\n\n            this._updateCartData(cartData, dispatch);\n            dispatch(showNotification('success', __('Coupon was removed!')));\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n        }\n    }\n\n    updateCrossSellProducts(items, dispatch) {\n        if (items && items.length) {\n            const product_links = items.reduce((links, product) => {\n                const { product: { product_links, variants = [] }, sku: variantSku } = product;\n\n                const { product_links: childProductLinks } = variants.find(({ sku }) => sku === variantSku) || {};\n\n                if (childProductLinks) {\n                    Object.values(childProductLinks).filter(({ link_type }) => link_type === 'crosssell')\n                        .map((item) => links.push(item));\n                }\n\n                if (product_links) {\n                    Object.values(product_links).filter(({ link_type }) => link_type === 'crosssell')\n                        .map((item) => links.push(item));\n                }\n\n                return links;\n            }, []);\n\n            if (product_links.length !== 0) {\n                LinkedProductsDispatcher.then(\n                    ({ default: dispatcher }) => dispatcher.fetchCrossSellProducts(dispatch, product_links)\n                );\n            } else {\n                LinkedProductsDispatcher.then(\n                    ({ default: dispatcher }) => dispatcher.clearCrossSellProducts(dispatch)\n                );\n            }\n        } else {\n            LinkedProductsDispatcher.then(\n                ({ default: dispatcher }) => dispatcher.clearCrossSellProducts(dispatch)\n            );\n        }\n    }\n\n    _updateCartData(cartData, dispatch) {\n        dispatch(updateTotals(cartData));\n    }\n\n    /**\n     * @param {*} attribute\n     * @param {*} product\n     */\n    _getProductAttribute(attribute, product) {\n        const { variants, configurableVariantIndex, [attribute]: attributeValue } = product;\n\n        return configurableVariantIndex >= 0\n            ? variants[configurableVariantIndex][attribute]\n            : attributeValue;\n    }\n\n    /**\n     * Check if it is allowed to add product to cart\n     * @param {Object} options Cart options\n     * @return {Boolean} Indicates is allowed or not\n     * @memberof CartDispatcher\n     */\n    _canBeAdded(options) {\n        if (options.product && options.quantity && (options.product.quantity + options.quantity) < 1) {\n            return false;\n        }\n\n        if (options.quantity === 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Get quote id. If quote id is missing, fetch it from the BE.\n     * @param Dispatch dispatch\n     * @return string quote id\n     */\n    _getCartId(dispatch) {\n        const cartId = getCartId();\n\n        if (cartId) {\n            return cartId;\n        }\n\n        return this.createGuestEmptyCart(dispatch);\n    }\n\n    async _getNewQuoteId() {\n        const { createEmptyCart: quoteId = '' } = await fetchMutation(\n            CartQuery.getCreateEmptyCartMutation()\n        );\n\n        return quoteId;\n    }\n}\n\nexport default new CartDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const UPDATE_CURRENT_CATEGORY = 'UPDATE_CURRENT_CATEGORY';\n\n/**\n * Update Current Category\n * @param {String} categoryUrlPath url path Main Category object\n * @return {void}\n * @namespace Store/Category/Action/updateCurrentCategory\n */\nexport const updateCurrentCategory = (category) => ({\n    type: UPDATE_CURRENT_CATEGORY,\n    category\n});\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport CategoryQuery from 'Query/Category.query';\nimport { updateCurrentCategory } from 'Store/Category/Category.action';\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { QueryDispatcher } from 'Util/Request';\n\n/**\n * Category Dispatcher\n * @class CategoryDispatcher\n * @extends QueryDispatcher\n * @namespace Store/Category/Dispatcher\n */\nexport class CategoryDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('Category');\n    }\n\n    onSuccess(data, dispatch, { isSearchPage }) {\n        const { category = {}, category: { id } } = data;\n\n        if (!id && !isSearchPage) {\n            dispatch(updateNoMatch(true));\n        }\n\n        dispatch(updateCurrentCategory(category));\n    }\n\n    onError(error, dispatch, { isSearchPage }) {\n        if (!isSearchPage) {\n            dispatch(updateNoMatch(true));\n            dispatch(showNotification('error', __('Error fetching Category!'), error));\n        } else {\n            dispatch(updateCurrentCategory({ id: 'all-products' }));\n        }\n    }\n\n    prepareRequest(options) {\n        return CategoryQuery.getQuery(options);\n    }\n}\n\nexport default new CategoryDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport CheckEmailQuery from 'Query/CheckEmail.query';\nimport { QueryDispatcher } from 'Util/Request';\n\nimport { updateEmailAvailable } from './Checkout.action';\n\n/**\n * Checkout Dispatcher\n * @class CheckoutDispatcher\n * @extends QueryDispatcher\n * @namespace Store/Checkout/Dispatcher\n */\nexport class CheckoutDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('Checkout');\n    }\n\n    onSuccess(data, dispatch) {\n        const { isEmailAvailable: { is_email_available } } = data;\n\n        dispatch(updateEmailAvailable(is_email_available));\n    }\n\n    onError(error, dispatch) {\n        dispatch(updateEmailAvailable(true));\n\n        return error;\n    }\n\n    prepareRequest(email) {\n        return CheckEmailQuery.getIsEmailAvailableQuery(email);\n    }\n}\n\nexport default new CheckoutDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport CartQuery from 'Query/Cart.query';\nimport ConfigQuery from 'Query/Config.query';\nimport RegionQuery from 'Query/Region.query';\nimport ReviewQuery from 'Query/Review.query';\nimport { updateConfig, updateCurrentCurrency } from 'Store/Config/Config.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { returnFilteredCurrencies, setCurrency } from 'Util/Currency';\nimport { fetchMutation, QueryDispatcher } from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\n/** @namespace Store/Config/Dispatcher */\nexport class ConfigDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('Config');\n    }\n\n    static updateCurrency(dispatch, options) {\n        const { currencyCode } = options;\n\n        return fetchMutation(ConfigQuery.getSaveSelectedCurrencyMutation(\n            currencyCode\n        )).then(\n            /** @namespace Store/Config/Dispatcher/ConfigDispatcher/updateCurrency/fetchMutation/then */\n            async (currencyCode) => {\n                setCurrency(currencyCode);\n                await dispatch(updateCurrentCurrency(currencyCode));\n\n                CartDispatcher.then(\n                    ({ default: dispatcher }) => dispatcher.updateInitialCartData(dispatch, true)\n                );\n            }\n        );\n    }\n\n    onSuccess(data, dispatch) {\n        if (data) {\n            const { currencyData, currency } = data;\n            const filteredData = { ...data, ...returnFilteredCurrencies(currencyData, currency) };\n\n            BrowserDatabase.setItem(filteredData, 'config', ONE_MONTH_IN_SECONDS);\n            dispatch(updateConfig(filteredData));\n        }\n    }\n\n    onError(error, dispatch) {\n        dispatch(showNotification('error', __('Error fetching Config!'), error));\n    }\n\n    prepareRequest() {\n        return [\n            RegionQuery.getCountriesQuery(),\n            ReviewQuery.getRatingQuery(),\n            ConfigQuery.getQuery(),\n            ConfigQuery.getCheckoutAgreements(),\n            ConfigQuery.getCurrencyData(),\n            ConfigQuery.getCurrencyRates(),\n            CartQuery.getCartDisplayConfig()\n        ];\n    }\n}\n\nexport default new ConfigDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ContactFormQuery from 'Query/ContactForm.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { fetchMutation, getErrorMessage } from 'Util/Request';\n\nimport { updateContactForm } from './ContactForm.action';\n\n/**\n * ContactForm Dispatcher\n * @class ContactFormDispatcher\n * @extends QueryDispatcher\n * @namespace Store/ContactForm/Dispatcher\n */\nexport class ContactFormDispatcher {\n    prepareRequest(options, dispatch) {\n        const { form = {}, fields = {} } = options;\n\n        const mutation = ContactFormQuery.getSendContactFormMutation(fields);\n\n        dispatch(updateContactForm({\n            isLoading: true\n        }));\n\n        return fetchMutation(mutation)\n            .then(\n                /** @namespace Store/ContactForm/Dispatcher/ContactFormDispatcher/prepareRequest/fetchMutation/then */\n                (data) => {\n                    dispatch(showNotification('success', data.contactForm.message));\n                    dispatch(updateContactForm({\n                        isLoading: false\n                    }));\n\n                    // Clears form\n                    if (typeof form.reset === 'function') {\n                        form.reset();\n                    }\n                },\n                /** @namespace Store/ContactForm/Dispatcher/ContactFormDispatcher/prepareRequest/fetchMutation/then/catch */\n                (error) => {\n                    dispatch(showNotification('error', getErrorMessage(error)));\n                    dispatch(updateContactForm({\n                        isLoading: false\n                    }));\n                }\n            );\n    }\n}\n\nexport default new ContactFormDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const UPDATE_LINKED_PRODUCTS = 'UPDATE_LINKED_PRODUCTS';\n/**\n * Update upsell products list (rewrite if already exists).\n * @param  {Array<String>} upsell List of products returned from fetch\n * @return {void}\n * @namespace Store/LinkedProducts/Action/updateLinkedProducts\n */\nexport const updateLinkedProducts = (linkedProducts) => ({\n    type: UPDATE_LINKED_PRODUCTS,\n    linkedProducts\n});\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { updateLinkedProducts } from 'Store/LinkedProducts/LinkedProducts.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { getIndexedProduct } from 'Util/Product';\nimport { fetchQuery, QueryDispatcher } from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\n\nexport const LINKED_PRODUCTS = 'LINKED_PRODUCTS';\n\n/**\n * Linked Prodcts List Dispatcher\n * @class LinkedProductsDispatcher\n * @extends QueryDispatcher\n * @namespace Store/LinkedProducts/Dispatcher\n */\nexport class LinkedProductsDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('LinkedProducts', ONE_MONTH_IN_SECONDS);\n    }\n\n    onSuccess(data, dispatch, product_links) {\n        const linkedProducts = this._processResponse(data, product_links);\n\n        BrowserDatabase.setItem(linkedProducts, LINKED_PRODUCTS);\n        dispatch(updateLinkedProducts(linkedProducts));\n    }\n\n    onError(error, dispatch) {\n        dispatch(showNotification('error', __('Error fetching LinkedProducts!'), error));\n    }\n\n    /**\n     * Prepare LinkedProducts query\n     * @return {Query} ProductList query\n     * @memberof LinkedProductsDispatcher\n     * @param product_links\n     */\n    prepareRequest(product_links) {\n        const relatedSKUs = product_links.reduce((links, link) => {\n            const { linked_product_sku } = link;\n\n            return [...links, linked_product_sku];\n        }, []);\n\n        return [\n            ProductListQuery.getQuery({\n                args: {\n                    filter: {\n                        productsSkuArray: relatedSKUs\n                    }\n                },\n                notRequireInfo: true\n            })\n        ];\n    }\n\n    /**\n     * Clear linked products list\n     * @param {{productsSkuArray: Array<String>}} options A object containing different aspects of query, each item can be omitted\n     * @return {Query} ProductList query\n     * @memberof LinkedProductsDispatcher\n     */\n    clearLinkedProducts(dispatch, updateCrossSell = false) {\n        const linkedProducts = {\n            upsell: { total_count: 0, items: [] },\n            related: { total_count: 0, items: [] },\n            crosssell: { total_count: 0, items: [] }\n        };\n\n        BrowserDatabase.setItem(linkedProducts, LINKED_PRODUCTS);\n\n        dispatch(updateLinkedProducts({\n            ...linkedProducts,\n            updateCrossSell\n        }));\n    }\n\n    async fetchCrossSellProducts(dispatch, product_links) {\n        const query = this.prepareRequest(product_links);\n        const data = await fetchQuery(query);\n        const { crosssell } = this._processResponse(data, product_links);\n        const linkedProducts = BrowserDatabase.getItem(LINKED_PRODUCTS) || {};\n\n        Object.assign(linkedProducts, {\n            crosssell,\n            updateCrossSell: true\n        });\n\n        dispatch(updateLinkedProducts(linkedProducts));\n    }\n\n    clearCrossSellProducts(dispatch) {\n        const linkedProducts = BrowserDatabase.getItem(LINKED_PRODUCTS) || {};\n\n        Object.assign(linkedProducts, {\n            crosssell: { total_count: 0, items: [] },\n            updateCrossSell: true\n        });\n\n        dispatch(updateLinkedProducts(linkedProducts));\n    }\n\n    _processResponse(data, product_links) {\n        const { products: { items } } = data;\n\n        const indexedBySku = items.reduce((acc, item) => {\n            const { sku } = item;\n\n            acc[sku] = getIndexedProduct(item);\n\n            return acc;\n        }, {});\n\n        const linkedProducts = product_links.reduce((acc, link) => {\n            const { linked_product_sku, link_type } = link;\n\n            if (indexedBySku[linked_product_sku] && acc[link_type]) {\n                acc[link_type].items.push(\n                    indexedBySku[linked_product_sku]\n                );\n\n                acc[link_type].total_count++;\n            }\n\n            return acc;\n        }, {\n            upsell: { total_count: 0, items: [] },\n            related: { total_count: 0, items: [] },\n            crosssell: { total_count: 0, items: [] },\n            associated: { total_count: 0, items: [] }\n        });\n\n        return linkedProducts;\n    }\n}\n\nexport default new LinkedProductsDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\nimport { updateMeta } from 'Store/Meta/Meta.action';\nimport { appendWithStoreCode } from 'Util/Url';\n\n/**\n * Meta Dispatcher\n * @class MetaDispatcher\n * @namespace Store/Meta/Dispatcher */\nexport class MetaDispatcher {\n    /**\n     * Set meta for category\n     * @param {Object} category\n     * @param {Function} dispatch\n     * @memberof MetaDispatcher\n     */\n    updateWithCategory(category, dispatch) {\n        const meta = this._getCategoryMeta(category);\n\n        dispatch(updateMeta(meta));\n    }\n\n    /**\n     * Set meta for product\n     * @param {Object} product\n     * @param {Function} dispatch\n     * @memberof MetaDispatcher\n     */\n    updateWithProduct(product, dispatch) {\n        const meta = this._getProductMeta(product);\n\n        dispatch(updateMeta(meta));\n    }\n\n    /**\n     * Get meta for product\n     * @param {Object} product\n     * @return {Object} Meta object\n     * @memberof MetaDispatcher\n     */\n    _getProductMeta(product) {\n        const {\n            name,\n            meta_title,\n            meta_keyword,\n            canonical_url,\n            meta_description\n        } = product;\n\n        return {\n            description: meta_description,\n            keywords: meta_keyword,\n            title: meta_title || name,\n            canonical_url: `${window.location.origin}${appendWithStoreCode(canonical_url)}`\n        };\n    }\n\n    /**\n     * Get meta for category\n     * @param {Object} category\n     * @return {Object} Meta object\n     * @memberof MetaDispatcher\n     */\n    _getCategoryMeta(category) {\n        const {\n            description, name, canonical_url,\n            meta_title, meta_keywords, meta_description,\n            meta_robots = 'follow, index'\n        } = category;\n\n        return {\n            description: meta_description || description,\n            title: meta_title || name,\n            keywords: meta_keywords,\n            canonical_url: `${window.location.origin}${appendWithStoreCode(canonical_url)}`,\n            robots: meta_robots\n        };\n    }\n}\n\nexport default new MetaDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { CHECKOUT, MY_ACCOUNT } from 'Component/Header/Header.config';\nimport { CONFIRMATION_REQUIRED } from 'Component/MyAccountCreateAccount/MyAccountCreateAccount.config';\nimport { ORDER_ID } from 'Component/MyAccountOrder/MyAccountOrder.config';\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport {\n    ACCOUNT_CONFIRMATION_URL,\n    ACCOUNT_LOGIN_URL\n} from 'Route/MyAccount/MyAccount.config';\nimport {\n    ACCOUNT_CONFIRMATION_NOT_REQUIRED,\n    CONFIRMATION_SENT,\n    WRONG_EMAIL\n} from 'Route/SendConfirmationPage/SendConfirmationPage.config';\nimport {\n    updateCustomerDetails,\n    updateCustomerPasswordForgotStatus,\n    updateCustomerPasswordResetStatus,\n    updateCustomerSignInStatus,\n    updateIsLoading,\n    updateIsLocked\n} from 'Store/MyAccount/MyAccount.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { hideActiveOverlay } from 'Store/Overlay/Overlay.action';\nimport { clearComparedProducts } from 'Store/ProductCompare/ProductCompare.action';\nimport {\n    deleteAuthorizationToken,\n    getAuthorizationToken,\n    GRAPHQL_AUTH,\n    isSignedIn,\n    setAuthorizationToken\n} from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { deleteCartId, getCartId, setCartId } from 'Util/Cart';\nimport { removeUid } from 'Util/Compare';\nimport history from 'Util/History';\nimport { prepareQuery } from 'Util/Query';\nimport { executePost, fetchMutation, getErrorMessage } from 'Util/Request';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\nexport const WishlistDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Wishlist/Wishlist.dispatcher'\n);\n\nexport const ProductCompareDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/ProductCompare/ProductCompare.dispatcher'\n);\n\nexport const CUSTOMER = 'customer';\n\nexport const ONE_MONTH_IN_SECONDS = 2628000;\n\n/**\n * My account actions\n * @class MyAccount\n * @namespace Store/MyAccount/Dispatcher\n */\nexport class MyAccountDispatcher {\n    forceLogoutRedirectPages = [\n        CHECKOUT,\n        MY_ACCOUNT\n    ];\n\n    requestCustomerData(dispatch) {\n        const query = MyAccountQuery.getCustomerQuery();\n\n        return executePost(prepareQuery([query])).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/requestCustomerData/executePost/then */\n            ({ customer }) => {\n                if (!getAuthorizationToken()) {\n                    return;\n                }\n\n                dispatch(updateIsLocked(false));\n                dispatch(updateCustomerDetails(customer));\n                BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n            },\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/requestCustomerData/executePost/then/catch */\n            (error) => {\n                const { extensions: { category } } = error[0];\n\n                if (category === GRAPHQL_AUTH) {\n                    dispatch(updateIsLocked(true));\n                }\n                dispatch(showNotification('error', getErrorMessage(error)));\n            }\n        );\n    }\n\n    logout(authTokenExpired = false, isWithNotification = true, dispatch) {\n        if (authTokenExpired) {\n            if (isWithNotification) {\n                dispatch(showNotification('error', __('Your session is over, you are logged out!')));\n            }\n\n            this.handleForceRedirectToLoginPage();\n        } else {\n            if (isSignedIn()) {\n                fetchMutation(MyAccountQuery.getRevokeAccountToken());\n                deleteAuthorizationToken();\n            }\n\n            if (isWithNotification) {\n                dispatch(showNotification('success', __('You are successfully logged out!')));\n            }\n        }\n\n        deleteCartId();\n        BrowserDatabase.deleteItem(CUSTOMER);\n        removeUid();\n\n        dispatch(updateCustomerSignInStatus(false));\n        dispatch(updateCustomerDetails({}));\n\n        // After logout cart, wishlist and compared product list is always empty.\n        // There is no need to fetch it from the backend.\n        CartDispatcher.then(\n            ({ default: dispatcher }) => {\n                dispatcher.resetGuestCart(dispatch);\n                dispatcher.createGuestEmptyCart(dispatch);\n            }\n        );\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetWishlist(dispatch)\n        );\n\n        dispatch(clearComparedProducts());\n        dispatch(updateCustomerDetails({}));\n    }\n\n    /**\n     * Forgot password action\n     * @param {{email: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    forgotPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getForgotPasswordMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/forgotPassword/fetchMutation/then/dispatch */\n            () => dispatch(updateCustomerPasswordForgotStatus()),\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/forgotPassword/fetchMutation/then/dispatch/catch */\n            (error) => dispatch(showNotification('error', getErrorMessage(error)))\n        );\n    }\n\n    /**\n     * Reset password action\n     * @param {{customer_id: String, token: String, password: String, password_confirmation: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    resetPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getResetPasswordMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/resetPassword/fetchMutation/then/dispatch */\n            ({ s_resetPassword: { status } }) => dispatch(updateCustomerPasswordResetStatus(status)),\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/resetPassword/fetchMutation/then/dispatch/catch */\n            (errors) => dispatch(updateCustomerPasswordResetStatus('error', getErrorMessage(errors)))\n        );\n    }\n\n    /**\n     * Create account action\n     * @param {{customer: Object, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    createAccount(options = {}, dispatch) {\n        const { customer: { email }, password } = options;\n        const mutation = MyAccountQuery.getCreateAccountMutation(options);\n\n        dispatch(updateIsLoading(true));\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/createAccount/fetchMutation/then */\n            (data) => {\n                const { createCustomer: { customer } } = data;\n                const { confirmation_required } = customer;\n\n                sessionStorage.setItem(ORDER_ID, '');\n\n                if (confirmation_required) {\n                    dispatch(updateIsLoading(false));\n\n                    return CONFIRMATION_REQUIRED;\n                }\n\n                return this.signIn({ email, password }, dispatch);\n            },\n\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/createAccount/fetchMutation/then/catch */\n            (error) => {\n                dispatch(updateIsLoading(false));\n                dispatch(showNotification('error', getErrorMessage(error)));\n\n                return false;\n            }\n        );\n    }\n\n    /**\n     * Resend confirmation email\n     * @param {{email: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    async resendConfirmation(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getResendConfirmationMutation(options);\n\n        try {\n            const { resendConfirmationEmail: { status = '' } } = await fetchMutation(mutation);\n\n            switch (status) {\n            case ACCOUNT_CONFIRMATION_NOT_REQUIRED:\n                dispatch(showNotification('success', __('This email does not require confirmation.')));\n                history.push(ACCOUNT_LOGIN_URL);\n\n                return false;\n            case CONFIRMATION_SENT:\n                dispatch(showNotification('success', __('Please check your email for confirmation key.')));\n\n                return true;\n            case WRONG_EMAIL:\n                const { email = '' } = options;\n\n                history.push(`${ ACCOUNT_CONFIRMATION_URL }/?email=${ email }`);\n\n                throw __('Wrong email! Please, try again!');\n            default:\n                throw __('Something went wrong! Please, try again!');\n            }\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    /**\n     * Confirm account action\n     * @param {{key: String, email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    confirmAccount(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getConfirmAccountMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/confirmAccount/fetchMutation/then/dispatch */\n            () => dispatch(showNotification('success', __('Your account is confirmed!'))),\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/confirmAccount/fetchMutation/then/dispatch/catch */\n            (error) => dispatch(\n                showNotification(\n                    'error',\n                    getErrorMessage(error, __('Something went wrong! Please, try again!'))\n                )\n            )\n        );\n    }\n\n    /**\n     * Sign in action\n     * @param {{email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    async signIn(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getSignInMutation(options);\n\n        const result = await fetchMutation(mutation);\n        const { generateCustomerToken: { token } } = result;\n\n        setAuthorizationToken(token);\n\n        ProductCompareDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.assignCompareList(dispatch)\n        );\n\n        const cartDispatcher = (await CartDispatcher).default;\n        const guestCartToken = getCartId();\n        // if customer is authorized, `createEmptyCart` mutation returns customer cart token\n        const customerCartToken = await cartDispatcher.createGuestEmptyCart(dispatch);\n\n        if (guestCartToken && guestCartToken !== customerCartToken) {\n            // merge guest cart id and customer cart id using magento capabilities\n            await cartDispatcher.mergeCarts(guestCartToken, customerCartToken, dispatch);\n        }\n\n        setCartId(customerCartToken);\n        cartDispatcher.updateInitialCartData(dispatch, true);\n\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.updateInitialWishlistData(dispatch)\n        );\n\n        await this.requestCustomerData(dispatch);\n\n        dispatch(updateCustomerSignInStatus(true));\n        dispatch(updateIsLoading(false));\n        dispatch(hideActiveOverlay());\n        dispatch(showNotification('success', __('You are successfully logged in!')));\n\n        return true;\n    }\n\n    handleForceRedirectToLoginPage() {\n        const { location: { pathname = '' } = {} } = history;\n        const doRedirect = this.forceLogoutRedirectPages.reduce((result, urlPart) => {\n            if (pathname.includes(urlPart)) {\n                return true;\n            }\n\n            return result;\n        }, false);\n\n        if (doRedirect) {\n            history.push({ pathname: ACCOUNT_LOGIN_URL });\n        }\n    }\n\n    handleCustomerDataOnInit(dispatch) {\n        if (isSignedIn()) {\n            return;\n        }\n\n        BrowserDatabase.deleteItem(CUSTOMER);\n        CartDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetGuestCart(dispatch)\n        );\n    }\n}\n\nexport default new MyAccountDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport NewsletterSubscriptionQuery from 'Query/NewsletterSubscription.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { fetchMutation, getErrorMessage } from 'Util/Request';\n\nexport const NOT_ACTIVE = 'NOT_ACTIVE';\n\n/**\n * Product Cart Dispatcher\n * @class NewsletterSubscriptionDispatcher\n * @namespace Store/NewsletterSubscription/Dispatcher\n */\nexport class NewsletterSubscriptionDispatcher {\n    subscribeToNewsletter(dispatch, email) {\n        return fetchMutation(NewsletterSubscriptionQuery.getSubscribeToNewsletterMutation(email)).then(\n            /** @namespace Store/NewsletterSubscription/Dispatcher/NewsletterSubscriptionDispatcher/subscribeToNewsletter/fetchMutation/then */\n            ({ subscribeEmailToNewsletter: { status } }) => {\n                // `NOT_ACTIVE` response status corresponds to `newsletter_subscription_confirm` magento setting\n                const message = status === NOT_ACTIVE\n                    ? __('Confirmation request has been sent.')\n                    : __('Thank you for your subscription.');\n\n                return dispatch(showNotification('success', message));\n            },\n            /** @namespace Store/NewsletterSubscription/Dispatcher/NewsletterSubscriptionDispatcher/subscribeToNewsletter/fetchMutation/then/dispatch/catch */\n            (error) => dispatch(showNotification('error', getErrorMessage(error)))\n        );\n    }\n}\n\nexport default new NewsletterSubscriptionDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\n/**\n * NoMatch Dispatcher\n * @class NoMatchDispatcher\n * @namespace Store/NoMatch/Dispatcher\n */\nexport class NoMatchDispatcher {\n    updateNoMatch(dispatch, options) {\n        const { noMatch } = options;\n\n        dispatch(updateNoMatch(noMatch));\n    }\n}\n\nexport default new NoMatchDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const GET_ORDER_LIST = 'GET_ORDER_LIST';\nexport const SET_ORDER_LOADING_STATUS = 'SET_ORDER_LOADING_STATUS';\n\n/** @namespace Store/Order/Action/getOrderList */\nexport const getOrderList = (orderList, status) => ({\n    type: GET_ORDER_LIST,\n    orderList,\n    status\n});\n\n/** @namespace Store/Order/Action/setLoadingStatus */\nexport const setLoadingStatus = (status) => ({\n    type: SET_ORDER_LOADING_STATUS,\n    status\n});\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport OrderQuery from 'Query/Order.query';\nimport { CART_URL } from 'Route/CartPage/CartPage.config';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { getOrderList, setLoadingStatus } from 'Store/Order/Order.action';\nimport { getAuthorizationToken } from 'Util/Auth';\nimport history from 'Util/History';\nimport { fetchMutation, fetchQuery, getErrorMessage } from 'Util/Request';\nimport { appendWithStoreCode } from 'Util/Url';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\n/** @namespace Store/Order/Dispatcher */\nexport class OrderDispatcher {\n    requestOrders(dispatch, page = 1) {\n        const query = OrderQuery.getOrderListQuery({ page });\n\n        dispatch(setLoadingStatus(true));\n\n        return fetchQuery(query).then(\n            /** @namespace Store/Order/Dispatcher/OrderDispatcher/requestOrders/fetchQuery/then */\n            ({ customer: { orders } }) => {\n                dispatch(getOrderList(orders, false));\n            },\n            /** @namespace Store/Order/Dispatcher/OrderDispatcher/requestOrders/fetchQuery/then/catch */\n            (error) => {\n                dispatch(showNotification('error', getErrorMessage(error)));\n                dispatch(setLoadingStatus(false));\n            }\n        );\n    }\n\n    async reorder(dispatch, incrementId) {\n        const {\n            reorderItems: {\n                userInputErrors = []\n            } = {}\n        } = await this.handleReorderMutation(dispatch, incrementId);\n\n        const cartDispatcher = (await CartDispatcher).default;\n\n        cartDispatcher.updateInitialCartData(dispatch, getAuthorizationToken());\n\n        history.push(appendWithStoreCode(CART_URL));\n\n        if (userInputErrors.length) {\n            userInputErrors.map(({ message }) => dispatch(showNotification('error', message)));\n        }\n    }\n\n    handleReorderMutation(dispatch, incrementId) {\n        try {\n            return fetchMutation(OrderQuery.getReorder(incrementId));\n        } catch (error) {\n            return dispatch(showNotification('error', getErrorMessage(error)));\n        }\n    }\n\n    async getOrderById(dispatch, orderId) {\n        try {\n            const {\n                customer: {\n                    orders: {\n                        items\n                    }\n                }\n            } = await fetchQuery(OrderQuery.getOrderListQuery({ orderId }));\n\n            return items[0];\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return null;\n        }\n    }\n\n    async getOrderInvoice(dispatch, invoiceId) {\n        try {\n            const {\n                orderByInvoice\n            } = await fetchQuery(OrderQuery.getOrderByInvoice(invoiceId));\n\n            const invoice = orderByInvoice.invoices.find(({ id }) => atob(id) === invoiceId);\n\n            orderByInvoice.invoices = [invoice];\n\n            return orderByInvoice;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return null;\n        }\n    }\n\n    async getOrderShipment(dispatch, shipmentId) {\n        try {\n            const {\n                orderByShipment\n            } = await fetchQuery(OrderQuery.getOrderByShipment(shipmentId));\n\n            const shipment = orderByShipment.shipments.find(({ id }) => atob(id) === shipmentId);\n\n            orderByShipment.shipments = [shipment];\n\n            return orderByShipment;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return null;\n        }\n    }\n\n    async getOrderRefund(dispatch, refundId) {\n        try {\n            const {\n                orderByRefund\n            } = await fetchQuery(OrderQuery.getOrderByRefund(refundId));\n\n            const refund = orderByRefund.credit_memos.find(({ id }) => atob(id) === refundId);\n\n            orderByRefund.credit_memos = [refund];\n\n            return orderByRefund;\n        } catch (error) {\n            dispatch(showNotification('error', getErrorMessage(error)));\n\n            return null;\n        }\n    }\n}\n\nexport default new OrderDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const UPDATE_PRODUCT_DETAILS = 'UPDATE_PRODUCT_DETAILS';\n\n/**\n * Update product list with new list (rewrite if already exists).\n * @param  {Array<Object>} items List of products returned from fetch\n * @param  {Number} totalItems Total number of products in this filter\n * @return {void}\n * @namespace Store/Product/Action/updateProductDetails\n */\nexport const updateProductDetails = (product) => ({\n    type: UPDATE_PRODUCT_DETAILS,\n    product\n});\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\nimport { updateProductDetails } from 'Store/Product/Product.action';\nimport { QueryDispatcher } from 'Util/Request';\n\nexport const LinkedProductsDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/LinkedProducts/LinkedProducts.dispatcher'\n);\n\n/**\n * Product List Dispatcher\n * @class ProductDispatcher\n * @extends ProductDispatcher\n * @namespace Store/Product/Dispatcher\n */\nexport class ProductDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('Product');\n    }\n\n    onSuccess(data, dispatch) {\n        const { products: { items } } = data;\n\n        /**\n         * In case there are no items, or item count is\n         * smaller then 0 => the product was not found.\n         */\n        if (!items || items.length <= 0) {\n            dispatch(updateNoMatch(true));\n\n            return;\n        }\n\n        const [product] = items;\n\n        const product_links = items.reduce((links, product) => {\n            const { product_links } = product;\n\n            if (product_links) {\n                Object.values(product_links).forEach((item) => {\n                    links.push(item);\n                });\n            }\n\n            return links;\n        }, []);\n\n        LinkedProductsDispatcher.then(\n            ({ default: dispatcher }) => {\n                if (product_links.length > 0) {\n                    dispatcher.handleData(dispatch, product_links);\n                } else {\n                    dispatcher.clearLinkedProducts(dispatch);\n                }\n            }\n        );\n\n        dispatch(updateProductDetails(product));\n    }\n\n    onError(_, dispatch) {\n        dispatch(updateNoMatch(true));\n    }\n\n    prepareRequest(options) {\n        return ProductListQuery.getQuery(options);\n    }\n}\n\nexport default new ProductDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ProductCompareQuery from 'Query/ProductCompare.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    clearComparedProducts,\n    setCompareList,\n    setCompareListIds,\n    toggleLoader,\n    updateCompareTotals\n} from 'Store/ProductCompare/ProductCompare.action';\nimport { getAuthorizationToken } from 'Util/Auth';\nimport { getUid, removeUid, setUid } from 'Util/Compare';\nimport { fetchMutation, fetchQuery } from 'Util/Request';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\n/** @namespace Store/ProductCompare/Dispatcher */\nexport class ProductCompareDispatcher {\n    async getCompareList(dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            return false;\n        }\n\n        dispatch(toggleLoader(true));\n\n        try {\n            const { compareList } = await fetchQuery(\n                ProductCompareQuery.getCompareList(uid)\n            );\n\n            dispatch(toggleLoader(false));\n            dispatch(setCompareList(compareList));\n        } catch (error) {\n            dispatch(toggleLoader(false));\n            dispatch(showNotification('error', __('Unable to fetch compare list'), error));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    async createCompareList(productId) {\n        const {\n            createCompareList,\n            createCompareList: {\n                uid\n            }\n        } = await fetchMutation(\n            ProductCompareQuery.getCreateCompareList(\n                [productId]\n            )\n        );\n\n        if (uid) {\n            setUid(uid);\n        }\n\n        return createCompareList;\n    }\n\n    async addToCompareList(uid, productId) {\n        const {\n            addProductsToCompareList\n        } = await fetchMutation(\n            ProductCompareQuery.getAddProductsToCompareList(\n                uid,\n                [productId]\n            )\n        );\n\n        return addProductsToCompareList;\n    }\n\n    async addProductToCompare(productId, dispatch) {\n        const uid = getUid();\n\n        try {\n            const result = (uid)\n                ? await this.addToCompareList(uid, productId)\n                : await this.createCompareList(productId);\n\n            dispatch(setCompareList(result));\n            dispatch(showNotification('success', __('Product is added to the compare list')));\n\n            return result;\n        } catch (error) {\n            dispatch(showNotification('error', __('Unable to add product to the compare list'), error));\n\n            return false;\n        }\n    }\n\n    async removeComparedProduct(productId, dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            return false;\n        }\n\n        try {\n            const {\n                removeProductsFromCompareList\n            } = await fetchMutation(\n                ProductCompareQuery.getRemoveProductsFromCompareList(\n                    uid,\n                    [productId]\n                )\n            );\n\n            dispatch(setCompareList(removeProductsFromCompareList));\n            dispatch(showNotification('success', __('Product is removed from the compare list')));\n\n            return removeProductsFromCompareList;\n        } catch (error) {\n            dispatch(showNotification('error', __('Unable to remove product from the compare list'), error));\n\n            return false;\n        }\n    }\n\n    async fetchCustomersList(dispatch) {\n        const {\n            createCompareList,\n            createCompareList: {\n                uid\n            }\n        } = await fetchMutation(\n            ProductCompareQuery.getCreateEmptyCompareList()\n        );\n\n        if (!getAuthorizationToken()) {\n            return;\n        }\n\n        if (uid) {\n            setUid(uid);\n        }\n\n        dispatch(setCompareList(createCompareList));\n    }\n\n    async assignCompareList(dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            await this.fetchCustomersList(dispatch);\n\n            return false;\n        }\n\n        removeUid();\n\n        try {\n            const {\n                assignCompareListToCustomer: {\n                    result,\n                    compare_list,\n                    compare_list: {\n                        uid: newUid\n                    }\n                }\n            } = await fetchMutation(\n                ProductCompareQuery.getAssignCompareList(uid)\n            );\n\n            if (!getAuthorizationToken()) {\n                return false;\n            }\n\n            if (result) {\n                setUid(newUid);\n                dispatch(setCompareList(compare_list));\n            }\n\n            return result;\n        } catch (error) {\n            dispatch(toggleLoader(false));\n\n            return false;\n        }\n    }\n\n    async clearComparedProducts(dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            return false;\n        }\n\n        dispatch(toggleLoader(true));\n\n        try {\n            const result = await fetchMutation(\n                ProductCompareQuery.getDeleteCompareList(uid)\n            );\n\n            removeUid();\n            dispatch(clearComparedProducts());\n            dispatch(showNotification('success', __('Compare list is cleared')));\n            dispatch(toggleLoader(false));\n\n            return result;\n        } catch (error) {\n            dispatch(toggleLoader(false));\n            dispatch(showNotification('error', __('Unable to clear product compare list'), error));\n\n            return false;\n        }\n    }\n\n    async updateInitialProductCompareData(dispatch) {\n        const uid = getUid();\n\n        if (!uid) {\n            return false;\n        }\n\n        dispatch(toggleLoader(true));\n\n        try {\n            const { compareList } = await fetchQuery(\n                ProductCompareQuery.getCompareListIds(uid)\n            );\n            const { items = [] } = compareList || {};\n            const compareIds = items.map(({ product: { id } }) => id);\n\n            dispatch(toggleLoader(false));\n            dispatch(setCompareListIds(compareIds));\n            dispatch(updateCompareTotals(compareIds.length));\n        } catch (error) {\n            dispatch(toggleLoader(false));\n            dispatch(showNotification('error', __('Unable to fetch compare list'), error));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    resetComparedProducts(dispatch) {\n        dispatch(clearComparedProducts());\n    }\n}\n\nexport default new ProductCompareDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    appendPage,\n    updateLoadStatus,\n    updatePageLoadingStatus,\n    updateProductListItems\n} from 'Store/ProductList/ProductList.action';\nimport { QueryDispatcher } from 'Util/Request';\n\n/**\n * Product List Dispatcher\n * @class ProductListDispatcher\n * @extends QueryDispatcher\n * @namespace Store/ProductList/Dispatcher\n */\nexport class ProductListDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('ProductList');\n    }\n\n    onSuccess(data, dispatch, options) {\n        const {\n            products: {\n                items,\n                total_count,\n                page_info: { total_pages } = {}\n            } = {}\n        } = data;\n\n        const { args, isNext } = options;\n        const { currentPage } = args;\n\n        if (isNext) {\n            return dispatch(\n                appendPage(\n                    items,\n                    currentPage\n                )\n            );\n        }\n\n        return dispatch(\n            updateProductListItems(\n                items,\n                currentPage,\n                total_count,\n                total_pages,\n                args\n            )\n        );\n    }\n\n    onError(error, dispatch) {\n        dispatch(showNotification('error', __('Error fetching Product List!'), error));\n        dispatch(updateNoMatch(true));\n    }\n\n    prepareRequest(options, dispatch) {\n        const { isNext } = options;\n\n        if (!isNext) {\n            dispatch(updateLoadStatus(true));\n        } else {\n            dispatch(updatePageLoadingStatus());\n        }\n\n        return ProductListQuery.getQuery(options);\n    }\n}\n\nexport default new ProductListDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    updateInfoLoadStatus,\n    updateProductListInfo\n} from 'Store/ProductListInfo/ProductListInfo.action';\nimport { QueryDispatcher } from 'Util/Request';\n\n/**\n * Product List Info Dispatcher\n * @class ProductListInfoDispatcher\n * @extends QueryDispatcher\n * @namespace Store/ProductListInfo/Dispatcher\n */\nexport class ProductListInfoDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('ProductListInfo');\n    }\n\n    onSuccess({ products }, dispatch, options) {\n        const {\n            args: {\n                filter\n            }\n        } = options;\n\n        dispatch(updateProductListInfo(products, filter));\n    }\n\n    onError(error, dispatch) {\n        dispatch(showNotification('error', __('Error fetching Product List Information!'), error));\n        dispatch(updateNoMatch(true));\n    }\n\n    prepareRequest(options, dispatch) {\n        dispatch(updateInfoLoadStatus(true));\n\n        return ProductListQuery.getQuery({\n            ...options,\n            requireInfo: true\n        });\n    }\n}\n\nexport default new ProductListInfoDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ReviewQuery from 'Query/Review.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { fetchMutation } from 'Util/Request';\n\n/**\n * Product Review Dispatcher\n * @class WishlistDispatcher\n * @namespace Store/Review/Dispatcher\n */\nexport class ReviewDispatcher {\n    prepareReviewData(reviewItem) {\n        const {\n            rating_data,\n            product_sku,\n            detail,\n            title,\n            nickname\n        } = reviewItem;\n\n        return {\n            nickname,\n            sku: product_sku,\n            summary: title,\n            text: detail,\n            ratings: Object.keys(rating_data).map(\n                (key) => ({\n                    id: key,\n                    value_id: rating_data[key]\n                })\n            )\n        };\n    }\n\n    async submitProductReview(dispatch, options) {\n        await fetchMutation(ReviewQuery.getAddProductReviewMutation(this.prepareReviewData(options)));\n        dispatch(showNotification('success', 'You submitted your review for moderation.'));\n    }\n}\n\nexport default new ReviewDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const UPDATE_SEARCH_BAR = 'UPDATE_SEARCH_BAR';\nexport const UPDATE_SEARCH_LOAD_STATUS = 'UPDATE_SEARCH_LOAD_STATUS';\nexport const CLEAR_SEARCH_RESULTS = 'CLEAR_SEARCH_RESULTS';\n\n/** @namespace Store/SearchBar/Action/updateSearchBar */\nexport const updateSearchBar = (result) => ({\n    type: UPDATE_SEARCH_BAR,\n    result\n});\n\n/** @namespace Store/SearchBar/Action/updateLoadStatus */\nexport const updateLoadStatus = (status) => ({\n    type: UPDATE_SEARCH_LOAD_STATUS,\n    isLoading: status\n});\n\n/** @namespace Store/SearchBar/Action/clearSearchResults */\nexport const clearSearchResults = () => ({\n    type: CLEAR_SEARCH_RESULTS\n});\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport ProductListQuery from 'Query/ProductList.query';\nimport { QueryDispatcher } from 'Util/Request';\n\nimport { clearSearchResults, updateLoadStatus, updateSearchBar } from './SearchBar.action';\n\n/**\n * Search Bar Dispatcher\n * @class SearchBarDispatcher\n * @extends QueryDispatcher\n * @namespace Store/SearchBar/Dispatcher\n */\nexport class SearchBarDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('SearchBar');\n    }\n\n    onSuccess(data, dispatch) {\n        dispatch(updateLoadStatus(false));\n        dispatch(updateSearchBar(data));\n    }\n\n    onError(_, dispatch) {\n        dispatch(updateLoadStatus(false));\n    }\n\n    clearSearchResults(dispatch) {\n        dispatch(clearSearchResults());\n    }\n\n    prepareRequest(options, dispatch) {\n        dispatch(updateLoadStatus(true));\n\n        return ProductListQuery.getQuery({\n            ...options,\n            notRequireInfo: true,\n            noVariants: true\n        });\n    }\n}\n\nexport default new SearchBarDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport UrlRewritesQuery from 'Query/UrlRewrites.query';\nimport { updateNoMatch } from 'Store/NoMatch/NoMatch.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { setIsUrlRewritesLoading, updateUrlRewrite } from 'Store/UrlRewrites/UrlRewrites.action';\nimport { QueryDispatcher } from 'Util/Request';\n\n/**\n * Url Rewrite Dispathcer\n * @class UrlRewritesDispatcher\n * @extends RequestDispatcher\n * @namespace Store/UrlRewrites/Dispatcher\n */\nexport class UrlRewritesDispatcher extends QueryDispatcher {\n    __construct() {\n        super.__construct('UrlRewrites');\n    }\n\n    onSuccess({ urlResolver }, dispatch, { urlParam }) {\n        dispatch(updateUrlRewrite(urlResolver || { notFound: true }, urlParam));\n        dispatch(updateNoMatch(!urlResolver));\n    }\n\n    onError(error, dispatch, { urlParam }) {\n        dispatch(setIsUrlRewritesLoading(false));\n        dispatch(updateUrlRewrite({ notFound: true }, urlParam));\n        dispatch(updateNoMatch(true));\n        dispatch(showNotification('error', __('Error fetching URL-rewrites!'), error));\n    }\n\n    /**\n     * Prepare UrlRewrite requests\n     * @param {Object} options A object containing different aspects of query, each item can be omitted\n     * @return {Query} UrlRewrite query\n     * @memberof UrlRewritesDispatcher\n     */\n    prepareRequest(options, dispatch) {\n        dispatch(setIsUrlRewritesLoading(true));\n\n        return [\n            UrlRewritesQuery.getQuery(this.processUrlOptions(options))\n        ];\n    }\n\n    processUrlOptions(options) {\n        const { urlParam } = options;\n\n        // FAILSAFE: Trim index.php if someone forgot to set \"Use Web Server Rewrites\" to \"Yes\"\n        const trimmedParam = urlParam.replace('index.php/', '');\n\n        return {\n            ...options,\n            urlParam: trimmedParam.replace(new RegExp(window.storeRegexText), '')\n        };\n    }\n}\n\nexport default new UrlRewritesDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport WishlistQuery from 'Query/Wishlist.query';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport {\n    clearWishlist,\n    removeItemFromWishlist,\n    updateAllProductsInWishlist,\n    updateIsLoading\n} from 'Store/Wishlist/Wishlist.action';\nimport { getAuthorizationToken, isSignedIn } from 'Util/Auth';\nimport { fetchMutation, fetchQuery, getErrorMessage } from 'Util/Request';\nimport getStore from 'Util/Store';\nimport { getPriceRange } from 'Util/Wishlist';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\n/**\n * Get wishlist setting.\n * @namespace Store/Wishlist/Dispatcher/isWishlistEnabled */\nexport const isWishlistEnabled = () => {\n    const state = getStore().getState();\n    const {\n        wishlist_general_active = false\n    } = state.ConfigReducer;\n\n    return wishlist_general_active;\n};\n\n/**\n * Product Wishlist Dispatcher\n * @class WishlistDispatcher\n * @namespace Store/Wishlist/Dispatcher\n */\nexport class WishlistDispatcher {\n    updateInitialWishlistData(dispatch) {\n        if (isSignedIn() && isWishlistEnabled()) {\n            this._syncWishlistWithBE(dispatch);\n        } else {\n            dispatch(updateAllProductsInWishlist({}));\n        }\n    }\n\n    _syncWishlistWithBE(dispatch) {\n        // Need to get current wishlist from BE, update wishlist\n        return fetchQuery(WishlistQuery.getWishlistQuery()).then(\n            /** @namespace Store/Wishlist/Dispatcher/WishlistDispatcher/_syncWishlistWithBE/fetchQuery/then */\n            (data) => {\n                if (!getAuthorizationToken()) {\n                    return;\n                }\n\n                if (data && data.wishlist) {\n                    const { wishlist } = data;\n                    const productsToAdd = wishlist.items.reduce((prev, wishlistItem) => {\n                        const {\n                            id,\n                            sku,\n                            product,\n                            description,\n                            price,\n                            price_without_tax,\n                            buy_request,\n                            options,\n                            qty: quantity\n                        } = wishlistItem;\n\n                        const {\n                            price_range: {\n                                minimum_price: {\n                                    discount = 0\n                                } = {}\n                            } = {}\n                        } = product;\n\n                        const priceRange = getPriceRange(product, price, price_without_tax, discount);\n\n                        return {\n                            ...prev,\n                            [id]: {\n                                ...product,\n                                ...priceRange,\n                                quantity,\n                                wishlist: {\n                                    id,\n                                    sku,\n                                    quantity,\n                                    description,\n                                    buy_request,\n                                    options\n                                }\n                            }\n                        };\n                    }, {});\n\n                    dispatch(updateAllProductsInWishlist(productsToAdd));\n                } else {\n                    dispatch(updateIsLoading(false));\n                }\n            },\n            /** @namespace Store/Wishlist/Dispatcher/WishlistDispatcher/_syncWishlistWithBE/fetchQuery/then/catch */\n            () => {\n                dispatch(updateIsLoading(false));\n            }\n        );\n    }\n\n    async addItemToWishlist(dispatch, options) {\n        if (!isSignedIn()) {\n            return;\n        }\n\n        try {\n            const { items = [], wishlistId = '' } = options;\n\n            dispatch(updateIsLoading(true));\n            const {\n                addProductsToWishlist: { user_errors }\n            } = await fetchMutation(WishlistQuery.addProductsToWishlist(wishlistId, items));\n\n            if (user_errors.length > 0) {\n                user_errors.map(({ message }) => dispatch(\n                    showNotification('error', __('We can`t add the item to Wishlist right now: %s', message).toString())\n                ));\n            } else {\n                dispatch(showNotification('success', __('Product added to wish-list!')));\n                await this._syncWishlistWithBE(dispatch);\n            }\n        } catch {\n            dispatch(showNotification('error', __('Error updating wish list!')));\n        } finally {\n            dispatch(updateIsLoading(false));\n        }\n    }\n\n    updateWishlistItem(dispatch, options) {\n        if (!isSignedIn()) {\n            return Promise.reject();\n        }\n\n        const { wishlistItems = [], wishlistId = '' } = options;\n\n        return fetchMutation(WishlistQuery.updateProductsInWishlist(wishlistId, wishlistItems)).then(\n            /** @namespace Store/Wishlist/Dispatcher/WishlistDispatcher/updateWishlistItem/fetchMutation/then */\n            () => {\n                this._syncWishlistWithBE(dispatch);\n            }\n        );\n    }\n\n    clearWishlist(dispatch) {\n        if (!isSignedIn()) {\n            return Promise.reject();\n        }\n\n        return fetchMutation(WishlistQuery.getClearWishlist())\n            .then(\n                /** @namespace Store/Wishlist/Dispatcher/WishlistDispatcher/clearWishlist/then/catch/fetchMutation/then/dispatch */\n                () => dispatch(clearWishlist())\n            )\n            .catch(\n                /** @namespace Store/Wishlist/Dispatcher/WishlistDispatcher/clearWishlist/then/catch/dispatch */\n                () => dispatch(showNotification('error', __('Error clearing wish list!')))\n            );\n    }\n\n    async moveWishlistToCart(dispatch, sharingCode) {\n        if (!isSignedIn()) {\n            await Promise.reject();\n        }\n\n        try {\n            await fetchMutation(WishlistQuery.getMoveWishlistToCart(sharingCode));\n        } finally {\n            await this._syncWishlistWithBE(dispatch);\n            CartDispatcher.then(\n                ({ default: dispatcher }) => dispatcher.updateInitialCartData(dispatch, getAuthorizationToken())\n            );\n            dispatch(showNotification('success', __('Available items moved to cart')));\n        }\n    }\n\n    async removeItemFromWishlist(dispatch, { item_id, noMessages }) {\n        if (!item_id || !isSignedIn()) {\n            return Promise.reject();\n        }\n\n        dispatch(updateIsLoading(true));\n\n        try {\n            await fetchMutation(WishlistQuery.getRemoveProductFromWishlistMutation(item_id));\n        } catch (e) {\n            if (!noMessages) {\n                dispatch(showNotification('error', __('Error updating wish list!')));\n            }\n\n            return Promise.reject();\n        }\n\n        dispatch(removeItemFromWishlist(item_id));\n\n        if (!noMessages) {\n            dispatch(showNotification('success', __('Product has been removed from your Wish List!')));\n        }\n\n        return Promise.resolve();\n    }\n\n    // TODO: Need to make it in one request\n    removeItemsFromWishlist(dispatch, itemIdMap) {\n        if (!itemIdMap.length || !isSignedIn()) {\n            return Promise.reject();\n        }\n\n        return itemIdMap.map((id) => (\n            fetchMutation(WishlistQuery.getRemoveProductFromWishlistMutation(id)).then(\n                /** @namespace Store/Wishlist/Dispatcher/WishlistDispatcher/removeItemsFromWishlist/itemIdMap/map/fetchMutation/then */\n                () => {\n                    dispatch(removeItemFromWishlist(id));\n                    dispatch(showNotification('success', __('Product has been removed from your Wish List!')));\n                },\n                /** @namespace Store/Wishlist/Dispatcher/WishlistDispatcher/removeItemsFromWishlist/itemIdMap/map/fetchMutation/then/catch */\n                (error) => {\n                    dispatch(showNotification('error', getErrorMessage(error, __('Error updating wishlist!'))));\n                }\n            )\n        ));\n    }\n\n    resetWishlist(dispatch) {\n        dispatch(clearWishlist());\n    }\n}\n\nexport default new WishlistDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport getStore from 'Util/Store';\n\n/** @namespace Util/Address/Index/trimCustomerAddress */\nexport const trimCustomerAddress = (customerAddress) => {\n    const {\n        default_shipping = false,\n        default_billing = false,\n        company = null,\n        city = '',\n        country_id = 1,\n        firstname = '',\n        lastname = '',\n        middlename = '',\n        postcode = '',\n        street = [''],\n        telephone = '',\n        region: {\n            region_code = null,\n            region = null,\n            region_id = 1\n        } = {},\n        prefix = '',\n        suffix = '',\n        vat_id = null\n    } = customerAddress;\n\n    return {\n        company,\n        default_shipping,\n        default_billing,\n        city,\n        country_id,\n        firstname,\n        lastname,\n        middlename,\n        postcode,\n        street,\n        telephone,\n        region: {\n            region_code,\n            region,\n            region_id\n        },\n        prefix,\n        suffix,\n        vat_id\n    };\n};\n\n/** @namespace Util/Address/Index/trimCheckoutCustomerAddress */\nexport const trimCheckoutCustomerAddress = (customerAddress) => {\n    const {\n        company = null,\n        city = '',\n        country_id = 1,\n        firstname = '',\n        lastname = '',\n        postcode = '',\n        street = [''],\n        telephone = '',\n        region: {\n            region_code = null,\n            region = null,\n            region_id = 1\n        } = {},\n        vat_id = null\n    } = customerAddress;\n\n    return {\n        company,\n        city,\n        country_id,\n        firstname,\n        lastname,\n        postcode,\n        street,\n        telephone,\n        region,\n        region_id,\n        region_code,\n        vat_id\n    };\n};\n\n/** @namespace Util/Address/Index/trimCheckoutAddress */\nexport const trimCheckoutAddress = (customerAddress) => {\n    const {\n        company = null,\n        city = '',\n        country_id = 1,\n        firstname = '',\n        lastname = '',\n        postcode = '',\n        street = [''],\n        telephone = '',\n        region_string = '',\n        region_id = 0,\n        region_code = null,\n        vat_id = null\n    } = customerAddress;\n\n    return {\n        company,\n        city,\n        country_id,\n        firstname,\n        lastname,\n        postcode,\n        street,\n        telephone,\n        region: region_string,\n        region_id: region_id === '' ? 0 : region_id,\n        region_code,\n        vat_id\n    };\n};\n\n/**\n * Removes null values from address.street\n * @param street\n * @returns {*}\n * @namespace Util/Address/Index/removeEmptyStreets\n */\nexport const removeEmptyStreets = (street) => (\n    Array.isArray(street) ? street.filter((line) => line) : street\n);\n\n/** transforming \"street[index]\" entries into a single \"street\" object\n    for checkout/billing/myAccoutAddress form fields object */\n/** @namespace Util/Address/Index/setAddressesInFormObject */\nexport const setAddressesInFormObject = (fields, numberOfLines, prefix = 'street') => {\n    const addressKeys = new Array(numberOfLines)\n        .fill('')\n        .map((_, index) => `${prefix}${index}`);\n\n    const addressValues = addressKeys.map((key) => fields[key]);\n\n    // removing street related fields from the form object\n    const newFields = Object.keys(fields)\n        .filter((key) => !addressKeys.includes(key))\n        .reduce(\n            (acc, key) => {\n                acc[key] = fields[key];\n\n                return acc;\n            }, {}\n        );\n\n    // setting single street entry to the form object\n    newFields.street = removeEmptyStreets(addressValues);\n\n    return newFields;\n};\n\n// get Form Fields object depending on addressLinesQty\n/** @namespace Util/Address/Index/getFormFields */\nexport const getFormFields = (fields, addressLinesQty) => {\n    if (addressLinesQty === 1) {\n        return fields;\n    }\n\n    return setAddressesInFormObject(fields, addressLinesQty);\n};\n\n/** @namespace Util/Address/Index/getCityAndRegionFromZipcode */\nexport const getCityAndRegionFromZipcode = async (countryId, value) => {\n    const response = await fetch(`https://api.zippopotam.us/${countryId}/${value}`);\n    const data = await response.json();\n\n    return data && Object.entries(data).length > 0\n        ? {\n            city: data.places[0]['place name'],\n            region: data.places[0].state,\n            regionAbbr: data.places[0]['state abbreviation']\n        }\n        : null;\n};\n\n/** @namespace Util/Address/Index/getDefaultAddressLabel */\nexport const getDefaultAddressLabel = (address) => {\n    const { default_billing, default_shipping } = address;\n\n    if (!default_billing && !default_shipping) {\n        return '';\n    }\n\n    if (default_billing && default_shipping) {\n        return __(' (default shipping & billing)');\n    }\n\n    if (default_billing) {\n        return __(' (default billing address)');\n    }\n\n    return __(' (default shipping address)');\n};\n\n/** @namespace Util/Address/Index/getAvailableRegions */\nexport const getAvailableRegions = (country_id, countries) => {\n    const country = countries.find(({ id }) => id === country_id) || {};\n    const { available_regions } = country;\n\n    // need to handle null value\n    return available_regions || [];\n};\n\n/** @namespace Util/Address/Index/getFormattedRegion */\nexport const getFormattedRegion = (address, countries) => {\n    const { country_id, region: regionData } = address;\n\n    if (!regionData) {\n        return {};\n    }\n\n    const country = countries.find(({ id }) => id === country_id);\n\n    if (!country) {\n        return {};\n    }\n\n    const { label, available_regions } = country;\n\n    if (typeof regionData === 'string') {\n        return {\n            country: label,\n            region: regionData\n        };\n    }\n\n    const regions = available_regions || [];\n    const { region_id, region } = regionData;\n    const { name } = regions.find(({ id }) => id === region_id) || { name: region };\n\n    return {\n        country: label,\n        region: name\n    };\n};\n\n/** @namespace Util/Address/Index/getRegionIdFromAvailableRegions */\nexport const getRegionIdFromAvailableRegions = (availableRegions, cityAndRegion) => {\n    const { region, regionAbbr } = cityAndRegion;\n    const { id: regionId = 1 } = availableRegions.find(\n        ({ name, code }) => name === region || code === regionAbbr\n    ) || {};\n\n    return regionId;\n};\n\n/** @namespace Util/Address/Index/getRegionIdOfRegionName */\nexport const getRegionIdOfRegionName = (countryId, region) => {\n    const countries = getStore().getState().ConfigReducer.countries || [];\n    const availableRegions = getAvailableRegions(countryId, countries) || [];\n    const { id: regionId = 0 } = availableRegions.find(\n        ({ name }) => name === region\n    ) || {};\n\n    return regionId;\n};\n\n/** @namespace Util/Address/Index/checkIfStoreIncluded */\nexport const checkIfStoreIncluded = (stores, selectedStore) => {\n    const selectedStoreInString = JSON.stringify(selectedStore);\n\n    return stores.find((store) => JSON.stringify(store) === selectedStoreInString);\n};\n","/**\n* ScandiPWA - Progressive Web App for Magento\n*\n* Copyright © Scandiweb, Inc. All rights reserved.\n* See LICENSE for license details.\n*\n* @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n* @package scandipwa/scandipwa\n* @link https://github.com/scandipwa/scandipwa\n*/\n\n/**\n * Updates wishlist item price for option based products\n * @param {Object} product\n * @namespace Util/Wishlist/getPriceRange\n */\nexport const getPriceRange = (product, price, priceWithoutTax, discount) => {\n    if (!price) {\n        return {};\n    }\n\n    const {\n        price_range: {\n            minimum_price: {\n                regular_price: {\n                    currency\n                }\n            }\n        }\n    } = product;\n\n    const priceCurrencyValue = { value: price, currency };\n    const priceCurrencyValueExclTax = { value: priceWithoutTax, currency };\n\n    const priceSection = {\n        final_price: priceCurrencyValue,\n        regular_price: priceCurrencyValue,\n        final_price_excl_tax: priceCurrencyValueExclTax,\n        regular_price_excl_tax: priceCurrencyValueExclTax,\n        default_final_price_excl_tax: priceCurrencyValueExclTax,\n        discount\n    };\n\n    return {\n        price_range: {\n            minimum_price: priceSection,\n            maximum_price: priceSection\n        }\n    };\n};\n\nexport default getPriceRange;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport * from './Wishlist';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAbA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAGA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAMA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAlgBA;AAogBA;;;;;;;;;;;;;ACphBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAqBA;AACA;AAjFA;AAmFA;;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AARA;AAUA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AA8DA;AACA;AA9KA;AAgLA;;;;;;;;;;;;;AChMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA4BA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAkBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AAtNA;AAwNA;;;;;;;;;;;;;ACzOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAZA;AAcA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AAvhBA;AAyhBA;;;;;;;;;;;;;AC1iBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AA3IA;AA6IA;;;;;;;;;;;;;AC5JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBA;AAyBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAFA;AAKA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AArCA;AApBA;AA4DA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AASA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAerCA;AAisCA;;;;;;;;;;;;;ACttCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AA3BA;AA6BA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AA7CA;AA+CA;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AAdA;AAgBA;;;;;;;;;;;;;AChhIA;AAkIA;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAFA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAMA;AACA;AA/JA;AAiKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,+PAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AARA;AAFA;AAFA;AACA;AAoBA;AACA;AACA;AAGA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA7DA;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAbA;AAcA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AADA;AAQA;AACA;AACA;AAEA;AACA;AAfA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAFA;AAHA;AAWA;AACA;AACA;AAEA;AACA;AA3BA;AA4BA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA1CA;AA2CA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AApBA;AAqBA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AArBA;AAsBA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAjBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AALA;AAMA;AACA;AA7WA;AA+WA;;;;;;;;;;;;;AC/YA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,+OAAA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAGA;AAHA;AAAA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAZA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAhDA;AAkDA;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AADA;AAIA;AAEA;AAFA;AAIA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAjCA;AAmCA;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AADA;AADA;AAKA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AAMA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAKA;AAXA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AAvHA;AAyHA;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AArEA;AAuEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAQA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA,+OAAA;AAKA,mQAAA;AAKA,iSAAA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAEA;AAAA;AACA;AAHA;AAIA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAIA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAjBA;AAmBA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAjBA;AAmBA;AACA;AACA;AA3BA;AA4BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAEA;AAAA;AACA;AAHA;AAIA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AApCA;AAqCA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AA9QA;AAgRA;;;;;;;;;;;;;ACzVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAVA;AAWA;AAAA;AAEA;AACA;AAhBA;AAkBA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AANA;AAQA;;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,6MAAA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AADA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAfA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AADA;AAMA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAfA;AAgBA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAfA;AAgBA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAfA;AAgBA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAfA;AAgBA;AACA;AApHA;AAsHA;;;;;;;;;;;;;AChJA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,+PAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApDA;AAsDA;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAEA,6MAAA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAvBA;AAwBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAFA;AACA;AAUA;AACA;AACA;AACA;AACA;AAhBA;AAiBA;AACA;AACA;AAAA;AACA;AACA;AADA;AASA;AAVA;AAWA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAhBA;AAiBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAzBA;AA0BA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAmBA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AADA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAtCA;AAuCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAzBA;AA0BA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA1BA;AA2BA;AACA;AACA;AACA;AACA;AACA;AApOA;AAsOA;;;;;;;;;;;;;ACpQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AADA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArDA;AAuDA;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AA5BA;AA8BA;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AANA;AAYA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;AA5BA;AA8BA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AADA;AAAA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAHA;AAKA;AACA;AA3BA;AA6BA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAFA;AAIA;AACA;AA1CA;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA,6MAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AADA;AADA;AADA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAJA;AAFA;AAgBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAyDA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA0BA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAGA;AAAA;AAGA;AANA;AAOA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAbA;AAcA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AADA;AAGA;AACA;AACA;AACA;AANA;AAQA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AAtMA;AAwMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAnBA;AAqBA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAdA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAZA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACpRA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AADA;AADA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAEA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}