{"version":3,"file":"static/js/account-newsletter.chunk.js","sources":["/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountNewsletterSubscription/MyAccountNewsletterSubscription.component.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountNewsletterSubscription/MyAccountNewsletterSubscription.container.js","/Users/mariasulezko/PhpStormProject/test/my-app/scandipwa/node_modules/@scandipwa/scandipwa/src/component/MyAccountNewsletterSubscription/index.js"],"sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport PropTypes from 'prop-types';\n\nimport { FIELD_TYPE } from 'Component/Field/Field.config';\nimport FieldForm from 'Component/FieldForm';\nimport { CustomerType } from 'Type/Account.type';\n\nimport './MyAccountNewsletterSubscription.style.scss';\n\n/** @namespace Component/MyAccountNewsletterSubscription/Component */\nexport class MyAccountNewsletterSubscription extends FieldForm {\n    static propTypes = {\n        customer: CustomerType.isRequired,\n        onCustomerSave: PropTypes.func.isRequired,\n        onError: PropTypes.func.isRequired,\n        isSubscriptionSelected: PropTypes.bool.isRequired\n    };\n\n    get fieldMap() {\n        const { setSubscriptionStatus, isSubscriptionSelected } = this.props;\n\n        return [\n            {\n                type: FIELD_TYPE.checkbox,\n                attr: {\n                    name: 'isSubscribed',\n                    defaultChecked: isSubscriptionSelected\n                },\n                events: {\n                    onChange: setSubscriptionStatus\n                },\n                label: __('General subscription')\n            }\n        ];\n    }\n\n    renderFormBody() {\n        return (\n            <div\n              block=\"FieldForm\"\n              elem=\"Fields\"\n              mix={ { block: 'MyAccountNewsletterSubscription' } }\n            >\n                { super.renderFormBody() }\n            </div>\n        );\n    }\n\n    getFormProps() {\n        const { onCustomerSave, onError } = this.props;\n\n        return {\n            onSubmit: onCustomerSave,\n            onError,\n            returnAsObject: true\n        };\n    }\n\n    renderActions() {\n        return (\n            <button\n              type={ FIELD_TYPE.submit }\n              block=\"Button\"\n              mix={ { block: 'MyAccountNewsletterSubscription', elem: 'Button' } }\n              aria-label={ __('Submit') }\n            >\n                { __('Save changes') }\n            </button>\n        );\n    }\n}\n\nexport default MyAccountNewsletterSubscription;\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport Loader from 'Component/Loader';\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport { updateCustomerDetails } from 'Store/MyAccount/MyAccount.action';\nimport { CUSTOMER } from 'Store/MyAccount/MyAccount.dispatcher';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { CustomerType } from 'Type/Account.type';\nimport { isSignedIn } from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase/BrowserDatabase';\nimport { fetchMutation, getErrorMessage } from 'Util/Request';\nimport { ONE_MONTH_IN_SECONDS } from 'Util/Request/QueryDispatcher';\n\nimport MyAccountNewsletterSubscription from './MyAccountNewsletterSubscription.component';\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container/mapStateToProps */\nexport const mapStateToProps = (state) => ({\n    customer: state.MyAccountReducer.customer,\n    newsletterConfirmStatus: state.ConfigReducer.newsletter_subscription_confirm\n});\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container/mapDispatchToProps */\nexport const mapDispatchToProps = (dispatch) => ({\n    updateCustomer: (customer) => dispatch(updateCustomerDetails(customer)),\n    showErrorNotification: (error) => dispatch(showNotification('error', getErrorMessage(error))),\n    showSuccessNotification: (message) => dispatch(showNotification('success', message))\n});\n\n/** @namespace Component/MyAccountNewsletterSubscription/Container */\nexport class MyAccountNewsletterSubscriptionContainer extends PureComponent {\n    static propTypes = {\n        customer: CustomerType.isRequired,\n        updateCustomer: PropTypes.func.isRequired,\n        showErrorNotification: PropTypes.func.isRequired,\n        showSuccessNotification: PropTypes.func.isRequired,\n        newsletterConfirmStatus: PropTypes.bool.isRequired\n    };\n\n    containerFunctions = {\n        onError: this.onError,\n        setSubscriptionStatus: this.setSubscriptionStatus.bind(this),\n        onCustomerSave: this.onCustomerSave.bind(this)\n    };\n\n    __construct(props) {\n        const { customer, customer: { is_subscribed } = {} } = props;\n\n        super.__construct(props);\n        this.state = {\n            isLoading: Object.keys(customer).length === 0,\n            isSubscriptionSelected: is_subscribed || false\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            customer: prevCustomer\n        } = prevProps;\n\n        const {\n            customer,\n            customer: { is_subscribed } = {}\n        } = this.props;\n\n        if (Object.keys(prevCustomer).length === 0 && Object.keys(customer).length !== 0) {\n            this.setState({\n                isSubscriptionSelected: is_subscribed,\n                isLoading: false\n            });\n        }\n    }\n\n    containerProps() {\n        const { customer } = this.props;\n        const { isSubscriptionSelected } = this.state;\n\n        return { customer, isSubscriptionSelected };\n    }\n\n    setSubscriptionStatus() {\n        this.setState((state) => ({ isSubscriptionSelected: !state.isSubscriptionSelected }));\n    }\n\n    showSubscriptionUpdateNotification(isSubscribed, wasSubscribed) {\n        const {\n            showSuccessNotification,\n            newsletterConfirmStatus\n        } = this.props;\n        const { isSubscriptionSelected } = this.state;\n\n        if (!isSubscribed && wasSubscribed) {\n            showSuccessNotification(__('We have removed your newsletter subscription.'));\n        } else if (isSubscribed && !newsletterConfirmStatus && !wasSubscribed) {\n            showSuccessNotification(__('We have saved your subscription'));\n        } else if (!isSubscribed && newsletterConfirmStatus && isSubscriptionSelected) {\n            showSuccessNotification(__('A subscription confirmation email has been sent!'));\n        } else {\n            showSuccessNotification(__('We have updated your subscription.'));\n        }\n    }\n\n    onError() {\n        const { showErrorNotification } = this.props;\n\n        this.setState({ isLoading: false }, () => {\n            showErrorNotification(__('We are experiencing issues, please try again later'));\n        });\n    }\n\n    async onCustomerSave(form, fields) {\n        const {\n            updateCustomer,\n            customer: {\n                is_subscribed: wasSubscribed\n            }\n        } = this.props;\n\n        const {\n            isSubscribed: {\n                value = false\n            }\n        } = fields;\n\n        const customer = { is_subscribed: value };\n        const mutation = MyAccountQuery.getUpdateInformationMutation(customer);\n\n        if (!isSignedIn()) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n\n        try {\n            const { updateCustomerV2: { customer } } = await fetchMutation(mutation);\n\n            BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n            const { is_subscribed } = customer;\n\n            this.setState({ isLoading: false }, () => {\n                updateCustomer(customer);\n                this.showSubscriptionUpdateNotification(is_subscribed, wasSubscribed);\n            });\n        } catch (e) {\n            this.onError(e);\n        }\n    }\n\n    render() {\n        const { isLoading } = this.state;\n\n        return (\n            <>\n                <Loader isLoading={ isLoading } />\n                <MyAccountNewsletterSubscription\n                  { ...this.containerProps() }\n                  { ...this.containerFunctions }\n                />\n            </>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccountNewsletterSubscriptionContainer);\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport MyAccountNewsletterSubscription from './MyAccountNewsletterSubscription.container';\n\nexport default MyAccountNewsletterSubscription;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;;;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AATA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AA5DA;AAEA;AACA;AACA;AACA;AAJA;AA6DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAAA;AAMA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAHA;AATA;AACA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AADA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAnCA;AAoCA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAnIA;AAEA;AACA;AACA;AACA;AACA;AALA;AAoIA;;;;;;;;;;;;;AC/KA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;A","sourceRoot":""}