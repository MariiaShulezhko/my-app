{"version":3,"sources":["../node_modules/@scandipwa/scandipwa/src/store/MyAccount/MyAccount.dispatcher.js","../node_modules/@scandipwa/scandipwa/src/component/Header/Header.config.js","../node_modules/@scandipwa/scandipwa/src/route/MyAccount/MyAccount.config.js","../node_modules/@scandipwa/scandipwa/src/component/MyAccountOrder/MyAccountOrder.config.js","../node_modules/@scandipwa/scandipwa/src/component/MyAccountCreateAccount/MyAccountCreateAccount.config.js","../node_modules/@scandipwa/scandipwa/src/query/MyAccount.query.js","../node_modules/@scandipwa/scandipwa/src/route/SendConfirmationPage/SendConfirmationPage.config.js"],"names":["CartDispatcher","WishlistDispatcher","ProductCompareDispatcher","CUSTOMER","ONE_MONTH_IN_SECONDS","forceLogoutRedirectPages","CHECKOUT","MY_ACCOUNT","dispatch","query","MyAccountQuery","getCustomerQuery","executePost","prepareQuery","then","customer","getAuthorizationToken","updateIsLocked","updateCustomerDetails","BrowserDatabase","setItem","error","extensions","category","GRAPHQL_AUTH","showNotification","getErrorMessage","authTokenExpired","isWithNotification","__","this","handleForceRedirectToLoginPage","isSignedIn","fetchMutation","getRevokeAccountToken","deleteAuthorizationToken","deleteCartId","deleteItem","removeUid","updateCustomerSignInStatus","dispatcher","default","resetGuestCart","createGuestEmptyCart","resetWishlist","clearComparedProducts","options","mutation","getForgotPasswordMutation","updateCustomerPasswordForgotStatus","getResetPasswordMutation","status","s_resetPassword","updateCustomerPasswordResetStatus","errors","email","password","getCreateAccountMutation","updateIsLoading","data","confirmation_required","createCustomer","sessionStorage","ORDER_ID","CONFIRMATION_REQUIRED","signIn","getResendConfirmationMutation","resendConfirmationEmail","ACCOUNT_CONFIRMATION_NOT_REQUIRED","CONFIRMATION_SENT","WRONG_EMAIL","history","push","ACCOUNT_LOGIN_URL","ACCOUNT_CONFIRMATION_URL","Error","getConfirmAccountMutation","getSignInMutation","result","token","generateCustomerToken","setAuthorizationToken","assignCompareList","cartDispatcher","guestCartToken","getCartId","customerCartToken","mergeCarts","setCartId","updateInitialCartData","updateInitialWishlistData","requestCustomerData","hideActiveOverlay","location","pathname","reduce","urlPart","includes","MyAccountDispatcher","PDP","POPUP","CATEGORY","CUSTOMER_ACCOUNT","CUSTOMER_SUB_ACCOUNT","CUSTOMER_ACCOUNT_PAGE","CUSTOMER_WISHLIST","CUSTOMER_ORDER","MENU","MENU_SUBCATEGORY","SEARCH","FILTER","CART","CART_OVERLAY","CART_EDITING","CHECKOUT_SUCCESS","CHECKOUT_ACCOUNT","CMS_PAGE","NO_MATCH","CONTACT_US","PRODUCT_COMPARE","ACCOUNT_INFORMATION_EDIT_URL","ACCOUNT_FORGOT_PASSWORD_URL","ACCOUNT_REGISTRATION_URL","ACCOUNT_URL","ACCOUNT_ORDER_URL","ACCOUNT_ORDER_PRINT_URL","ACCOUNT_ORDER_HISTORY","LOCKED_ACCOUNT_ERROR_MESSAGE","ORDER_ITEMS","ORDER_INVOICES","ORDER_SHIPMENTS","ORDER_REFUNDS","ORDER_ACTION_LABELS","print","printUrl","printAll","printAllUrl","SHOW_VAT_NUMBER_REQUIRED","SHOW_VAT_NUMBER_OPTIONAL","customer_id","password_confirmation","Field","addArgument","addField","_getCustomerField","newPassword","addFieldList","_getAddressFields","id","orderID","_getResendConfirmationFields","key","_getConfirmAccountFields","getRevokeAccountTokenFields","_getCustomerFields","_getAddressesField","_getRegionFields","_getRegionField"],"mappings":"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,IAAM,YACZK,aAAapH,KAAK4H,wBA1I/B,gCA6II,WACI,MAAO,CACH,aACA,wBACA,WACA,SACA,YACA,aACA,WACA,SACA,QACA,kBACA,mBACA,MACA,SACA,KACA,gBACA5H,KAAK6H,wBA9JjB,gCAkKI,WACI,OAAO,IAAId,IAAM,aACZK,aAAapH,KAAKqH,uBApK/B,6BAuKI,WACI,OAAO,IAAIN,IAAM,UACZK,aAAapH,KAAK8H,sBAzK/B,8BA4KI,WACI,MAAO,CACH,cACA,SACA,eAhLZ,+BAoLI,WACI,MAAO,CACH,KACA,cACA,aACA,SACA,YACA,WACA,OACA,YACA,WACA,aACA,SACA,SACA,mBACA,kBACA,SACA9H,KAAK+H,qBArMjB,uCA+MI,SAA0B/G,GACtB,IAAQS,EAAUT,EAAVS,MAER,OAAO,IAAIsF,IAAM,kBACZC,YAAY,QAAS,UAAWvF,GAChCwF,SAAS,cApNtB,EAAO,CAAP,yCAwNe,QAAIrI,I,0DCzOnB,sGAWO,IAAM0D,EAAoC,oCACpCC,EAAoB,oBACpBC,EAAc","file":"static/js/48.f306f227.chunk.js","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { CHECKOUT, MY_ACCOUNT } from 'Component/Header/Header.config';\nimport { CONFIRMATION_REQUIRED } from 'Component/MyAccountCreateAccount/MyAccountCreateAccount.config';\nimport { ORDER_ID } from 'Component/MyAccountOrder/MyAccountOrder.config';\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport {\n    ACCOUNT_CONFIRMATION_URL,\n    ACCOUNT_LOGIN_URL\n} from 'Route/MyAccount/MyAccount.config';\nimport {\n    ACCOUNT_CONFIRMATION_NOT_REQUIRED,\n    CONFIRMATION_SENT,\n    WRONG_EMAIL\n} from 'Route/SendConfirmationPage/SendConfirmationPage.config';\nimport {\n    updateCustomerDetails,\n    updateCustomerPasswordForgotStatus,\n    updateCustomerPasswordResetStatus,\n    updateCustomerSignInStatus,\n    updateIsLoading,\n    updateIsLocked\n} from 'Store/MyAccount/MyAccount.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { hideActiveOverlay } from 'Store/Overlay/Overlay.action';\nimport { clearComparedProducts } from 'Store/ProductCompare/ProductCompare.action';\nimport {\n    deleteAuthorizationToken,\n    getAuthorizationToken,\n    GRAPHQL_AUTH,\n    isSignedIn,\n    setAuthorizationToken\n} from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { deleteCartId, getCartId, setCartId } from 'Util/Cart';\nimport { removeUid } from 'Util/Compare';\nimport history from 'Util/History';\nimport { prepareQuery } from 'Util/Query';\nimport { executePost, fetchMutation, getErrorMessage } from 'Util/Request';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\nexport const WishlistDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Wishlist/Wishlist.dispatcher'\n);\n\nexport const ProductCompareDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/ProductCompare/ProductCompare.dispatcher'\n);\n\nexport const CUSTOMER = 'customer';\n\nexport const ONE_MONTH_IN_SECONDS = 2628000;\n\n/**\n * My account actions\n * @class MyAccount\n * @namespace Store/MyAccount/Dispatcher\n */\nexport class MyAccountDispatcher {\n    forceLogoutRedirectPages = [\n        CHECKOUT,\n        MY_ACCOUNT\n    ];\n\n    requestCustomerData(dispatch) {\n        const query = MyAccountQuery.getCustomerQuery();\n\n        return executePost(prepareQuery([query])).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/requestCustomerData/executePost/then */\n            ({ customer }) => {\n                if (!getAuthorizationToken()) {\n                    return;\n                }\n\n                dispatch(updateIsLocked(false));\n                dispatch(updateCustomerDetails(customer));\n                BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n            },\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/requestCustomerData/executePost/then/catch */\n            (error) => {\n                const { extensions: { category } } = error[0];\n\n                if (category === GRAPHQL_AUTH) {\n                    dispatch(updateIsLocked(true));\n                }\n                dispatch(showNotification('error', getErrorMessage(error)));\n            }\n        );\n    }\n\n    logout(authTokenExpired = false, isWithNotification = true, dispatch) {\n        if (authTokenExpired) {\n            if (isWithNotification) {\n                dispatch(showNotification('error', __('Your session is over, you are logged out!')));\n            }\n\n            this.handleForceRedirectToLoginPage();\n        } else {\n            if (isSignedIn()) {\n                fetchMutation(MyAccountQuery.getRevokeAccountToken());\n                deleteAuthorizationToken();\n            }\n\n            if (isWithNotification) {\n                dispatch(showNotification('success', __('You are successfully logged out!')));\n            }\n        }\n\n        deleteCartId();\n        BrowserDatabase.deleteItem(CUSTOMER);\n        removeUid();\n\n        dispatch(updateCustomerSignInStatus(false));\n        dispatch(updateCustomerDetails({}));\n\n        // After logout cart, wishlist and compared product list is always empty.\n        // There is no need to fetch it from the backend.\n        CartDispatcher.then(\n            ({ default: dispatcher }) => {\n                dispatcher.resetGuestCart(dispatch);\n                dispatcher.createGuestEmptyCart(dispatch);\n            }\n        );\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetWishlist(dispatch)\n        );\n\n        dispatch(clearComparedProducts());\n        dispatch(updateCustomerDetails({}));\n    }\n\n    /**\n     * Forgot password action\n     * @param {{email: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    forgotPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getForgotPasswordMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/forgotPassword/fetchMutation/then/dispatch */\n            () => dispatch(updateCustomerPasswordForgotStatus()),\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/forgotPassword/fetchMutation/then/dispatch/catch */\n            (error) => dispatch(showNotification('error', getErrorMessage(error)))\n        );\n    }\n\n    /**\n     * Reset password action\n     * @param {{customer_id: String, token: String, password: String, password_confirmation: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    resetPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getResetPasswordMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/resetPassword/fetchMutation/then/dispatch */\n            ({ s_resetPassword: { status } }) => dispatch(updateCustomerPasswordResetStatus(status)),\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/resetPassword/fetchMutation/then/dispatch/catch */\n            (errors) => dispatch(updateCustomerPasswordResetStatus('error', getErrorMessage(errors)))\n        );\n    }\n\n    /**\n     * Create account action\n     * @param {{customer: Object, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    createAccount(options = {}, dispatch) {\n        const { customer: { email }, password } = options;\n        const mutation = MyAccountQuery.getCreateAccountMutation(options);\n\n        dispatch(updateIsLoading(true));\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/createAccount/fetchMutation/then */\n            (data) => {\n                const { createCustomer: { customer } } = data;\n                const { confirmation_required } = customer;\n\n                sessionStorage.setItem(ORDER_ID, '');\n\n                if (confirmation_required) {\n                    dispatch(updateIsLoading(false));\n\n                    return CONFIRMATION_REQUIRED;\n                }\n\n                return this.signIn({ email, password }, dispatch);\n            },\n\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/createAccount/fetchMutation/then/catch */\n            (error) => {\n                dispatch(updateIsLoading(false));\n                dispatch(showNotification('error', getErrorMessage(error)));\n\n                return false;\n            }\n        );\n    }\n\n    /**\n     * Resend confirmation email\n     * @param {{email: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    async resendConfirmation(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getResendConfirmationMutation(options);\n\n        try {\n            const { resendConfirmationEmail: { status = '' } } = await fetchMutation(mutation);\n\n            switch (status) {\n            case ACCOUNT_CONFIRMATION_NOT_REQUIRED:\n                dispatch(showNotification('success', __('This email does not require confirmation.')));\n                history.push(ACCOUNT_LOGIN_URL);\n\n                return false;\n            case CONFIRMATION_SENT:\n                dispatch(showNotification('success', __('Please check your email for confirmation key.')));\n\n                return true;\n            case WRONG_EMAIL:\n                const { email = '' } = options;\n\n                history.push(`${ ACCOUNT_CONFIRMATION_URL }/?email=${ email }`);\n\n                throw __('Wrong email! Please, try again!');\n            default:\n                throw __('Something went wrong! Please, try again!');\n            }\n        } catch (error) {\n            throw new Error(error);\n        }\n    }\n\n    /**\n     * Confirm account action\n     * @param {{key: String, email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    confirmAccount(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getConfirmAccountMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/confirmAccount/fetchMutation/then/dispatch */\n            () => dispatch(showNotification('success', __('Your account is confirmed!'))),\n            /** @namespace Store/MyAccount/Dispatcher/MyAccountDispatcher/confirmAccount/fetchMutation/then/dispatch/catch */\n            (error) => dispatch(\n                showNotification(\n                    'error',\n                    getErrorMessage(error, __('Something went wrong! Please, try again!'))\n                )\n            )\n        );\n    }\n\n    /**\n     * Sign in action\n     * @param {{email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    async signIn(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getSignInMutation(options);\n\n        const result = await fetchMutation(mutation);\n        const { generateCustomerToken: { token } } = result;\n\n        setAuthorizationToken(token);\n\n        ProductCompareDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.assignCompareList(dispatch)\n        );\n\n        const cartDispatcher = (await CartDispatcher).default;\n        const guestCartToken = getCartId();\n        // if customer is authorized, `createEmptyCart` mutation returns customer cart token\n        const customerCartToken = await cartDispatcher.createGuestEmptyCart(dispatch);\n\n        if (guestCartToken && guestCartToken !== customerCartToken) {\n            // merge guest cart id and customer cart id using magento capabilities\n            await cartDispatcher.mergeCarts(guestCartToken, customerCartToken, dispatch);\n        }\n\n        setCartId(customerCartToken);\n        cartDispatcher.updateInitialCartData(dispatch, true);\n\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.updateInitialWishlistData(dispatch)\n        );\n\n        await this.requestCustomerData(dispatch);\n\n        dispatch(updateCustomerSignInStatus(true));\n        dispatch(updateIsLoading(false));\n        dispatch(hideActiveOverlay());\n        dispatch(showNotification('success', __('You are successfully logged in!')));\n\n        return true;\n    }\n\n    handleForceRedirectToLoginPage() {\n        const { location: { pathname = '' } = {} } = history;\n        const doRedirect = this.forceLogoutRedirectPages.reduce((result, urlPart) => {\n            if (pathname.includes(urlPart)) {\n                return true;\n            }\n\n            return result;\n        }, false);\n\n        if (doRedirect) {\n            history.push({ pathname: ACCOUNT_LOGIN_URL });\n        }\n    }\n\n    handleCustomerDataOnInit(dispatch) {\n        if (isSignedIn()) {\n            return;\n        }\n\n        BrowserDatabase.deleteItem(CUSTOMER);\n        CartDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.resetGuestCart(dispatch)\n        );\n    }\n}\n\nexport default new MyAccountDispatcher();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const PDP = 'pdp';\nexport const POPUP = 'popup';\nexport const CATEGORY = 'category';\nexport const CUSTOMER_ACCOUNT = 'customer_account';\nexport const CUSTOMER_SUB_ACCOUNT = 'customer_sub_account';\nexport const CUSTOMER_ACCOUNT_PAGE = 'customer_account_page';\nexport const CUSTOMER_WISHLIST = 'wishlist';\nexport const CUSTOMER_ORDER = 'customer_order';\nexport const HOME_PAGE = 'home';\nexport const MENU = 'menu';\nexport const MENU_SUBCATEGORY = 'menu_subcategory';\nexport const SEARCH = 'search';\nexport const FILTER = 'filter';\nexport const CART = 'cart';\nexport const CART_OVERLAY = 'cart_overlay';\nexport const CART_EDITING = 'cart_editing';\nexport const CHECKOUT = 'checkout';\nexport const CHECKOUT_SUCCESS = 'checkout_success';\nexport const CHECKOUT_ACCOUNT = 'checkout_account';\nexport const CMS_PAGE = 'cms-page';\nexport const MY_ACCOUNT = 'my-account';\nexport const NO_MATCH = 'no-match';\nexport const CONTACT_US = 'contact-us';\nexport const PRODUCT_COMPARE = 'product-compare';\n","/* eslint-disable import/prefer-default-export */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const ACCOUNT_INFORMATION_EDIT_URL = '/customer/account/edit';\nexport const ACCOUNT_FORGOT_PASSWORD_URL = '/customer/account/forgotpassword';\nexport const ACCOUNT_CONFIRMATION_URL = '/customer/account/confirmation';\nexport const ACCOUNT_REGISTRATION_URL = '/customer/account/create';\nexport const ACCOUNT_LOGIN_URL = '/customer/account/login';\nexport const ACCOUNT_URL = '/customer/account';\nexport const ACCOUNT_ORDER_URL = '/sales/order/view/order_id';\nexport const ACCOUNT_ORDER_PRINT_URL = '/sales/order/print/order_id';\nexport const ACCOUNT_ORDER_HISTORY = '/sales/order/history';\n// eslint-disable-next-line max-len\nexport const LOCKED_ACCOUNT_ERROR_MESSAGE = __('The account sign-in was incorrect or your account is disabled temporarily. Please wait and try again later.');\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const ORDER_ITEMS = 'Items';\nexport const ORDER_INVOICES = 'Invoice';\nexport const ORDER_SHIPMENTS = 'Shipment';\nexport const ORDER_REFUNDS = 'Refund';\nexport const ORDER_ID = 'ORDER_ID';\n\nexport const ORDER_ACTION_LABELS = {\n    [ORDER_INVOICES]: {\n        print: __('Print Invoice'),\n        printUrl: '/sales/order/printInvoice/invoice_id',\n        printAll: __('Print All Invoices'),\n        printAllUrl: '/sales/order/printInvoice/order_id'\n    },\n    [ORDER_SHIPMENTS]: {\n        print: __('Print Shipment'),\n        printUrl: '/sales/order/printShipment/shipment_id',\n        printAll: __('Print All Shipments'),\n        printAllUrl: '/sales/order/printShipment/order_id'\n    },\n    [ORDER_REFUNDS]: {\n        print: __('Print Refund'),\n        printUrl: '/sales/order/printCreditmemo/creditmemo_id',\n        printAll: __('Print All Refunds'),\n        printAllUrl: '/sales/order/printCreditmemo/order_id'\n    }\n};\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const SHOW_VAT_NUMBER_REQUIRED = 'req';\nexport const SHOW_VAT_NUMBER_OPTIONAL = 'opt';\nexport const CONFIRMATION_REQUIRED = 'confirmation_required';\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nimport { Field } from 'Util/Query';\n\n/**\n * MyAccount Mutations\n * @class MyAccount\n * @namespace Query/MyAccount/Query */\nexport class MyAccountQuery {\n    /**\n     * Get ResetPassword mutation\n     * @param {{customer_id: String, token: String, password: String, password_confirmation: String}} options A object containing different aspects of query, each item can be omitted\n     * @return {Field}\n     * @memberof MyAccount\n     */\n    getResetPasswordMutation(options) {\n        const {\n            customer_id,\n            token,\n            password,\n            password_confirmation\n        } = options;\n\n        return new Field('s_resetPassword')\n            .addArgument('token', 'String!', token)\n            .addArgument('password', 'String!', password)\n            .addArgument('password_confirmation', 'String!', password_confirmation)\n            .addArgument('customer_id', 'String!', customer_id)\n            .addField('status');\n    }\n\n    /**\n     * Get SignIn mutation\n     * @param {{email: String, password: String}} options A object containing different aspects of query, each item can be omitted\n     * @return {Field}\n     * @memberof MyAccount\n     */\n    getSignInMutation(options) {\n        const { email, password } = options;\n\n        return new Field('generateCustomerToken')\n            .addArgument('email', 'String!', email)\n            .addArgument('password', 'String!', password)\n            .addField('token');\n    }\n\n    getUpdateInformationMutation(options) {\n        return new Field('updateCustomerV2')\n            .addArgument('input', 'CustomerUpdateInput!', options)\n            .addField(this._getCustomerField());\n    }\n\n    getUpdateEmailMutation(options) {\n        const { email, password } = options;\n\n        return new Field('updateCustomerEmail')\n            .addArgument('email', 'String!', email)\n            .addArgument('password', 'String!', password)\n            .addField(this._getCustomerField());\n    }\n\n    getChangeCustomerPasswordMutation(options) {\n        const { password, newPassword } = options;\n\n        return new Field('changeCustomerPassword')\n            .addArgument('currentPassword', 'String!', password)\n            .addArgument('newPassword', 'String!', newPassword)\n            .addField('id')\n            .addField('email');\n    }\n\n    getCreateAddressMutation(options) {\n        return new Field('createCustomerAddress')\n            .addArgument('input', 'CustomerAddressInput!', options)\n            .addFieldList(this._getAddressFields());\n    }\n\n    getDeleteAddressMutation(id) {\n        return new Field('deleteCustomerAddress')\n            .addArgument('id', 'Int!', id);\n    }\n\n    getUpdateAddressMutation(id, options) {\n        return new Field('updateCustomerAddress')\n            .addArgument('id', 'Int!', id)\n            .addArgument('input', 'CustomerAddressInput!', options)\n            .addFieldList(this._getAddressFields());\n    }\n\n    getCreateAccountMutation(options) {\n        const { customer, password, orderID } = options;\n\n        return new Field('createCustomer')\n            .addArgument('input', 'CustomerInput!', { ...customer, password, orderID })\n            .addField(this._getCustomerField());\n    }\n\n    getResendConfirmationMutation(options) {\n        const { email } = options;\n\n        return new Field('resendConfirmationEmail')\n            .addArgument('email', 'String!', email)\n            .addFieldList(this._getResendConfirmationFields());\n    }\n\n    _getResendConfirmationFields() {\n        return [\n            'status'\n        ];\n    }\n\n    getConfirmAccountMutation(options) {\n        const { key, email, password } = options;\n\n        return new Field('confirmCustomerEmail')\n            .addArgument('key', 'String!', key)\n            .addArgument('email', 'String!', email)\n            .addArgument('password', 'String!', password)\n            .addFieldList(this._getConfirmAccountFields());\n    }\n\n    getRevokeAccountToken() {\n        return new Field('revokeCustomerToken')\n            .addFieldList(this.getRevokeAccountTokenFields());\n    }\n\n    getCustomerQuery() {\n        return this._getCustomerField();\n    }\n\n    _getConfirmAccountFields() {\n        return [\n            'status',\n            'token',\n            this._getCustomerField()\n        ];\n    }\n\n    getRevokeAccountTokenFields() {\n        return [\n            'result'\n        ];\n    }\n\n    _getCustomerField() {\n        return new Field('customer')\n            .addFieldList(this._getCustomerFields());\n    }\n\n    _getCustomerFields() {\n        return [\n            'created_at',\n            'confirmation_required',\n            'group_id',\n            'prefix',\n            'firstname',\n            'middlename',\n            'lastname',\n            'suffix',\n            'email',\n            'default_billing',\n            'default_shipping',\n            'dob',\n            'taxvat',\n            'id',\n            'is_subscribed',\n            this._getAddressesField()\n        ];\n    }\n\n    _getAddressesField() {\n        return new Field('addresses')\n            .addFieldList(this._getAddressFields());\n    }\n\n    _getRegionField() {\n        return new Field('region')\n            .addFieldList(this._getRegionFields());\n    }\n\n    _getRegionFields() {\n        return [\n            'region_code',\n            'region',\n            'region_id'\n        ];\n    }\n\n    _getAddressFields() {\n        return [\n            'id',\n            'customer_id',\n            'country_id',\n            'street',\n            'telephone',\n            'postcode',\n            'city',\n            'firstname',\n            'lastname',\n            'middlename',\n            'prefix',\n            'suffix',\n            'default_shipping',\n            'default_billing',\n            'vat_id',\n            this._getRegionField()\n        ];\n    }\n\n    /**\n     * Get ForgotPassword mutation\n     * @param {{email: String}} options\n     * @returns {Field}\n     * @memberof MyAccount\n     */\n    getForgotPasswordMutation(options) {\n        const { email } = options;\n\n        return new Field('forgotPassword')\n            .addArgument('email', 'String!', email)\n            .addField('status');\n    }\n}\n\nexport default new MyAccountQuery();\n","/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright © Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/scandipwa\n * @link https://github.com/scandipwa/scandipwa\n */\n\nexport const ACCOUNT_CONFIRMATION_NOT_REQUIRED = 'account_confirmation_not_required';\nexport const CONFIRMATION_SENT = 'confirmation_sent';\nexport const WRONG_EMAIL = 'wrong_email';\n"],"sourceRoot":""}