require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/classes/util/Dispatcher.js":"/**\n * Dispatcher.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n/**\n * This class is used to dispatch event to observers/listeners.\n * All internal events inside TinyMCE uses this class.\n *\n * @class tinymce.util.Dispatcher\n * @example\n * // Creates a custom event\n * this.onSomething = new tinymce.util.Dispatcher(this);\n * \n * // Dispatch/fire the event\n * this.onSomething.dispatch('some string');\n */\ntinymce.create('tinymce.util.Dispatcher', {\n\tscope : null,\n\tlisteners : null,\n\n\t/**\n\t * Constructs a new event dispatcher object.\n\t *\n\t * @constructor\n\t * @method Dispatcher\n\t * @param {Object} s Optional default execution scope for all observer functions.\n\t */\n\tDispatcher : function(s) {\n\t\tthis.scope = s || this;\n\t\tthis.listeners = [];\n\t},\n\n\t/**\n\t * Add an observer function to be executed when a dispatch call is done.\n\t *\n\t * @method add\n\t * @param {function} cb Callback function to execute when a dispatch event occurs.\n\t * @param {Object} s Optional execution scope, defaults to the one specified in the class constructor.\n\t * @return {function} Returns the same function as the one passed on.\n\t */\n\tadd : function(cb, s) {\n\t\tthis.listeners.push({cb : cb, scope : s || this.scope});\n\n\t\treturn cb;\n\t},\n\n\t/**\n\t * Add an observer function to be executed to the top of the list of observers.\n\t *\n\t * @method addToTop\n\t * @param {function} cb Callback function to execute when a dispatch event occurs.\n\t * @param {Object} s Optional execution scope, defaults to the one specified in the class constructor.\n\t * @return {function} Returns the same function as the one passed on.\n\t */\n\taddToTop : function(cb, s) {\n\t\tthis.listeners.unshift({cb : cb, scope : s || this.scope});\n\n\t\treturn cb;\n\t},\n\n\t/**\n\t * Removes an observer function.\n\t *\n\t * @method remove\n\t * @param {function} cb Observer function to remove.\n\t * @return {function} The same function that got passed in or null if it wasn't found.\n\t */\n\tremove : function(cb) {\n\t\tvar l = this.listeners, o = null;\n\n\t\ttinymce.each(l, function(c, i) {\n\t\t\tif (cb == c.cb) {\n\t\t\t\to = cb;\n\t\t\t\tl.splice(i, 1);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\treturn o;\n\t},\n\n\t/**\n\t * Dispatches an event to all observers/listeners.\n\t *\n\t * @method dispatch\n\t * @param {Object} .. Any number of arguments to dispatch.\n\t * @return {Object} Last observer functions return value.\n\t */\n\tdispatch : function() {\n\t\tvar s, a = arguments, i, li = this.listeners, c;\n\n\t\t// Needs to be a real loop since the listener count might change while looping\n\t\t// And this is also more efficient\n\t\tfor (i = 0; i<li.length; i++) {\n\t\t\tc = li[i];\n\t\t\ts = c.cb.apply(c.scope, a);\n\n\t\t\tif (s === false)\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn s;\n\t}\n\n\t/**#@-*/\n});\n"}
}});
