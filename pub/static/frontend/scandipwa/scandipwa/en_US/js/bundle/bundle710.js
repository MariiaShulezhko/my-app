require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/classes/tinymce.js":"/**\n * tinymce.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n(function(win) {\n\tvar whiteSpaceRe = /^\\s*|\\s*$/g,\n\t\tundefined, isRegExpBroken = 'B'.replace(/A(.)|B/, '$1') === '$1';\n\n\t/**\n\t * Core namespace with core functionality for the TinyMCE API all sub classes will be added to this namespace/object.\n\t *\n\t * @static\n\t * @class tinymce\n\t * @example\n\t * // Using each method\n\t * tinymce.each([1, 2, 3], function(v, i) {\n\t *   console.log(i + '=' + v);\n\t * });\n\t *\n\t * // Checking for a specific browser\n\t * if (tinymce.isIE)\n\t *   console.log(\"IE\");\n\t */\n\tvar tinymce = {\n\t\t/**\n\t\t * Major version of TinyMCE build.\n\t\t *\n\t\t * @property majorVersion\n\t\t * @type String\n\t\t */\n\t\tmajorVersion : '@@tinymce_major_version@@',\n\n\t\t/**\n\t\t * Major version of TinyMCE build.\n\t\t *\n\t\t * @property minorVersion\n\t\t * @type String\n\t\t */\n\t\tminorVersion : '@@tinymce_minor_version@@',\n\n\t\t/**\n\t\t * Release date of TinyMCE build.\n\t\t *\n\t\t * @property releaseDate\n\t\t * @type String\n\t\t */\n\t\treleaseDate : '@@tinymce_release_date@@',\n\n\t\t/**\n\t\t * Initializes the TinyMCE global namespace this will setup browser detection and figure out where TinyMCE is running from.\n\t\t */\n\t\t_init : function() {\n\t\t\tvar t = this, d = document, na = navigator, ua = na.userAgent, i, nl, n, base, p, v;\n\n\t\t\t/**\n\t\t\t * Constant that is true if the browser is Opera.\n\t\t\t *\n\t\t\t * @property isOpera\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isOpera = win.opera && opera.buildNumber;\n\n\t\t\t/**\n\t\t\t * Constant that is true if the browser is WebKit (Safari/Chrome).\n\t\t\t *\n\t\t\t * @property isWebKit\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isWebKit = /WebKit/.test(ua);\n\n\t\t\t/**\n\t\t\t * Constant that is true if the browser is IE.\n\t\t\t *\n\t\t\t * @property isIE\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isIE = !t.isWebKit && !t.isOpera && (/MSIE/gi).test(ua) && (/Explorer/gi).test(na.appName);\n\n\t\t\t/**\n\t\t\t * Constant that is true if the browser is IE 6 or older.\n\t\t\t *\n\t\t\t * @property isIE6\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isIE6 = t.isIE && /MSIE [56]/.test(ua);\n\n\t\t\t/**\n\t\t\t * Constant that is true if the browser is IE 7.\n\t\t\t *\n\t\t\t * @property isIE7\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isIE7 = t.isIE && /MSIE [7]/.test(ua);\n\n\t\t\t/**\n\t\t\t * Constant that is true if the browser is IE 8.\n\t\t\t *\n\t\t\t * @property isIE8\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isIE8 = t.isIE && /MSIE [8]/.test(ua);\n\n\t\t\t/**\n\t\t\t * Constant that is true if the browser is IE 9.\n\t\t\t *\n\t\t\t * @property isIE9\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isIE9 = t.isIE && /MSIE [9]/.test(ua);\n\n\t\t\t/**\n\t\t\t * Constant that is true if the browser is Gecko.\n\t\t\t *\n\t\t\t * @property isGecko\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isGecko = !t.isWebKit && /Gecko/.test(ua);\n\n\t\t\t/**\n\t\t\t * Constant that is true if the os is Mac OS.\n\t\t\t *\n\t\t\t * @property isMac\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isMac = ua.indexOf('Mac') != -1;\n\n\t\t\t/**\n\t\t\t * Constant that is true if the runtime is Adobe Air.\n\t\t\t *\n\t\t\t * @property isAir\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isAir = /adobeair/i.test(ua);\n\n\t\t\t/**\n\t\t\t * Constant that tells if the current browser is an iPhone or iPad.\n\t\t\t *\n\t\t\t * @property isIDevice\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isIDevice = /(iPad|iPhone)/.test(ua);\n\t\t\t\n\t\t\t/**\n\t\t\t * Constant that is true if the current browser is running on iOS 5 or greater.\n\t\t\t *\n\t\t\t * @property isIOS5\n\t\t\t * @type Boolean\n\t\t\t * @final\n\t\t\t */\n\t\t\tt.isIOS5 = t.isIDevice && ua.match(/AppleWebKit\\/(\\d*)/)[1]>=534;\n\n\t\t\t// TinyMCE .NET webcontrol might be setting the values for TinyMCE\n\t\t\tif (win.tinyMCEPreInit) {\n\t\t\t\tt.suffix = tinyMCEPreInit.suffix;\n\t\t\t\tt.baseURL = tinyMCEPreInit.base;\n\t\t\t\tt.query = tinyMCEPreInit.query;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get suffix and base\n\t\t\tt.suffix = '';\n\n\t\t\t// If base element found, add that infront of baseURL\n\t\t\tnl = d.getElementsByTagName('base');\n\t\t\tfor (i=0; i<nl.length; i++) {\n\t\t\t\tif (v = nl[i].href) {\n\t\t\t\t\t// Host only value like http://site.com or http://site.com:8008\n\t\t\t\t\tif (/^https?:\\/\\/[^\\/]+$/.test(v))\n\t\t\t\t\t\tv += '/';\n\n\t\t\t\t\tbase = v ? v.match(/.*\\//)[0] : ''; // Get only directory\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction getBase(n) {\n\t\t\t\tif (n.src && /tiny_mce(|_gzip|_jquery|_prototype|_full)(_dev|_src)?.js/.test(n.src)) {\n\t\t\t\t\tif (/_(src|dev)\\.js/g.test(n.src))\n\t\t\t\t\t\tt.suffix = '_src';\n\n\t\t\t\t\tif ((p = n.src.indexOf('?')) != -1)\n\t\t\t\t\t\tt.query = n.src.substring(p + 1);\n\n\t\t\t\t\tt.baseURL = n.src.substring(0, n.src.lastIndexOf('/'));\n\n\t\t\t\t\t// If path to script is relative and a base href was found add that one infront\n\t\t\t\t\t// the src property will always be an absolute one on non IE browsers and IE 8\n\t\t\t\t\t// so this logic will basically only be executed on older IE versions\n\t\t\t\t\tif (base && t.baseURL.indexOf('://') == -1 && t.baseURL.indexOf('/') !== 0)\n\t\t\t\t\t\tt.baseURL = base + t.baseURL;\n\n\t\t\t\t\treturn t.baseURL;\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\n\t\t\t// Check document\n\t\t\tnl = d.getElementsByTagName('script');\n\t\t\tfor (i=0; i<nl.length; i++) {\n\t\t\t\tif (getBase(nl[i]))\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check head\n\t\t\tn = d.getElementsByTagName('head')[0];\n\t\t\tif (n) {\n\t\t\t\tnl = n.getElementsByTagName('script');\n\t\t\t\tfor (i=0; i<nl.length; i++) {\n\t\t\t\t\tif (getBase(nl[i]))\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t},\n\n\t\t/**\n\t\t * Checks if a object is of a specific type for example an array.\n\t\t *\n\t\t * @method is\n\t\t * @param {Object} o Object to check type of.\n\t\t * @param {string} t Optional type to check for.\n\t\t * @return {Boolean} true/false if the object is of the specified type.\n\t\t */\n\t\tis : function(o, t) {\n\t\t\tif (!t)\n\t\t\t\treturn o !== undefined;\n\n\t\t\tif (t == 'array' && (o.hasOwnProperty && o instanceof Array))\n\t\t\t\treturn true;\n\n\t\t\treturn typeof(o) == t;\n\t\t},\n\n\t\t/**\n\t\t * Makes a name/object map out of an array with names.\n\t\t *\n\t\t * @method makeMap\n\t\t * @param {Array/String} items Items to make map out of.\n\t\t * @param {String} delim Optional delimiter to split string by.\n\t\t * @param {Object} map Optional map to add items to.\n\t\t * @return {Object} Name/value map of items.\n\t\t */\n\t\tmakeMap : function(items, delim, map) {\n\t\t\tvar i;\n\n\t\t\titems = items || [];\n\t\t\tdelim = delim || ',';\n\n\t\t\tif (typeof(items) == \"string\")\n\t\t\t\titems = items.split(delim);\n\n\t\t\tmap = map || {};\n\n\t\t\ti = items.length;\n\t\t\twhile (i--)\n\t\t\t\tmap[items[i]] = {};\n\n\t\t\treturn map;\n\t\t},\n\n\t\t/**\n\t\t * Performs an iteration of all items in a collection such as an object or array. This method will execure the\n\t\t * callback function for each item in the collection, if the callback returns false the iteration will terminate.\n\t\t * The callback has the following format: cb(value, key_or_index).\n\t\t *\n\t\t * @method each\n\t\t * @param {Object} o Collection to iterate.\n\t\t * @param {function} cb Callback function to execute for each item.\n\t\t * @param {Object} s Optional scope to execute the callback in.\n\t\t * @example\n\t\t * // Iterate an array\n\t\t * tinymce.each([1,2,3], function(v, i) {\n\t\t *     console.debug(\"Value: \" + v + \", Index: \" + i);\n\t\t * });\n\t\t * \n\t\t * // Iterate an object\n\t\t * tinymce.each({a : 1, b : 2, c: 3], function(v, k) {\n\t\t *     console.debug(\"Value: \" + v + \", Key: \" + k);\n\t\t * });\n\t\t */\n\t\teach : function(o, cb, s) {\n\t\t\tvar n, l;\n\n\t\t\tif (!o)\n\t\t\t\treturn 0;\n\n\t\t\ts = s || o;\n\n\t\t\tif (o.length !== undefined) {\n\t\t\t\t// Indexed arrays, needed for Safari\n\t\t\t\tfor (n=0, l = o.length; n < l; n++) {\n\t\t\t\t\tif (cb.call(s, o[n], n, o) === false)\n\t\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Hashtables\n\t\t\t\tfor (n in o) {\n\t\t\t\t\tif (o.hasOwnProperty(n)) {\n\t\t\t\t\t\tif (cb.call(s, o[n], n, o) === false)\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 1;\n\t\t},\n\n\t\t// #ifndef jquery\n\n\t\t/**\n\t\t * Creates a new array by the return value of each iteration function call. This enables you to convert\n\t\t * one array list into another.\n\t\t *\n\t\t * @method map\n\t\t * @param {Array} a Array of items to iterate.\n\t\t * @param {function} f Function to call for each item. It's return value will be the new value.\n\t\t * @return {Array} Array with new values based on function return values.\n\t\t */\n\t\tmap : function(a, f) {\n\t\t\tvar o = [];\n\n\t\t\ttinymce.each(a, function(v) {\n\t\t\t\to.push(f(v));\n\t\t\t});\n\n\t\t\treturn o;\n\t\t},\n\n\t\t/**\n\t\t * Filters out items from the input array by calling the specified function for each item.\n\t\t * If the function returns false the item will be excluded if it returns true it will be included.\n\t\t *\n\t\t * @method grep\n\t\t * @param {Array} a Array of items to loop though.\n\t\t * @param {function} f Function to call for each item. Include/exclude depends on it's return value.\n\t\t * @return {Array} New array with values imported and filtered based in input.\n\t\t * @example\n\t\t * // Filter out some items, this will return an array with 4 and 5\n\t\t * var items = tinymce.grep([1,2,3,4,5], function(v) {return v > 3;});\n\t\t */\n\t\tgrep : function(a, f) {\n\t\t\tvar o = [];\n\n\t\t\ttinymce.each(a, function(v) {\n\t\t\t\tif (!f || f(v))\n\t\t\t\t\to.push(v);\n\t\t\t});\n\n\t\t\treturn o;\n\t\t},\n\n\t\t/**\n\t\t * Returns the index of a value in an array, this method will return -1 if the item wasn't found.\n\t\t *\n\t\t * @method inArray\n\t\t * @param {Array} a Array/Object to search for value in.\n\t\t * @param {Object} v Value to check for inside the array.\n\t\t * @return {Number/String} Index of item inside the array inside an object. Or -1 if it wasn't found.\n\t\t * @example\n\t\t * // Get index of value in array this will alert 1 since 2 is at that index\n\t\t * alert(tinymce.inArray([1,2,3], 2));\n\t\t */\n\t\tinArray : function(a, v) {\n\t\t\tvar i, l;\n\n\t\t\tif (a) {\n\t\t\t\tfor (i = 0, l = a.length; i < l; i++) {\n\t\t\t\t\tif (a[i] === v)\n\t\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t},\n\n\t\t/**\n\t\t * Extends an object with the specified other object(s).\n\t\t *\n\t\t * @method extend\n\t\t * @param {Object} o Object to extend with new items.\n\t\t * @param {Object} e..n Object(s) to extend the specified object with.\n\t\t * @return {Object} o New extended object, same reference as the input object.\n\t\t * @example\n\t\t * // Extends obj1 with two new fields\n\t\t * var obj = tinymce.extend(obj1, {\n\t\t *     somefield1 : 'a',\n\t\t *     somefield2 : 'a'\n\t\t * });\n\t\t * \n\t\t * // Extends obj with obj2 and obj3\n\t\t * tinymce.extend(obj, obj2, obj3);\n\t\t */\n\t\textend : function(o, e) {\n\t\t\tvar i, l, a = arguments;\n\n\t\t\tfor (i = 1, l = a.length; i < l; i++) {\n\t\t\t\te = a[i];\n\n\t\t\t\ttinymce.each(e, function(v, n) {\n\t\t\t\t\tif (v !== undefined)\n\t\t\t\t\t\to[n] = v;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn o;\n\t\t},\n\n\t\t// #endif\n\n\t\t/**\n\t\t * Removes whitespace from the beginning and end of a string.\n\t\t *\n\t\t * @method trim\n\t\t * @param {String} s String to remove whitespace from.\n\t\t * @return {String} New string with removed whitespace.\n\t\t */\n\t\ttrim : function(s) {\n\t\t\treturn (s ? '' + s : '').replace(whiteSpaceRe, '');\n\t\t},\n\n\t\t/**\n\t\t * Creates a class, subclass or static singleton.\n\t\t * More details on this method can be found in the Wiki.\n\t\t *\n\t\t * @method create\n\t\t * @param {String} s Class name, inheritage and prefix.\n\t\t * @param {Object} p Collection of methods to add to the class.\n\t\t * @param {Object} root Optional root object defaults to the global window object.\n\t\t * @example\n\t\t * // Creates a basic class\n\t\t * tinymce.create('tinymce.somepackage.SomeClass', {\n\t\t *     SomeClass : function() {\n\t\t *         // Class constructor\n\t\t *     },\n\t\t * \n\t\t *     method : function() {\n\t\t *         // Some method\n\t\t *     }\n\t\t * });\n\t\t *\n\t\t * // Creates a basic subclass class\n\t\t * tinymce.create('tinymce.somepackage.SomeSubClass:tinymce.somepackage.SomeClass', {\n\t\t *     SomeSubClass: function() {\n\t\t *         // Class constructor\n\t\t *         this.parent(); // Call parent constructor\n\t\t *     },\n\t\t * \n\t\t *     method : function() {\n\t\t *         // Some method\n\t\t *         this.parent(); // Call parent method\n\t\t *     },\n\t\t * \n\t\t *     'static' : {\n\t\t *         staticMethod : function() {\n\t\t *             // Static method\n\t\t *         }\n\t\t *     }\n\t\t * });\n\t\t *\n\t\t * // Creates a singleton/static class\n\t\t * tinymce.create('static tinymce.somepackage.SomeSingletonClass', {\n\t\t *     method : function() {\n\t\t *         // Some method\n\t\t *     }\n\t\t * });\n\t\t */\n\t\tcreate : function(s, p, root) {\n\t\t\tvar t = this, sp, ns, cn, scn, c, de = 0;\n\n\t\t\t// Parse : <prefix> <class>:<super class>\n\t\t\ts = /^((static) )?([\\w.]+)(:([\\w.]+))?/.exec(s);\n\t\t\tcn = s[3].match(/(^|\\.)(\\w+)$/i)[2]; // Class name\n\n\t\t\t// Create namespace for new class\n\t\t\tns = t.createNS(s[3].replace(/\\.\\w+$/, ''), root);\n\n\t\t\t// Class already exists\n\t\t\tif (ns[cn])\n\t\t\t\treturn;\n\n\t\t\t// Make pure static class\n\t\t\tif (s[2] == 'static') {\n\t\t\t\tns[cn] = p;\n\n\t\t\t\tif (this.onCreate)\n\t\t\t\t\tthis.onCreate(s[2], s[3], ns[cn]);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Create default constructor\n\t\t\tif (!p[cn]) {\n\t\t\t\tp[cn] = function() {};\n\t\t\t\tde = 1;\n\t\t\t}\n\n\t\t\t// Add constructor and methods\n\t\t\tns[cn] = p[cn];\n\t\t\tt.extend(ns[cn].prototype, p);\n\n\t\t\t// Extend\n\t\t\tif (s[5]) {\n\t\t\t\tsp = t.resolve(s[5]).prototype;\n\t\t\t\tscn = s[5].match(/\\.(\\w+)$/i)[1]; // Class name\n\n\t\t\t\t// Extend constructor\n\t\t\t\tc = ns[cn];\n\t\t\t\tif (de) {\n\t\t\t\t\t// Add passthrough constructor\n\t\t\t\t\tns[cn] = function() {\n\t\t\t\t\t\treturn sp[scn].apply(this, arguments);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\t// Add inherit constructor\n\t\t\t\t\tns[cn] = function() {\n\t\t\t\t\t\tthis.parent = sp[scn];\n\t\t\t\t\t\treturn c.apply(this, arguments);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tns[cn].prototype[cn] = ns[cn];\n\n\t\t\t\t// Add super methods\n\t\t\t\tt.each(sp, function(f, n) {\n\t\t\t\t\tns[cn].prototype[n] = sp[n];\n\t\t\t\t});\n\n\t\t\t\t// Add overridden methods\n\t\t\t\tt.each(p, function(f, n) {\n\t\t\t\t\t// Extend methods if needed\n\t\t\t\t\tif (sp[n]) {\n\t\t\t\t\t\tns[cn].prototype[n] = function() {\n\t\t\t\t\t\t\tthis.parent = sp[n];\n\t\t\t\t\t\t\treturn f.apply(this, arguments);\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (n != cn)\n\t\t\t\t\t\t\tns[cn].prototype[n] = f;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add static methods\n\t\t\tt.each(p['static'], function(f, n) {\n\t\t\t\tns[cn][n] = f;\n\t\t\t});\n\n\t\t\tif (this.onCreate)\n\t\t\t\tthis.onCreate(s[2], s[3], ns[cn].prototype);\n\t\t},\n\n\t\t/**\n\t\t * Executed the specified function for each item in a object tree.\n\t\t *\n\t\t * @method walk\n\t\t * @param {Object} o Object tree to walk though.\n\t\t * @param {function} f Function to call for each item.\n\t\t * @param {String} n Optional name of collection inside the objects to walk for example childNodes.\n\t\t * @param {String} s Optional scope to execute the function in.\n\t\t */\n\t\twalk : function(o, f, n, s) {\n\t\t\ts = s || this;\n\n\t\t\tif (o) {\n\t\t\t\tif (n)\n\t\t\t\t\to = o[n];\n\n\t\t\t\ttinymce.each(o, function(o, i) {\n\t\t\t\t\tif (f.call(s, o, i, n) === false)\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\ttinymce.walk(o, f, n, s);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Creates a namespace on a specific object.\n\t\t *\n\t\t * @method createNS\n\t\t * @param {String} n Namespace to create for example a.b.c.d.\n\t\t * @param {Object} o Optional object to add namespace to, defaults to window.\n\t\t * @return {Object} New namespace object the last item in path.\n\t\t * @example\n\t\t * // Create some namespace\n\t\t * tinymce.createNS('tinymce.somepackage.subpackage');\n\t\t *\n\t\t * // Add a singleton\n\t\t * var tinymce.somepackage.subpackage.SomeSingleton = {\n\t\t *     method : function() {\n\t\t *         // Some method\n\t\t *     }\n\t\t * };\n\t\t */\n\t\tcreateNS : function(n, o) {\n\t\t\tvar i, v;\n\n\t\t\to = o || win;\n\n\t\t\tn = n.split('.');\n\t\t\tfor (i=0; i<n.length; i++) {\n\t\t\t\tv = n[i];\n\n\t\t\t\tif (!o[v])\n\t\t\t\t\to[v] = {};\n\n\t\t\t\to = o[v];\n\t\t\t}\n\n\t\t\treturn o;\n\t\t},\n\n\t\t/**\n\t\t * Resolves a string and returns the object from a specific structure.\n\t\t *\n\t\t * @method resolve\n\t\t * @param {String} n Path to resolve for example a.b.c.d.\n\t\t * @param {Object} o Optional object to search though, defaults to window.\n\t\t * @return {Object} Last object in path or null if it couldn't be resolved.\n\t\t * @example\n\t\t * // Resolve a path into an object reference\n\t\t * var obj = tinymce.resolve('a.b.c.d');\n\t\t */\n\t\tresolve : function(n, o) {\n\t\t\tvar i, l;\n\n\t\t\to = o || win;\n\n\t\t\tn = n.split('.');\n\t\t\tfor (i = 0, l = n.length; i < l; i++) {\n\t\t\t\to = o[n[i]];\n\n\t\t\t\tif (!o)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn o;\n\t\t},\n\n\t\t/**\n\t\t * Adds an unload handler to the document. This handler will be executed when the document gets unloaded.\n\t\t * This method is useful for dealing with browser memory leaks where it might be vital to remove DOM references etc.\n\t\t *\n\t\t * @method addUnload\n\t\t * @param {function} f Function to execute before the document gets unloaded.\n\t\t * @param {Object} s Optional scope to execute the function in.\n\t\t * @return {function} Returns the specified unload handler function.\n\t\t * @example\n\t\t * // Fixes a leak with a DOM element that was palces in the someObject\n\t\t * tinymce.addUnload(function() {\n\t\t *     // Null DOM element to reduce IE memory leak\n\t\t *     someObject.someElement = null;\n\t\t * });\n\t\t */\n\t\taddUnload : function(f, s) {\n\t\t\tvar t = this;\n\n\t\t\tf = {func : f, scope : s || this};\n\n\t\t\tif (!t.unloads) {\n\t\t\t\tfunction unload() {\n\t\t\t\t\tvar li = t.unloads, o, n;\n\n\t\t\t\t\tif (li) {\n\t\t\t\t\t\t// Call unload handlers\n\t\t\t\t\t\tfor (n in li) {\n\t\t\t\t\t\t\to = li[n];\n\n\t\t\t\t\t\t\tif (o && o.func)\n\t\t\t\t\t\t\t\to.func.call(o.scope, 1); // Send in one arg to distinct unload and user destroy\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Detach unload function\n\t\t\t\t\t\tif (win.detachEvent) {\n\t\t\t\t\t\t\twin.detachEvent('onbeforeunload', fakeUnload);\n\t\t\t\t\t\t\twin.detachEvent('onunload', unload);\n\t\t\t\t\t\t} else if (win.removeEventListener)\n\t\t\t\t\t\t\twin.removeEventListener('unload', unload, false);\n\n\t\t\t\t\t\t// Destroy references\n\t\t\t\t\t\tt.unloads = o = li = w = unload = 0;\n\n\t\t\t\t\t\t// Run garbarge collector on IE\n\t\t\t\t\t\tif (win.CollectGarbage)\n\t\t\t\t\t\t\tCollectGarbage();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tfunction fakeUnload() {\n\t\t\t\t\tvar d = document;\n\n\t\t\t\t\t// Is there things still loading, then do some magic\n\t\t\t\t\tif (d.readyState == 'interactive') {\n\t\t\t\t\t\tfunction stop() {\n\t\t\t\t\t\t\t// Prevent memory leak\n\t\t\t\t\t\t\td.detachEvent('onstop', stop);\n\n\t\t\t\t\t\t\t// Call unload handler\n\t\t\t\t\t\t\tif (unload)\n\t\t\t\t\t\t\t\tunload();\n\n\t\t\t\t\t\t\td = 0;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Fire unload when the currently loading page is stopped\n\t\t\t\t\t\tif (d)\n\t\t\t\t\t\t\td.attachEvent('onstop', stop);\n\n\t\t\t\t\t\t// Remove onstop listener after a while to prevent the unload function\n\t\t\t\t\t\t// to execute if the user presses cancel in an onbeforeunload\n\t\t\t\t\t\t// confirm dialog and then presses the browser stop button\n\t\t\t\t\t\twin.setTimeout(function() {\n\t\t\t\t\t\t\tif (d)\n\t\t\t\t\t\t\t\td.detachEvent('onstop', stop);\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Attach unload handler\n\t\t\t\tif (win.attachEvent) {\n\t\t\t\t\twin.attachEvent('onunload', unload);\n\t\t\t\t\twin.attachEvent('onbeforeunload', fakeUnload);\n\t\t\t\t} else if (win.addEventListener)\n\t\t\t\t\twin.addEventListener('unload', unload, false);\n\n\t\t\t\t// Setup initial unload handler array\n\t\t\t\tt.unloads = [f];\n\t\t\t} else\n\t\t\t\tt.unloads.push(f);\n\n\t\t\treturn f;\n\t\t},\n\n\t\t/**\n\t\t * Removes the specified function form the unload handler list.\n\t\t *\n\t\t * @method removeUnload\n\t\t * @param {function} f Function to remove from unload handler list.\n\t\t * @return {function} Removed function name or null if it wasn't found.\n\t\t */\n\t\tremoveUnload : function(f) {\n\t\t\tvar u = this.unloads, r = null;\n\n\t\t\ttinymce.each(u, function(o, i) {\n\t\t\t\tif (o && o.func == f) {\n\t\t\t\t\tu.splice(i, 1);\n\t\t\t\t\tr = f;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn r;\n\t\t},\n\n\t\t/**\n\t\t * Splits a string but removes the whitespace before and after each value.\n\t\t *\n\t\t * @method explode\n\t\t * @param {string} s String to split.\n\t\t * @param {string} d Delimiter to split by.\n\t\t * @example\n\t\t * // Split a string into an array with a,b,c\n\t\t * var arr = tinymce.explode('a, b,   c');\n\t\t */\n\t\texplode : function(s, d) {\n\t\t\treturn s ? tinymce.map(s.split(d || ','), tinymce.trim) : s;\n\t\t},\n\n\t\t_addVer : function(u) {\n\t\t\tvar v;\n\n\t\t\tif (!this.query)\n\t\t\t\treturn u;\n\n\t\t\tv = (u.indexOf('?') == -1 ? '?' : '&') + this.query;\n\n\t\t\tif (u.indexOf('#') == -1)\n\t\t\t\treturn u + v;\n\n\t\t\treturn u.replace('#', v + '#');\n\t\t},\n\n\t\t// Fix function for IE 9 where regexps isn't working correctly\n\t\t// Todo: remove me once MS fixes the bug\n\t\t_replace : function(find, replace, str) {\n\t\t\t// On IE9 we have to fake $x replacement\n\t\t\tif (isRegExpBroken) {\n\t\t\t\treturn str.replace(find, function() {\n\t\t\t\t\tvar val = replace, args = arguments, i;\n\n\t\t\t\t\tfor (i = 0; i < args.length - 2; i++) {\n\t\t\t\t\t\tif (args[i] === undefined) {\n\t\t\t\t\t\t\tval = val.replace(new RegExp('\\\\$' + i, 'g'), '');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tval = val.replace(new RegExp('\\\\$' + i, 'g'), args[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn val;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn str.replace(find, replace);\n\t\t}\n\n\t\t/**#@-*/\n\t};\n\n\t// Initialize the API\n\ttinymce._init();\n\n\t// Expose tinymce namespace to the global namespace (window)\n\twin.tinymce = win.tinyMCE = tinymce;\n\n\t// Describe the different namespaces\n\n\t/**\n\t * Root level namespace this contains classes directly releated to the TinyMCE editor.\n\t *\n\t * @namespace tinymce\n\t */\n\n\t/**\n\t * Contains classes for handling the browsers DOM.\n\t *\n\t * @namespace tinymce.dom\n\t */\n\n\t/**\n\t * Contains html parser and serializer logic.\n\t *\n\t * @namespace tinymce.html\n\t */\n\n\t/**\n\t * Contains the different UI types such as buttons, listboxes etc.\n\t *\n\t * @namespace tinymce.ui\n\t */\n\n\t/**\n\t * Contains various utility classes such as json parser, cookies etc.\n\t *\n\t * @namespace tinymce.util\n\t */\n\n\t/**\n\t * Contains plugin classes.\n\t *\n\t * @namespace tinymce.plugins\n\t */\n})(window);\n"}
}});
