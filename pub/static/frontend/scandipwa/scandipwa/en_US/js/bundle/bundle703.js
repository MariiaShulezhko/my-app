require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/classes/Popup.js":"/**\n * Popup.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n// Some global instances\nvar tinymce = null, tinyMCEPopup, tinyMCE;\n\n/**\n * TinyMCE popup/dialog helper class. This gives you easy access to the\n * parent editor instance and a bunch of other things. It's higly recommended\n * that you load this script into your dialogs.\n *\n * @static\n * @class tinyMCEPopup\n */\ntinyMCEPopup = {\n\t/**\n\t * Initializes the popup this will be called automatically.\n\t *\n\t * @method init\n\t */\n\tinit : function() {\n\t\tvar t = this, w, ti;\n\n\t\t// Find window & API\n\t\tw = t.getWin();\n\t\ttinymce = w.tinymce;\n\t\ttinyMCE = w.tinyMCE;\n\t\tt.editor = tinymce.EditorManager.activeEditor;\n\t\tt.params = t.editor.windowManager.params;\n\t\tt.features = t.editor.windowManager.features;\n\n\t\t// Setup local DOM\n\t\tt.dom = t.editor.windowManager.createInstance('tinymce.dom.DOMUtils', document);\n\n\t\t// Enables you to skip loading the default css\n\t\tif (t.features.popup_css !== false)\n\t\t\tt.dom.loadCSS(t.features.popup_css || t.editor.settings.popup_css);\n\n\t\t// Setup on init listeners\n\t\tt.listeners = [];\n\n\t\t/**\n\t\t * Fires when the popup is initialized.\n\t\t *\n\t\t * @event onInit\n\t\t * @param {tinymce.Editor} editor Editor instance.\n\t\t * @example\n\t\t * // Alerts the selected contents when the dialog is loaded\n\t\t * tinyMCEPopup.onInit.add(function(ed) {\n\t\t *     alert(ed.selection.getContent());\n\t\t * });\n\t\t *\n\t\t * // Executes the init method on page load in some object using the SomeObject scope\n\t\t * tinyMCEPopup.onInit.add(SomeObject.init, SomeObject);\n\t\t */\n\t\tt.onInit = {\n\t\t\tadd : function(f, s) {\n\t\t\t\tt.listeners.push({func : f, scope : s});\n\t\t\t}\n\t\t};\n\n\t\tt.isWindow = !t.getWindowArg('mce_inline');\n\t\tt.id = t.getWindowArg('mce_window_id');\n\t\tt.editor.windowManager.onOpen.dispatch(t.editor.windowManager, window);\n\t},\n\n\t/**\n\t * Returns the reference to the parent window that opened the dialog.\n\t *\n\t * @method getWin\n\t * @return {Window} Reference to the parent window that opened the dialog.\n\t */\n\tgetWin : function() {\n\t\t// Added frameElement check to fix bug: #2817583\n\t\treturn (!window.frameElement && window.dialogArguments) || opener || parent || top;\n\t},\n\n\t/**\n\t * Returns a window argument/parameter by name.\n\t *\n\t * @method getWindowArg\n\t * @param {String} n Name of the window argument to retrieve.\n\t * @param {String} dv Optional default value to return.\n\t * @return {String} Argument value or default value if it wasn't found.\n\t */\n\tgetWindowArg : function(n, dv) {\n\t\tvar v = this.params[n];\n\n\t\treturn tinymce.is(v) ? v : dv;\n\t},\n\n\t/**\n\t * Returns a editor parameter/config option value.\n\t *\n\t * @method getParam\n\t * @param {String} n Name of the editor config option to retrieve.\n\t * @param {String} dv Optional default value to return.\n\t * @return {String} Parameter value or default value if it wasn't found.\n\t */\n\tgetParam : function(n, dv) {\n\t\treturn this.editor.getParam(n, dv);\n\t},\n\n\t/**\n\t * Returns a language item by key.\n\t *\n\t * @method getLang\n\t * @param {String} n Language item like mydialog.something.\n\t * @param {String} dv Optional default value to return.\n\t * @return {String} Language value for the item like \"my string\" or the default value if it wasn't found.\n\t */\n\tgetLang : function(n, dv) {\n\t\treturn this.editor.getLang(n, dv);\n\t},\n\n\t/**\n\t * Executed a command on editor that opened the dialog/popup.\n\t *\n\t * @method execCommand\n\t * @param {String} cmd Command to execute.\n\t * @param {Boolean} ui Optional boolean value if the UI for the command should be presented or not.\n\t * @param {Object} val Optional value to pass with the comman like an URL.\n\t * @param {Object} a Optional arguments object.\n\t */\n\texecCommand : function(cmd, ui, val, a) {\n\t\ta = a || {};\n\t\ta.skip_focus = 1;\n\n\t\tthis.restoreSelection();\n\t\treturn this.editor.execCommand(cmd, ui, val, a);\n\t},\n\n\t/**\n\t * Resizes the dialog to the inner size of the window. This is needed since various browsers\n\t * have different border sizes on windows.\n\t *\n\t * @method resizeToInnerSize\n\t */\n\tresizeToInnerSize : function() {\n\t\tvar t = this;\n\n\t\t// Detach it to workaround a Chrome specific bug\n\t\t// https://sourceforge.net/tracker/?func=detail&atid=635682&aid=2926339&group_id=103281\n\t\tsetTimeout(function() {\n\t\t\tvar vp = t.dom.getViewPort(window);\n\n\t\t\tt.editor.windowManager.resizeBy(\n\t\t\t\tt.getWindowArg('mce_width') - vp.w,\n\t\t\t\tt.getWindowArg('mce_height') - vp.h,\n\t\t\t\tt.id || window\n\t\t\t);\n\t\t}, 10);\n\t},\n\n\t/**\n\t * Will executed the specified string when the page has been loaded. This function\n\t * was added for compatibility with the 2.x branch.\n\t *\n\t * @method executeOnLoad\n\t * @param {String} s String to evalutate on init.\n\t */\n\texecuteOnLoad : function(s) {\n\t\tthis.onInit.add(function() {\n\t\t\teval(s);\n\t\t});\n\t},\n\n\t/**\n\t * Stores the current editor selection for later restoration. This can be useful since some browsers\n\t * looses it's selection if a control element is selected/focused inside the dialogs.\n\t *\n\t * @method storeSelection\n\t */\n\tstoreSelection : function() {\n\t\tthis.editor.windowManager.bookmark = tinyMCEPopup.editor.selection.getBookmark(1);\n\t},\n\n\t/**\n\t * Restores any stored selection. This can be useful since some browsers\n\t * looses it's selection if a control element is selected/focused inside the dialogs.\n\t *\n\t * @method restoreSelection\n\t */\n\trestoreSelection : function() {\n\t\tvar t = tinyMCEPopup;\n\n\t\tif (!t.isWindow && tinymce.isIE)\n\t\t\tt.editor.selection.moveToBookmark(t.editor.windowManager.bookmark);\n\t},\n\n\t/**\n\t * Loads a specific dialog language pack. If you pass in plugin_url as a arugment\n\t * when you open the window it will load the <plugin url>/langs/<code>_dlg.js lang pack file.\n\t *\n\t * @method requireLangPack\n\t */\n\trequireLangPack : function() {\n\t\tvar t = this, u = t.getWindowArg('plugin_url') || t.getWindowArg('theme_url');\n\n\t\tif (u && t.editor.settings.language && t.features.translate_i18n !== false && t.editor.settings.language_load !== false) {\n\t\t\tu += '/langs/' + t.editor.settings.language + '_dlg.js';\n\n\t\t\tif (!tinymce.ScriptLoader.isDone(u)) {\n\t\t\t\tdocument.write('<script type=\"text/javascript\" src=\"' + tinymce._addVer(u) + '\"></script>');\n\t\t\t\ttinymce.ScriptLoader.markDone(u);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Executes a color picker on the specified element id. When the user\n\t * then selects a color it will be set as the value of the specified element.\n\t *\n\t * @method pickColor\n\t * @param {DOMEvent} e DOM event object.\n\t * @param {string} element_id Element id to be filled with the color value from the picker.\n\t */\n\tpickColor : function(e, element_id) {\n\t\tthis.execCommand('mceColorPicker', true, {\n\t\t\tcolor : document.getElementById(element_id).value,\n\t\t\tfunc : function(c) {\n\t\t\t\tdocument.getElementById(element_id).value = c;\n\n\t\t\t\ttry {\n\t\t\t\t\tdocument.getElementById(element_id).onchange();\n\t\t\t\t} catch (ex) {\n\t\t\t\t\t// Try fire event, ignore errors\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Opens a filebrowser/imagebrowser this will set the output value from\n\t * the browser as a value on the specified element.\n\t *\n\t * @method openBrowser\n\t * @param {string} element_id Id of the element to set value in.\n\t * @param {string} type Type of browser to open image/file/flash.\n\t * @param {string} option Option name to get the file_broswer_callback function name from.\n\t */\n\topenBrowser : function(element_id, type, option) {\n\t\ttinyMCEPopup.restoreSelection();\n\t\tthis.editor.execCallback('file_browser_callback', element_id, document.getElementById(element_id).value, type, window);\n\t},\n\n\t/**\n\t * Creates a confirm dialog. Please don't use the blocking behavior of this\n\t * native version use the callback method instead then it can be extended.\n\t *\n\t * @method confirm\n\t * @param {String} t Title for the new confirm dialog.\n\t * @param {function} cb Callback function to be executed after the user has selected ok or cancel.\n\t * @param {Object} s Optional scope to execute the callback in.\n\t */\n\tconfirm : function(t, cb, s) {\n\t\tthis.editor.windowManager.confirm(t, cb, s, window);\n\t},\n\n\t/**\n\t * Creates a alert dialog. Please don't use the blocking behavior of this\n\t * native version use the callback method instead then it can be extended.\n\t *\n\t * @method alert\n\t * @param {String} t Title for the new alert dialog.\n\t * @param {function} cb Callback function to be executed after the user has selected ok.\n\t * @param {Object} s Optional scope to execute the callback in.\n\t */\n\talert : function(tx, cb, s) {\n\t\tthis.editor.windowManager.alert(tx, cb, s, window);\n\t},\n\n\t/**\n\t * Closes the current window.\n\t *\n\t * @method close\n\t */\n\tclose : function() {\n\t\tvar t = this;\n\n\t\t// To avoid domain relaxing issue in Opera\n\t\tfunction close() {\n\t\t\tt.editor.windowManager.close(window);\n\t\t\ttinymce = tinyMCE = t.editor = t.params = t.dom = t.dom.doc = null; // Cleanup\n\t\t};\n\n\t\tif (tinymce.isOpera)\n\t\t\tt.getWin().setTimeout(close, 0);\n\t\telse\n\t\t\tclose();\n\t},\n\n\t// Internal functions\n\n\t_restoreSelection : function() {\n\t\tvar e = window.event.srcElement;\n\n\t\tif (e.nodeName == 'INPUT' && (e.type == 'submit' || e.type == 'button'))\n\t\t\ttinyMCEPopup.restoreSelection();\n\t},\n\n/*\t_restoreSelection : function() {\n\t\tvar e = window.event.srcElement;\n\n\t\t// If user focus a non text input or textarea\n\t\tif ((e.nodeName != 'INPUT' && e.nodeName != 'TEXTAREA') || e.type != 'text')\n\t\t\ttinyMCEPopup.restoreSelection();\n\t},*/\n\n\t_onDOMLoaded : function() {\n\t\tvar t = tinyMCEPopup, ti = document.title, bm, h, nv;\n\n\t\tif (t.domLoaded)\n\t\t\treturn;\n\n\t\tt.domLoaded = 1;\n\n\t\t// Translate page\n\t\tif (t.features.translate_i18n !== false) {\n\t\t\th = document.body.innerHTML;\n\n\t\t\t// Replace a=x with a=\"x\" in IE\n\t\t\tif (tinymce.isIE)\n\t\t\t\th = h.replace(/ (value|title|alt)=([^\"][^\\s>]+)/gi, ' $1=\"$2\"')\n\n\t\t\tdocument.dir = t.editor.getParam('directionality','');\n\n\t\t\tif ((nv = t.editor.translate(h)) && nv != h)\n\t\t\t\tdocument.body.innerHTML = nv;\n\n\t\t\tif ((nv = t.editor.translate(ti)) && nv != ti)\n\t\t\t\tdocument.title = ti = nv;\n\t\t}\n\n\t\tif (!t.editor.getParam('browser_preferred_colors', false) || !t.isWindow)\n\t\t\tt.dom.addClass(document.body, 'forceColors');\n\n\t\tdocument.body.style.display = '';\n\n\t\t// Restore selection in IE when focus is placed on a non textarea or input element of the type text\n\t\tif (tinymce.isIE) {\n\t\t\tdocument.attachEvent('onmouseup', tinyMCEPopup._restoreSelection);\n\n\t\t\t// Add base target element for it since it would fail with modal dialogs\n\t\t\tt.dom.add(t.dom.select('head')[0], 'base', {target : '_self'});\n\t\t}\n\n\t\tt.restoreSelection();\n\t\tt.resizeToInnerSize();\n\n\t\t// Set inline title\n\t\tif (!t.isWindow)\n\t\t\tt.editor.windowManager.setTitle(window, ti);\n\t\telse\n\t\t\twindow.focus();\n\n\t\tif (!tinymce.isIE && !t.isWindow) {\n\t\t\ttinymce.dom.Event._add(document, 'focus', function() {\n\t\t\t\tt.editor.windowManager.focus(t.id);\n\t\t\t});\n\t\t}\n\n\t\t// Patch for accessibility\n\t\ttinymce.each(t.dom.select('select'), function(e) {\n\t\t\te.onkeydown = tinyMCEPopup._accessHandler;\n\t\t});\n\n\t\t// Call onInit\n\t\t// Init must be called before focus so the selection won't get lost by the focus call\n\t\ttinymce.each(t.listeners, function(o) {\n\t\t\to.func.call(o.scope, t.editor);\n\t\t});\n\n\t\t// Move focus to window\n\t\tif (t.getWindowArg('mce_auto_focus', true)) {\n\t\t\twindow.focus();\n\n\t\t\t// Focus element with mceFocus class\n\t\t\ttinymce.each(document.forms, function(f) {\n\t\t\t\ttinymce.each(f.elements, function(e) {\n\t\t\t\t\tif (t.dom.hasClass(e, 'mceFocus') && !e.disabled) {\n\t\t\t\t\t\te.focus();\n\t\t\t\t\t\treturn false; // Break loop\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tdocument.onkeyup = tinyMCEPopup._closeWinKeyHandler;\n\t},\n\n\t_accessHandler : function(e) {\n\t\te = e || window.event;\n\n\t\tif (e.keyCode == 13 || e.keyCode == 32) {\n\t\t\te = e.target || e.srcElement;\n\n\t\t\tif (e.onchange)\n\t\t\t\te.onchange();\n\n\t\t\treturn tinymce.dom.Event.cancel(e);\n\t\t}\n\t},\n\n\t_closeWinKeyHandler : function(e) {\n\t\te = e || window.event;\n\n\t\tif (e.keyCode == 27)\n\t\t\ttinyMCEPopup.close();\n\t},\n\n\t_wait : function() {\n\t\t// Use IE method\n\t\tif (document.attachEvent) {\n\t\t\tdocument.attachEvent(\"onreadystatechange\", function() {\n\t\t\t\tif (document.readyState === \"complete\") {\n\t\t\t\t\tdocument.detachEvent(\"onreadystatechange\", arguments.callee);\n\t\t\t\t\ttinyMCEPopup._onDOMLoaded();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (document.documentElement.doScroll && window == window.top) {\n\t\t\t\t(function() {\n\t\t\t\t\tif (tinyMCEPopup.domLoaded)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// If IE is used, use the trick by Diego Perini licensed under MIT by request to the author.\n\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/\n\t\t\t\t\t\tdocument.documentElement.doScroll(\"left\");\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tsetTimeout(arguments.callee, 0);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttinyMCEPopup._onDOMLoaded();\n\t\t\t\t})();\n\t\t\t}\n\n\t\t\tdocument.attachEvent('onload', tinyMCEPopup._onDOMLoaded);\n\t\t} else if (document.addEventListener) {\n\t\t\twindow.addEventListener('DOMContentLoaded', tinyMCEPopup._onDOMLoaded, false);\n\t\t\twindow.addEventListener('load', tinyMCEPopup._onDOMLoaded, false);\n\t\t}\n\t}\n};\n\ntinyMCEPopup.init();\ntinyMCEPopup._wait(); // Wait for DOM Content Loaded\n"}
}});
