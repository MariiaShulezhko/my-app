require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/classes/WindowManager.js":"/**\n * WindowManager.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n(function(tinymce) {\n\tvar Dispatcher = tinymce.util.Dispatcher, each = tinymce.each, isIE = tinymce.isIE, isOpera = tinymce.isOpera;\n\n\t/**\n\t * This class handles the creation of native windows and dialogs. This class can be extended to provide for example inline dialogs.\n\t *\n\t * @class tinymce.WindowManager\n\t * @example\n\t * // Opens a new dialog with the file.htm file and the size 320x240\n\t * // It also adds a custom parameter this can be retrieved by using tinyMCEPopup.getWindowArg inside the dialog.\n\t * tinyMCE.activeEditor.windowManager.open({\n\t *    url : 'file.htm',\n\t *    width : 320,\n\t *    height : 240\n\t * }, {\n\t *    custom_param : 1\n\t * });\n\t *\n\t * // Displays an alert box using the active editors window manager instance\n\t * tinyMCE.activeEditor.windowManager.alert('Hello world!');\n\t *\n\t * // Displays an confirm box and an alert message will be displayed depending on what you choose in the confirm\n\t * tinyMCE.activeEditor.windowManager.confirm(\"Do you want to do something\", function(s) {\n\t *    if (s)\n\t *       tinyMCE.activeEditor.windowManager.alert(\"Ok\");\n\t *    else\n\t *       tinyMCE.activeEditor.windowManager.alert(\"Cancel\");\n\t * });\n\t */\n\ttinymce.create('tinymce.WindowManager', {\n\t\t/**\n\t\t * Constructs a new window manager instance.\n\t\t *\n\t\t * @constructor\n\t\t * @method WindowManager\n\t\t * @param {tinymce.Editor} ed Editor instance that the windows are bound to.\n\t\t */\n\t\tWindowManager : function(ed) {\n\t\t\tvar t = this;\n\n\t\t\tt.editor = ed;\n\t\t\tt.onOpen = new Dispatcher(t);\n\t\t\tt.onClose = new Dispatcher(t);\n\t\t\tt.params = {};\n\t\t\tt.features = {};\n\t\t},\n\n\t\t/**\n\t\t * Opens a new window.\n\t\t *\n\t\t * @method open\n\t\t * @param {Object} s Optional name/value settings collection contains things like width/height/url etc.\n\t\t * @option {String} title Window title.\n\t\t * @option {String} file URL of the file to open in the window.\n\t\t * @option {Number} width Width in pixels.\n\t\t * @option {Number} height Height in pixels.\n\t\t * @option {Boolean} resizable Specifies whether the popup window is resizable or not.\n\t\t * @option {Boolean} maximizable Specifies whether the popup window has a \"maximize\" button and can get maximized or not.\n\t\t * @option {Boolean} inline Specifies whether to display in-line (set to 1 or true for in-line display; requires inlinepopups plugin).\n\t\t * @option {String/Boolean} popup_css Optional CSS to use in the popup. Set to false to remove the default one.\n\t\t * @option {Boolean} translate_i18n Specifies whether translation should occur or not of i18 key strings. Default is true.\n\t\t * @option {String/bool} close_previous Specifies whether a previously opened popup window is to be closed or not (like when calling the file browser window over the advlink popup).\n\t\t * @option {String/bool} scrollbars Specifies whether the popup window can have scrollbars if required (i.e. content larger than the popup size specified).\n\t\t * @param {Object} p Optional parameters/arguments collection can be used by the dialogs to retrieve custom parameters.\n\t\t * @option {String} plugin_url url to plugin if opening plugin window that calls tinyMCEPopup.requireLangPack() and needs access to the plugin language js files\n\t\t */\n\t\topen : function(s, p) {\n\t\t\tvar t = this, f = '', x, y, mo = t.editor.settings.dialog_type == 'modal', w, sw, sh, vp = tinymce.DOM.getViewPort(), u;\n\n\t\t\t// Default some options\n\t\t\ts = s || {};\n\t\t\tp = p || {};\n\t\t\tsw = isOpera ? vp.w : screen.width; // Opera uses windows inside the Opera window\n\t\t\tsh = isOpera ? vp.h : screen.height;\n\t\t\ts.name = s.name || 'mc_' + new Date().getTime();\n\t\t\ts.width = parseInt(s.width || 320);\n\t\t\ts.height = parseInt(s.height || 240);\n\t\t\ts.resizable = true;\n\t\t\ts.left = s.left || parseInt(sw / 2.0) - (s.width / 2.0);\n\t\t\ts.top = s.top || parseInt(sh / 2.0) - (s.height / 2.0);\n\t\t\tp.inline = false;\n\t\t\tp.mce_width = s.width;\n\t\t\tp.mce_height = s.height;\n\t\t\tp.mce_auto_focus = s.auto_focus;\n\n\t\t\tif (mo) {\n\t\t\t\tif (isIE) {\n\t\t\t\t\ts.center = true;\n\t\t\t\t\ts.help = false;\n\t\t\t\t\ts.dialogWidth = s.width + 'px';\n\t\t\t\t\ts.dialogHeight = s.height + 'px';\n\t\t\t\t\ts.scroll = s.scrollbars || false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Build features string\n\t\t\teach(s, function(v, k) {\n\t\t\t\tif (tinymce.is(v, 'boolean'))\n\t\t\t\t\tv = v ? 'yes' : 'no';\n\n\t\t\t\tif (!/^(name|url)$/.test(k)) {\n\t\t\t\t\tif (isIE && mo)\n\t\t\t\t\t\tf += (f ? ';' : '') + k + ':' + v;\n\t\t\t\t\telse\n\t\t\t\t\t\tf += (f ? ',' : '') + k + '=' + v;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tt.features = s;\n\t\t\tt.params = p;\n\t\t\tt.onOpen.dispatch(t, s, p);\n\n\t\t\tu = s.url || s.file;\n\t\t\tu = tinymce._addVer(u);\n\n\t\t\ttry {\n\t\t\t\tif (isIE && mo) {\n\t\t\t\t\tw = 1;\n\t\t\t\t\twindow.showModalDialog(u, window, f);\n\t\t\t\t} else\n\t\t\t\t\tw = window.open(u, s.name, f);\n\t\t\t} catch (ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\n\t\t\tif (!w)\n\t\t\t\talert(t.editor.getLang('popup_blocked'));\n\t\t},\n\n\t\t/**\n\t\t * Closes the specified window. This will also dispatch out a onClose event.\n\t\t *\n\t\t * @method close\n\t\t * @param {Window} w Native window object to close.\n\t\t */\n\t\tclose : function(w) {\n\t\t\tw.close();\n\t\t\tthis.onClose.dispatch(this);\n\t\t},\n\n\t\t/**\n\t\t * Creates a instance of a class. This method was needed since IE can't create instances\n\t\t * of classes from a parent window due to some reference problem. Any arguments passed after the class name\n\t\t * will be passed as arguments to the constructor.\n\t\t *\n\t\t * @method createInstance\n\t\t * @param {String} cl Class name to create an instance of.\n\t\t * @return {Object} Instance of the specified class.\n\t\t * @example\n\t\t * var uri = tinyMCEPopup.editor.windowManager.createInstance('tinymce.util.URI', 'http://www.somesite.com');\n\t\t * alert(uri.getURI());\n\t\t */\n\t\tcreateInstance : function(cl, a, b, c, d, e) {\n\t\t\tvar f = tinymce.resolve(cl);\n\n\t\t\treturn new f(a, b, c, d, e);\n\t\t},\n\n\t\t/**\n\t\t * Creates a confirm dialog. Please don't use the blocking behavior of this\n\t\t * native version use the callback method instead then it can be extended.\n\t\t *\n\t\t * @method confirm\n\t\t * @param {String} t Title for the new confirm dialog.\n\t\t * @param {function} cb Callback function to be executed after the user has selected ok or cancel.\n\t\t * @param {Object} s Optional scope to execute the callback in.\n\t\t * @example\n\t\t * // Displays an confirm box and an alert message will be displayed depending on what you choose in the confirm\n\t\t * tinyMCE.activeEditor.windowManager.confirm(\"Do you want to do something\", function(s) {\n\t\t *    if (s)\n\t\t *       tinyMCE.activeEditor.windowManager.alert(\"Ok\");\n\t\t *    else\n\t\t *       tinyMCE.activeEditor.windowManager.alert(\"Cancel\");\n\t\t * });\n\t\t */\n\t\tconfirm : function(t, cb, s, w) {\n\t\t\tw = w || window;\n\n\t\t\tcb.call(s || this, w.confirm(this._decode(this.editor.getLang(t, t))));\n\t\t},\n\n\t\t/**\n\t\t * Creates a alert dialog. Please don't use the blocking behavior of this\n\t\t * native version use the callback method instead then it can be extended.\n\t\t *\n\t\t * @method alert\n\t\t * @param {String} t Title for the new alert dialog.\n\t\t * @param {function} cb Callback function to be executed after the user has selected ok.\n\t\t * @param {Object} s Optional scope to execute the callback in.\n\t\t * @example\n\t\t * // Displays an alert box using the active editors window manager instance\n\t\t * tinyMCE.activeEditor.windowManager.alert('Hello world!');\n\t\t */\n\t\talert : function(tx, cb, s, w) {\n\t\t\tvar t = this;\n\n\t\t\tw = w || window;\n\t\t\tw.alert(t._decode(t.editor.getLang(tx, tx)));\n\n\t\t\tif (cb)\n\t\t\t\tcb.call(s || t);\n\t\t},\n\n\t\t/**\n\t\t * Resizes the specified window or id.\n\t\t *\n\t\t * @param {Number} dw Delta width.\n\t\t * @param {Number} dh Delta height.\n\t\t * @param {window/id} win Window if the dialog isn't inline. Id if the dialog is inline.\n\t\t */\n\t\tresizeBy : function(dw, dh, win) {\n\t\t\twin.resizeBy(dw, dh);\n\t\t},\n\n\t\t// Internal functions\n\n\t\t_decode : function(s) {\n\t\t\treturn tinymce.DOM.decode(s).replace(/\\\\n/g, '\\n');\n\t\t}\n\t});\n}(tinymce));\n"}
}});
