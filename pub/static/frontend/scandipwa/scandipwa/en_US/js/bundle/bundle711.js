require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/classes/Editor.js":"/**\n * Editor.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n(function(tinymce) {\n\t// Shorten these names\n\tvar DOM = tinymce.DOM, Event = tinymce.dom.Event, extend = tinymce.extend,\n\t\tDispatcher = tinymce.util.Dispatcher, each = tinymce.each, isGecko = tinymce.isGecko,\n\t\tisIE = tinymce.isIE, isWebKit = tinymce.isWebKit, is = tinymce.is,\n\t\tThemeManager = tinymce.ThemeManager, PluginManager = tinymce.PluginManager,\n\t\tinArray = tinymce.inArray, grep = tinymce.grep, explode = tinymce.explode;\n\n\t/**\n\t * This class contains the core logic for a TinyMCE editor.\n\t *\n\t * @class tinymce.Editor\n\t * @example\n\t * // Add a class to all paragraphs in the editor.\n\t * tinyMCE.activeEditor.dom.addClass(tinyMCE.activeEditor.dom.select('p'), 'someclass');\n\t *\n\t * // Gets the current editors selection as text\n\t * tinyMCE.activeEditor.selection.getContent({format : 'text'});\n\t *\n\t * // Creates a new editor instance\n\t * var ed = new tinymce.Editor('textareaid', {\n\t *     some_setting : 1\n\t * });\n\t *\n\t * // Select each item the user clicks on\n\t * ed.onClick.add(function(ed, e) {\n\t *     ed.selection.select(e.target);\n\t * });\n\t *\n\t * ed.render();\n\t */\n\ttinymce.create('tinymce.Editor', {\n\t\t/**\n\t\t * Constructs a editor instance by id.\n\t\t *\n\t\t * @constructor\n\t\t * @method Editor\n\t\t * @param {String} id Unique id for the editor.\n\t\t * @param {Object} s Optional settings string for the editor.\n\t\t * @author Moxiecode\n\t\t */\n\t\tEditor : function(id, s) {\n\t\t\tvar t = this;\n\n\t\t\t/**\n\t\t\t * Editor instance id, normally the same as the div/textarea that was replaced.\n\t\t\t *\n\t\t\t * @property id\n\t\t\t * @type String\n\t\t\t */\n\t\t\tt.id = t.editorId = id;\n\n\t\t\tt.execCommands = {};\n\t\t\tt.queryStateCommands = {};\n\t\t\tt.queryValueCommands = {};\n\n\t\t\t/**\n\t\t\t * State to force the editor to return false on a isDirty call.\n\t\t\t *\n\t\t\t * @property isNotDirty\n\t\t\t * @type Boolean\n\t\t\t * @example\n\t\t\t * function ajaxSave() {\n\t\t\t *     var ed = tinyMCE.get('elm1');\n\t\t\t *\n\t\t\t *     // Save contents using some XHR call\n\t\t\t *     alert(ed.getContent());\n\t\t\t *\n\t\t\t *     ed.isNotDirty = 1; // Force not dirty state\n\t\t\t * }\n\t\t\t */\n\t\t\tt.isNotDirty = false;\n\n\t\t\t/**\n\t\t\t * Name/Value object containting plugin instances.\n\t\t\t *\n\t\t\t * @property plugins\n\t\t\t * @type Object\n\t\t\t * @example\n\t\t\t * // Execute a method inside a plugin directly\n\t\t\t * tinyMCE.activeEditor.plugins.someplugin.someMethod();\n\t\t\t */\n\t\t\tt.plugins = {};\n\n\t\t\t// Add events to the editor\n\t\t\teach([\n\t\t\t\t/**\n\t\t\t\t * Fires before the initialization of the editor.\n\t\t\t\t *\n\t\t\t\t * @event onPreInit\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @see #onInit\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onPreInit event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onPreInit.add(function(ed) {\n\t\t\t\t *           console.debug('PreInit: ' + ed.id);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onPreInit',\n\n\t\t\t\t/**\n\t\t\t\t * Fires before the initialization of the editor.\n\t\t\t\t *\n\t\t\t\t * @event onBeforeRenderUI\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onBeforeRenderUI event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n \t\t\t\t *      ed.onBeforeRenderUI.add(function(ed, cm) {\n \t\t\t\t *          console.debug('Before render: ' + ed.id);\n \t\t\t\t *      });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onBeforeRenderUI',\n\n\t\t\t\t/**\n\t\t\t\t * Fires after the rendering has completed.\n\t\t\t\t *\n\t\t\t\t * @event onPostRender\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onPostRender event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onPostRender.add(function(ed, cm) {\n\t\t\t\t *           console.debug('After render: ' + ed.id);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onPostRender',\n\n\t\t\t\t/**\n\t\t\t\t * Fires after the initialization of the editor is done.\n\t\t\t\t *\n\t\t\t\t * @event onInit\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @see #onPreInit\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onInit event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onInit.add(function(ed) {\n\t\t\t\t *           console.debug('Editor is done: ' + ed.id);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onInit',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the editor instance is removed from page.\n\t\t\t\t *\n\t\t\t\t * @event onRemove\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onRemove event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onRemove.add(function(ed) {\n\t\t\t\t *           console.debug('Editor was removed: ' + ed.id);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onRemove',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the editor is activated.\n\t\t\t\t *\n\t\t\t\t * @event onActivate\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onActivate event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onActivate.add(function(ed) {\n\t\t\t\t *           console.debug('Editor was activated: ' + ed.id);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onActivate',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the editor is deactivated.\n\t\t\t\t *\n\t\t\t\t * @event onDeactivate\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onDeactivate event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onDeactivate.add(function(ed) {\n\t\t\t\t *           console.debug('Editor was deactivated: ' + ed.id);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onDeactivate',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when something in the body of the editor is clicked.\n\t\t\t\t *\n\t\t\t\t * @event onClick\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onClick event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onClick.add(function(ed, e) {\n\t\t\t\t *           console.debug('Editor was clicked: ' + e.target.nodeName);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onClick',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a registered event is intercepted.\n\t\t\t\t *\n\t\t\t\t * @event onEvent\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onEvent event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onEvent.add(function(ed, e) {\n \t\t\t\t *          console.debug('Editor event occurred: ' + e.target.nodeName);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onEvent',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a mouseup event is intercepted inside the editor.\n\t\t\t\t *\n\t\t\t\t * @event onMouseUp\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onMouseUp event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onMouseUp.add(function(ed, e) {\n\t\t\t\t *           console.debug('Mouse up event: ' + e.target.nodeName);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onMouseUp',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a mousedown event is intercepted inside the editor.\n\t\t\t\t *\n\t\t\t\t * @event onMouseDown\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onMouseDown event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onMouseDown.add(function(ed, e) {\n\t\t\t\t *           console.debug('Mouse down event: ' + e.target.nodeName);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onMouseDown',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a dblclick event is intercepted inside the editor.\n\t\t\t\t *\n\t\t\t\t * @event onDblClick\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onDblClick event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onDblClick.add(function(ed, e) {\n \t\t\t\t *          console.debug('Double click event: ' + e.target.nodeName);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onDblClick',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a keydown event is intercepted inside the editor.\n\t\t\t\t *\n\t\t\t\t * @event onKeyDown\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onKeyDown event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onKeyDown.add(function(ed, e) {\n\t\t\t\t *           console.debug('Key down event: ' + e.keyCode);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onKeyDown',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a keydown event is intercepted inside the editor.\n\t\t\t\t *\n\t\t\t\t * @event onKeyUp\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onKeyUp event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onKeyUp.add(function(ed, e) {\n\t\t\t\t *           console.debug('Key up event: ' + e.keyCode);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onKeyUp',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a keypress event is intercepted inside the editor.\n\t\t\t\t *\n\t\t\t\t * @event onKeyPress\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onKeyPress event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onKeyPress.add(function(ed, e) {\n\t\t\t\t *           console.debug('Key press event: ' + e.keyCode);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onKeyPress',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a contextmenu event is intercepted inside the editor.\n\t\t\t\t *\n\t\t\t\t * @event onContextMenu\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onContextMenu event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onContextMenu.add(function(ed, e) {\n\t\t\t\t *            console.debug('Context menu event:' + e.target);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onContextMenu',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a form submit event is intercepted.\n\t\t\t\t *\n\t\t\t\t * @event onSubmit\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onSubmit event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onSubmit.add(function(ed, e) {\n\t\t\t\t *            console.debug('Form submit:' + e.target);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onSubmit',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a form reset event is intercepted.\n\t\t\t\t *\n\t\t\t\t * @event onReset\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onReset event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onReset.add(function(ed, e) {\n\t\t\t\t *            console.debug('Form reset:' + e.target);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onReset',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a paste event is intercepted inside the editor.\n\t\t\t\t *\n\t\t\t\t * @event onPaste\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onPaste event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onPaste.add(function(ed, e) {\n\t\t\t\t *            console.debug('Pasted plain text');\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onPaste',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the Serializer does a preProcess on the contents.\n\t\t\t\t *\n\t\t\t\t * @event onPreProcess\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Object} obj PreProcess object.\n\t\t\t\t * @option {Node} node DOM node for the item being serialized.\n\t\t\t\t * @option {String} format The specified output format normally \"html\".\n\t\t\t\t * @option {Boolean} get Is true if the process is on a getContent operation.\n\t\t\t\t * @option {Boolean} set Is true if the process is on a setContent operation.\n\t\t\t\t * @option {Boolean} cleanup Is true if the process is on a cleanup operation.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onPreProcess event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onPreProcess.add(function(ed, o) {\n\t\t\t\t *            // Add a class to each paragraph in the editor\n\t\t\t\t *            ed.dom.addClass(ed.dom.select('p', o.node), 'myclass');\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onPreProcess',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the Serializer does a postProcess on the contents.\n\t\t\t\t *\n\t\t\t\t * @event onPostProcess\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Object} obj PreProcess object.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onPostProcess event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onPostProcess.add(function(ed, o) {\n\t\t\t\t *            // Remove all paragraphs and replace with BR\n\t\t\t\t *            o.content = o.content.replace(/<p[^>]+>|<p>/g, '');\n\t\t\t\t *            o.content = o.content.replace(/<\\/p>/g, '<br />');\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onPostProcess',\n\n\t\t\t\t/**\n\t\t\t\t * Fires before new contents is added to the editor. Using for example setContent.\n\t\t\t\t *\n\t\t\t\t * @event onBeforeSetContent\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onBeforeSetContent event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onBeforeSetContent.add(function(ed, o) {\n\t\t\t\t *            // Replaces all a characters with b characters\n\t\t\t\t *            o.content = o.content.replace(/a/g, 'b');\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onBeforeSetContent',\n\n\t\t\t\t/**\n\t\t\t\t * Fires before contents is extracted from the editor using for example getContent.\n\t\t\t\t *\n\t\t\t\t * @event onBeforeGetContent\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Event} evt W3C DOM Event instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onBeforeGetContent event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onBeforeGetContent.add(function(ed, o) {\n\t\t\t\t *            console.debug('Before get content.');\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onBeforeGetContent',\n\n\t\t\t\t/**\n\t\t\t\t * Fires after the contents has been added to the editor using for example onSetContent.\n\t\t\t\t *\n\t\t\t\t * @event onSetContent\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onSetContent event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onSetContent.add(function(ed, o) {\n\t\t\t\t *            // Replaces all a characters with b characters\n\t\t\t\t *            o.content = o.content.replace(/a/g, 'b');\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onSetContent',\n\n\t\t\t\t/**\n\t\t\t\t * Fires after the contents has been extracted from the editor using for example getContent.\n\t\t\t\t *\n\t\t\t\t * @event onGetContent\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onGetContent event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onGetContent.add(function(ed, o) {\n\t\t\t\t *           // Replace all a characters with b\n\t\t\t\t *           o.content = o.content.replace(/a/g, 'b');\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onGetContent',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the editor gets loaded with contents for example when the load method is executed.\n\t\t\t\t *\n\t\t\t\t * @event onLoadContent\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onLoadContent event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onLoadContent.add(function(ed, o) {\n\t\t\t\t *           // Output the element name\n\t\t\t\t *           console.debug(o.element.nodeName);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onLoadContent',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the editor contents gets saved for example when the save method is executed.\n\t\t\t\t *\n\t\t\t\t * @event onSaveContent\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onSaveContent event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onSaveContent.add(function(ed, o) {\n\t\t\t\t *           // Output the element name\n\t\t\t\t *           console.debug(o.element.nodeName);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onSaveContent',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the user changes node location using the mouse or keyboard.\n\t\t\t\t *\n\t\t\t\t * @event onNodeChange\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onNodeChange event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onNodeChange.add(function(ed, cm, e) {\n\t\t\t\t *           // Activates the link button when the caret is placed in a anchor element\n\t\t\t\t *           if (e.nodeName == 'A')\n\t\t\t\t *              cm.setActive('link', true);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onNodeChange',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when a new undo level is added to the editor.\n\t\t\t\t *\n\t\t\t\t * @event onChange\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onChange event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t * \t  ed.onChange.add(function(ed, l) {\n\t\t\t\t * \t\t  console.debug('Editor contents was modified. Contents: ' + l.content);\n\t\t\t\t * \t  });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onChange',\n\n\t\t\t\t/**\n\t\t\t\t * Fires before a command gets executed for example \"Bold\".\n\t\t\t\t *\n\t\t\t\t * @event onBeforeExecCommand\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onBeforeExecCommand event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onBeforeExecCommand.add(function(ed, cmd, ui, val) {\n\t\t\t\t *           console.debug('Command is to be executed: ' + cmd);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onBeforeExecCommand',\n\n\t\t\t\t/**\n\t\t\t\t * Fires after a command is executed for example \"Bold\".\n\t\t\t\t *\n\t\t\t\t * @event onExecCommand\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onExecCommand event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onExecCommand.add(function(ed, cmd, ui, val) {\n\t\t\t\t *           console.debug('Command was executed: ' + cmd);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onExecCommand',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the contents is undo:ed.\n\t\t\t\t *\n\t\t\t\t * @event onUndo\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Object} level Undo level object.\n\t\t\t\t * @ example\n\t\t\t\t * // Adds an observer to the onUndo event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onUndo.add(function(ed, level) {\n\t\t\t\t *           console.debug('Undo was performed: ' + level.content);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onUndo',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the contents is redo:ed.\n\t\t\t\t *\n\t\t\t\t * @event onRedo\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @param {Object} level Undo level object.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onRedo event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onRedo.add(function(ed, level) {\n\t\t\t\t *           console.debug('Redo was performed: ' +level.content);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onRedo',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when visual aids is enabled/disabled.\n\t\t\t\t *\n\t\t\t\t * @event onVisualAid\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onVisualAid event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onVisualAid.add(function(ed, e, s) {\n\t\t\t\t *           console.debug('onVisualAid event: ' + ed.id + \", State: \" + s);\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onVisualAid',\n\n\t\t\t\t/**\n\t\t\t\t * Fires when the progress throbber is shown above the editor.\n\t\t\t\t *\n\t\t\t\t * @event onSetProgressState\n\t\t\t\t * @param {tinymce.Editor} sender Editor instance.\n\t\t\t\t * @example\n\t\t\t\t * // Adds an observer to the onSetProgressState event using tinyMCE.init\n\t\t\t\t * tinyMCE.init({\n\t\t\t\t *    ...\n\t\t\t\t *    setup : function(ed) {\n\t\t\t\t *       ed.onSetProgressState.add(function(ed, b) {\n\t\t\t\t *            if (b)\n\t\t\t\t *                 console.debug('SHOW!');\n\t\t\t\t *            else\n\t\t\t\t *                 console.debug('HIDE!');\n\t\t\t\t *       });\n\t\t\t\t *    }\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\t'onSetProgressState'\n\t\t\t], function(e) {\n\t\t\t\tt[e] = new Dispatcher(t);\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * Name/value collection with editor settings.\n\t\t\t *\n\t\t\t * @property settings\n\t\t\t * @type Object\n\t\t\t * @example\n\t\t\t * // Get the value of the theme setting\n\t\t\t * tinyMCE.activeEditor.windowManager.alert(\"You are using the \" + tinyMCE.activeEditor.settings.theme + \" theme\");\n\t\t\t */\n\t\t\tt.settings = s = extend({\n\t\t\t\tid : id,\n\t\t\t\tlanguage : 'en',\n\t\t\t\tdocs_language : 'en',\n\t\t\t\ttheme : 'simple',\n\t\t\t\tskin : 'default',\n\t\t\t\tdelta_width : 0,\n\t\t\t\tdelta_height : 0,\n\t\t\t\tpopup_css : '',\n\t\t\t\tplugins : '',\n\t\t\t\tdocument_base_url : tinymce.documentBaseURL,\n\t\t\t\tadd_form_submit_trigger : 1,\n\t\t\t\tsubmit_patch : 1,\n\t\t\t\tadd_unload_trigger : 1,\n\t\t\t\tconvert_urls : 1,\n\t\t\t\trelative_urls : 1,\n\t\t\t\tremove_script_host : 1,\n\t\t\t\ttable_inline_editing : 0,\n\t\t\t\tobject_resizing : 1,\n\t\t\t\tcleanup : 1,\n\t\t\t\taccessibility_focus : 1,\n\t\t\t\tcustom_shortcuts : 1,\n\t\t\t\tcustom_undo_redo_keyboard_shortcuts : 1,\n\t\t\t\tcustom_undo_redo_restore_selection : 1,\n\t\t\t\tcustom_undo_redo : 1,\n\t\t\t\tdoctype : tinymce.isIE6 ? '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">' : '<!DOCTYPE>', // Use old doctype on IE 6 to avoid horizontal scroll\n\t\t\t\tvisual_table_class : 'mceItemTable',\n\t\t\t\tvisual : 1,\n\t\t\t\tfont_size_style_values : 'xx-small,x-small,small,medium,large,x-large,xx-large',\n\t\t\t\tfont_size_legacy_values : 'xx-small,small,medium,large,x-large,xx-large,300%', // See: http://www.w3.org/TR/CSS2/fonts.html#propdef-font-size\n\t\t\t\tapply_source_formatting : 1,\n\t\t\t\tdirectionality : 'ltr',\n\t\t\t\tforced_root_block : 'p',\n\t\t\t\thidden_input : 1,\n\t\t\t\tpadd_empty_editor : 1,\n\t\t\t\trender_ui : 1,\n\t\t\t\tinit_theme : 1,\n\t\t\t\tforce_p_newlines : 1,\n\t\t\t\tindentation : '30px',\n\t\t\t\tkeep_styles : 1,\n\t\t\t\tfix_table_elements : 1,\n\t\t\t\tinline_styles : 1,\n\t\t\t\tconvert_fonts_to_spans : true,\n\t\t\t\tindent : 'simple',\n\t\t\t\tindent_before : 'p,h1,h2,h3,h4,h5,h6,blockquote,div,title,style,pre,script,td,ul,li,area,table,thead,tfoot,tbody,tr',\n\t\t\t\tindent_after : 'p,h1,h2,h3,h4,h5,h6,blockquote,div,title,style,pre,script,td,ul,li,area,table,thead,tfoot,tbody,tr',\n\t\t\t\tvalidate : true,\n\t\t\t\tentity_encoding : 'named',\n\t\t\t\turl_converter : t.convertURL,\n\t\t\t\turl_converter_scope : t,\n\t\t\t\tie7_compat : true\n\t\t\t}, s);\n\n\t\t\t/**\n\t\t\t * URI object to document configured for the TinyMCE instance.\n\t\t\t *\n\t\t\t * @property documentBaseURI\n\t\t\t * @type tinymce.util.URI\n\t\t\t * @example\n\t\t\t * // Get relative URL from the location of document_base_url\n\t\t\t * tinyMCE.activeEditor.documentBaseURI.toRelative('/somedir/somefile.htm');\n\t\t\t *\n\t\t\t * // Get absolute URL from the location of document_base_url\n\t\t\t * tinyMCE.activeEditor.documentBaseURI.toAbsolute('somefile.htm');\n\t\t\t */\n\t\t\tt.documentBaseURI = new tinymce.util.URI(s.document_base_url || tinymce.documentBaseURL, {\n\t\t\t\tbase_uri : tinyMCE.baseURI\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * URI object to current document that holds the TinyMCE editor instance.\n\t\t\t *\n\t\t\t * @property baseURI\n\t\t\t * @type tinymce.util.URI\n\t\t\t * @example\n\t\t\t * // Get relative URL from the location of the API\n\t\t\t * tinyMCE.activeEditor.baseURI.toRelative('/somedir/somefile.htm');\n\t\t\t *\n\t\t\t * // Get absolute URL from the location of the API\n\t\t\t * tinyMCE.activeEditor.baseURI.toAbsolute('somefile.htm');\n\t\t\t */\n\t\t\tt.baseURI = tinymce.baseURI;\n\n\t\t\t/**\n\t\t\t * Array with CSS files to load into the iframe.\n\t\t\t *\n\t\t\t * @property contentCSS\n\t\t\t * @type Array\n\t\t\t */\n\t\t\tt.contentCSS = [];\n\n\t\t\t// Call setup\n\t\t\tt.execCallback('setup', t);\n\t\t},\n\n\t\t/**\n\t\t * Renderes the editor/adds it to the page.\n\t\t *\n\t\t * @method render\n\t\t */\n\t\trender : function(nst) {\n\t\t\tvar t = this, s = t.settings, id = t.id, sl = tinymce.ScriptLoader;\n\n\t\t\t// Page is not loaded yet, wait for it\n\t\t\tif (!Event.domLoaded) {\n\t\t\t\tEvent.add(document, 'init', function() {\n\t\t\t\t\tt.render();\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttinyMCE.settings = s;\n\n\t\t\t// Element not found, then skip initialization\n\t\t\tif (!t.getElement())\n\t\t\t\treturn;\n\n\t\t\t// Is a iPad/iPhone and not on iOS5, then skip initialization. We need to sniff\n\t\t\t// here since the browser says it has contentEditable support but there is no visible\n\t\t\t// caret We will remove this check ones Apple implements full contentEditable support\n\t\t\tif (tinymce.isIDevice && !tinymce.isIOS5)\n\t\t\t\treturn;\n\n\t\t\t// Add hidden input for non input elements inside form elements\n\t\t\tif (!/TEXTAREA|INPUT/i.test(t.getElement().nodeName) && s.hidden_input && DOM.getParent(id, 'form'))\n\t\t\t\tDOM.insertAfter(DOM.create('input', {type : 'hidden', name : id}), id);\n\n\t\t\t/**\n\t\t\t * Window manager reference, use this to open new windows and dialogs.\n\t\t\t *\n\t\t\t * @property windowManager\n\t\t\t * @type tinymce.WindowManager\n\t\t\t * @example\n\t\t\t * // Shows an alert message\n\t\t\t * tinyMCE.activeEditor.windowManager.alert('Hello world!');\n\t\t\t *\n\t\t\t * // Opens a new dialog with the file.htm file and the size 320x240\n\t\t\t * // It also adds a custom parameter this can be retrieved by using tinyMCEPopup.getWindowArg inside the dialog.\n\t\t\t * tinyMCE.activeEditor.windowManager.open({\n\t\t\t *    url : 'file.htm',\n\t\t\t *    width : 320,\n\t\t\t *    height : 240\n\t\t\t * }, {\n\t\t\t *    custom_param : 1\n\t\t\t * });\n\t\t\t */\n\t\t\tif (tinymce.WindowManager)\n\t\t\t\tt.windowManager = new tinymce.WindowManager(t);\n\n\t\t\tif (s.encoding == 'xml') {\n\t\t\t\tt.onGetContent.add(function(ed, o) {\n\t\t\t\t\tif (o.save)\n\t\t\t\t\t\to.content = DOM.encode(o.content);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.add_form_submit_trigger) {\n\t\t\t\tt.onSubmit.addToTop(function() {\n\t\t\t\t\tif (t.initialized) {\n\t\t\t\t\t\tt.save();\n\t\t\t\t\t\tt.isNotDirty = 1;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.add_unload_trigger) {\n\t\t\t\tt._beforeUnload = tinyMCE.onBeforeUnload.add(function() {\n\t\t\t\t\tif (t.initialized && !t.destroyed && !t.isHidden())\n\t\t\t\t\t\tt.save({format : 'raw', no_events : true});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttinymce.addUnload(t.destroy, t);\n\n\t\t\tif (s.submit_patch) {\n\t\t\t\tt.onBeforeRenderUI.add(function() {\n\t\t\t\t\tvar n = t.getElement().form;\n\n\t\t\t\t\tif (!n)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t// Already patched\n\t\t\t\t\tif (n._mceOldSubmit)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t// Check page uses id=\"submit\" or name=\"submit\" for it's submit button\n\t\t\t\t\tif (!n.submit.nodeType && !n.submit.length) {\n\t\t\t\t\t\tt.formElement = n;\n\t\t\t\t\t\tn._mceOldSubmit = n.submit;\n\t\t\t\t\t\tn.submit = function() {\n\t\t\t\t\t\t\t// Save all instances\n\t\t\t\t\t\t\ttinymce.triggerSave();\n\t\t\t\t\t\t\tt.isNotDirty = 1;\n\n\t\t\t\t\t\t\treturn t.formElement._mceOldSubmit(t.formElement);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tn = null;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Load scripts\n\t\t\tfunction loadScripts() {\n\t\t\t\tif (s.language && s.language_load !== false)\n\t\t\t\t\tsl.add(tinymce.baseURL + '/langs/' + s.language + '.js');\n\n\t\t\t\tif (s.theme && s.theme.charAt(0) != '-' && !ThemeManager.urls[s.theme])\n\t\t\t\t\tThemeManager.load(s.theme, 'themes/' + s.theme + '/editor_template' + tinymce.suffix + '.js');\n\n\t\t\t\teach(explode(s.plugins), function(p) {\n\t\t\t\t\tif (p &&!PluginManager.urls[p]) {\n\t\t\t\t\t\tif (p.charAt(0) == '-') {\n\t\t\t\t\t\t\tp = p.substr(1, p.length);\n\t\t\t\t\t\t\tvar dependencies = PluginManager.dependencies(p);\n\t\t\t\t\t\t\teach(dependencies, function(dep) {\n\t\t\t\t\t\t\t\tvar defaultSettings = {prefix:'plugins/', resource: dep, suffix:'/editor_plugin' + tinymce.suffix + '.js'};\n\t\t\t\t\t\t\t\tvar dep = PluginManager.createUrl(defaultSettings, dep);\n\t\t\t\t\t\t\t\tPluginManager.load(dep.resource, dep);\n\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Skip safari plugin, since it is removed as of 3.3b1\n\t\t\t\t\t\t\tif (p == 'safari') {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tPluginManager.load(p, {prefix:'plugins/', resource: p, suffix:'/editor_plugin' + tinymce.suffix + '.js'});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Init when que is loaded\n\t\t\t\tsl.loadQueue(function() {\n\t\t\t\t\tif (!t.removed)\n\t\t\t\t\t\tt.init();\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tloadScripts();\n\t\t},\n\n\t\t/**\n\t\t * Initializes the editor this will be called automatically when\n\t\t * all plugins/themes and language packs are loaded by the rendered method.\n\t\t * This method will setup the iframe and create the theme and plugin instances.\n\t\t *\n\t\t * @method init\n\t\t */\n\t\tinit : function() {\n\t\t\tvar n, t = this, s = t.settings, w, h, e = t.getElement(), o, ti, u, bi, bc, re, i, initializedPlugins = [];\n\n\t\t\ttinymce.add(t);\n\n\t\t\ts.aria_label = s.aria_label || DOM.getAttrib(e, 'aria-label', t.getLang('aria.rich_text_area'));\n\n\t\t\t/**\n\t\t\t * Reference to the theme instance that was used to generate the UI.\n\t\t\t *\n\t\t\t * @property theme\n\t\t\t * @type tinymce.Theme\n\t\t\t * @example\n\t\t\t * // Executes a method on the theme directly\n\t\t\t * tinyMCE.activeEditor.theme.someMethod();\n\t\t\t */\n\t\t\tif (s.theme) {\n\t\t\t\ts.theme = s.theme.replace(/-/, '');\n\t\t\t\to = ThemeManager.get(s.theme);\n\t\t\t\tt.theme = new o();\n\n\t\t\t\tif (t.theme.init && s.init_theme)\n\t\t\t\t\tt.theme.init(t, ThemeManager.urls[s.theme] || tinymce.documentBaseURL.replace(/\\/$/, ''));\n\t\t\t}\n\t\t\tfunction initPlugin(p) {\n\t\t\t\tvar c = PluginManager.get(p), u = PluginManager.urls[p] || tinymce.documentBaseURL.replace(/\\/$/, ''), po;\n\t\t\t\tif (c && tinymce.inArray(initializedPlugins,p) === -1) {\n\t\t\t\t\teach(PluginManager.dependencies(p), function(dep){\n\t\t\t\t\t\tinitPlugin(dep);\n\t\t\t\t\t});\n\t\t\t\t\tpo = new c(t, u);\n\n\t\t\t\t\tt.plugins[p] = po;\n\n\t\t\t\t\tif (po.init) {\n\t\t\t\t\t\tpo.init(t, u);\n\t\t\t\t\t\tinitializedPlugins.push(p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create all plugins\n\t\t\teach(explode(s.plugins.replace(/\\-/g, '')), initPlugin);\n\n\t\t\t// Setup popup CSS path(s)\n\t\t\tif (s.popup_css !== false) {\n\t\t\t\tif (s.popup_css)\n\t\t\t\t\ts.popup_css = t.documentBaseURI.toAbsolute(s.popup_css);\n\t\t\t\telse\n\t\t\t\t\ts.popup_css = t.baseURI.toAbsolute(\"themes/\" + s.theme + \"/skins/\" + s.skin + \"/dialog.css\");\n\t\t\t}\n\n\t\t\tif (s.popup_css_add)\n\t\t\t\ts.popup_css += ',' + t.documentBaseURI.toAbsolute(s.popup_css_add);\n\n\t\t\t/**\n\t\t\t * Control manager instance for the editor. Will enables you to create new UI elements and change their states etc.\n\t\t\t *\n\t\t\t * @property controlManager\n\t\t\t * @type tinymce.ControlManager\n\t\t\t * @example\n\t\t\t * // Disables the bold button\n\t\t\t * tinyMCE.activeEditor.controlManager.setDisabled('bold', true);\n\t\t\t */\n\t\t\tt.controlManager = new tinymce.ControlManager(t);\n\n\t\t\tif (s.custom_undo_redo) {\n\t\t\t\tt.onBeforeExecCommand.add(function(ed, cmd, ui, val, a) {\n\t\t\t\t\tif (cmd != 'Undo' && cmd != 'Redo' && cmd != 'mceRepaint' && (!a || !a.skip_undo))\n\t\t\t\t\t\tt.undoManager.beforeChange();\n\t\t\t\t});\n\n\t\t\t\tt.onExecCommand.add(function(ed, cmd, ui, val, a) {\n\t\t\t\t\tif (cmd != 'Undo' && cmd != 'Redo' && cmd != 'mceRepaint' && (!a || !a.skip_undo))\n\t\t\t\t\t\tt.undoManager.add();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tt.onExecCommand.add(function(ed, c) {\n\t\t\t\t// Don't refresh the select lists until caret move\n\t\t\t\tif (!/^(FontName|FontSize)$/.test(c))\n\t\t\t\t\tt.nodeChanged();\n\t\t\t});\n\n\t\t\t// Remove ghost selections on images and tables in Gecko\n\t\t\tif (isGecko) {\n\t\t\t\tfunction repaint(a, o) {\n\t\t\t\t\tif (!o || !o.initial)\n\t\t\t\t\t\tt.execCommand('mceRepaint');\n\t\t\t\t};\n\n\t\t\t\tt.onUndo.add(repaint);\n\t\t\t\tt.onRedo.add(repaint);\n\t\t\t\tt.onSetContent.add(repaint);\n\t\t\t}\n\n\t\t\t// Enables users to override the control factory\n\t\t\tt.onBeforeRenderUI.dispatch(t, t.controlManager);\n\n\t\t\t// Measure box\n\t\t\tif (s.render_ui) {\n\t\t\t\tw = s.width || e.style.width || e.offsetWidth;\n\t\t\t\th = s.height || e.style.height || e.offsetHeight;\n\t\t\t\tt.orgDisplay = e.style.display;\n\t\t\t\tre = /^[0-9\\.]+(|px)$/i;\n\n\t\t\t\tif (re.test('' + w))\n\t\t\t\t\tw = Math.max(parseInt(w) + (o.deltaWidth || 0), 100);\n\n\t\t\t\tif (re.test('' + h))\n\t\t\t\t\th = Math.max(parseInt(h) + (o.deltaHeight || 0), 100);\n\n\t\t\t\t// Render UI\n\t\t\t\to = t.theme.renderUI({\n\t\t\t\t\ttargetNode : e,\n\t\t\t\t\twidth : w,\n\t\t\t\t\theight : h,\n\t\t\t\t\tdeltaWidth : s.delta_width,\n\t\t\t\t\tdeltaHeight : s.delta_height\n\t\t\t\t});\n\n\t\t\t\tt.editorContainer = o.editorContainer;\n\t\t\t}\n\n\t\t\t// #ifdef contentEditable\n\n\t\t\t// Content editable mode ends here\n\t\t\tif (s.content_editable) {\n\t\t\t\te = n = o = null; // Fix IE leak\n\t\t\t\treturn t.setupContentEditable();\n\t\t\t}\n\n\t\t\t// #endif\n\n\t\t\t// User specified a document.domain value\n\t\t\tif (document.domain && location.hostname != document.domain)\n\t\t\t\ttinymce.relaxedDomain = document.domain;\n\n\t\t\t// Resize editor\n\t\t\tDOM.setStyles(o.sizeContainer || o.editorContainer, {\n\t\t\t\twidth : w,\n\t\t\t\theight : h\n\t\t\t});\n\n\t\t\t// Load specified content CSS last\n\t\t\tif (s.content_css) {\n\t\t\t\ttinymce.each(explode(s.content_css), function(u) {\n\t\t\t\t\tt.contentCSS.push(t.documentBaseURI.toAbsolute(u));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\th = (o.iframeHeight || h) + (typeof(h) == 'number' ? (o.deltaHeight || 0) : '');\n\t\t\tif (h < 100)\n\t\t\t\th = 100;\n\n\t\t\tt.iframeHTML = s.doctype + '<html><head xmlns=\"http://www.w3.org/1999/xhtml\">';\n\n\t\t\t// We only need to override paths if we have to\n\t\t\t// IE has a bug where it remove site absolute urls to relative ones if this is specified\n\t\t\tif (s.document_base_url != tinymce.documentBaseURL)\n\t\t\t\tt.iframeHTML += '<base href=\"' + t.documentBaseURI.getURI() + '\" />';\n\n\t\t\t// IE8 doesn't support carets behind images setting ie7_compat would force IE8+ to run in IE7 compat mode.\n\t\t\tif (s.ie7_compat)\n\t\t\t\tt.iframeHTML += '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\" />';\n\t\t\telse\n\t\t\t\tt.iframeHTML += '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />';\n\n\t\t\tt.iframeHTML += '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />';\n\n\t\t\t// Load the CSS by injecting them into the HTML this will reduce \"flicker\"\n\t\t\tfor (i = 0; i < t.contentCSS.length; i++) {\n\t\t\t\tt.iframeHTML += '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + t.contentCSS[i] + '\" />';\n\t\t\t}\n\n\t\t\tbi = s.body_id || 'tinymce';\n\t\t\tif (bi.indexOf('=') != -1) {\n\t\t\t\tbi = t.getParam('body_id', '', 'hash');\n\t\t\t\tbi = bi[t.id] || bi;\n\t\t\t}\n\n\t\t\tbc = s.body_class || '';\n\t\t\tif (bc.indexOf('=') != -1) {\n\t\t\t\tbc = t.getParam('body_class', '', 'hash');\n\t\t\t\tbc = bc[t.id] || '';\n\t\t\t}\n\n\t\t\tt.iframeHTML += '</head><body id=\"' + bi + '\" class=\"mceContentBody ' + bc + '\"><br></body></html>';\n\n\t\t\t// Domain relaxing enabled, then set document domain\n\t\t\tif (tinymce.relaxedDomain && (isIE || (tinymce.isOpera && parseFloat(opera.version()) < 11))) {\n\t\t\t\t// We need to write the contents here in IE since multiple writes messes up refresh button and back button\n\t\t\t\tu = 'javascript:(function(){document.open();document.domain=\"' + document.domain + '\";var ed = window.parent.tinyMCE.get(\"' + t.id + '\");document.write(ed.iframeHTML);document.close();ed.setupIframe();})()';\n\t\t\t}\n\n\t\t\t// Create iframe\n\t\t\t// TODO: ACC add the appropriate description on this.\n\t\t\tn = DOM.add(o.iframeContainer, 'iframe', {\n\t\t\t\tid : t.id + \"_ifr\",\n\t\t\t\tsrc : u || 'javascript:\"\"', // Workaround for HTTPS warning in IE6/7\n\t\t\t\tframeBorder : '0',\n\t\t\t\tallowTransparency : \"true\",\n\t\t\t\ttitle : s.aria_label,\n\t\t\t\tstyle : {\n\t\t\t\t\twidth : '100%',\n\t\t\t\t\theight : h,\n\t\t\t\t\tdisplay : 'block' // Important for Gecko to render the iframe correctly\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tt.contentAreaContainer = o.iframeContainer;\n\t\t\tDOM.get(o.editorContainer).style.display = t.orgDisplay;\n\t\t\tDOM.get(t.id).style.display = 'none';\n\t\t\tDOM.setAttrib(t.id, 'aria-hidden', true);\n\n\t\t\tif (!tinymce.relaxedDomain || !u)\n\t\t\t\tt.setupIframe();\n\n\t\t\te = n = o = null; // Cleanup\n\t\t},\n\n\t\t/**\n\t\t * This method get called by the init method ones the iframe is loaded.\n\t\t * It will fill the iframe with contents, setups DOM and selection objects for the iframe.\n\t\t * This method should not be called directly.\n\t\t *\n\t\t * @method setupIframe\n\t\t */\n\t\tsetupIframe : function() {\n\t\t\tvar t = this, s = t.settings, e = DOM.get(t.id), d = t.getDoc(), h, b;\n\n\t\t\t// Setup iframe body\n\t\t\tif (!isIE || !tinymce.relaxedDomain) {\n\t\t\t\td.open();\n\t\t\t\td.write(t.iframeHTML);\n\t\t\t\td.close();\n\n\t\t\t\tif (tinymce.relaxedDomain)\n\t\t\t\t\td.domain = tinymce.relaxedDomain;\n\t\t\t}\n\n\t\t\t// It will not steal focus while setting contentEditable\n\t\t\tb = t.getBody();\n\t\t\tb.disabled = true;\n\n\t\t\tif (!s.readonly)\n\t\t\t\tb.contentEditable = true;\n\n\t\t\tb.disabled = false;\n\n\t\t\t/**\n\t\t\t * Schema instance, enables you to validate elements and it's children.\n\t\t\t *\n\t\t\t * @property schema\n\t\t\t * @type tinymce.html.Schema\n\t\t\t */\n\t\t\tt.schema = new tinymce.html.Schema(s);\n\n\t\t\t/**\n\t\t\t * DOM instance for the editor.\n\t\t\t *\n\t\t\t * @property dom\n\t\t\t * @type tinymce.dom.DOMUtils\n\t\t\t * @example\n\t\t\t * // Adds a class to all paragraphs within the editor\n\t\t\t * tinyMCE.activeEditor.dom.addClass(tinyMCE.activeEditor.dom.select('p'), 'someclass');\n\t\t\t */\n\t\t\tt.dom = new tinymce.dom.DOMUtils(t.getDoc(), {\n\t\t\t\tkeep_values : true,\n\t\t\t\turl_converter : t.convertURL,\n\t\t\t\turl_converter_scope : t,\n\t\t\t\thex_colors : s.force_hex_style_colors,\n\t\t\t\tclass_filter : s.class_filter,\n\t\t\t\tupdate_styles : 1,\n\t\t\t\tfix_ie_paragraphs : 1,\n\t\t\t\tschema : t.schema\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * HTML parser will be used when contents is inserted into the editor.\n\t\t\t *\n\t\t\t * @property parser\n\t\t\t * @type tinymce.html.DomParser\n\t\t\t */\n\t\t\tt.parser = new tinymce.html.DomParser(s, t.schema);\n\n\t\t\t// Force anchor names closed, unless the setting \"allow_html_in_named_anchor\" is explicitly included.\n\t\t\tif (!t.settings.allow_html_in_named_anchor) {\n\t\t\t\tt.parser.addAttributeFilter('name', function(nodes, name) {\n\t\t\t\t\tvar i = nodes.length, sibling, prevSibling, parent, node;\n\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tnode = nodes[i];\n\t\t\t\t\t\tif (node.name === 'a' && node.firstChild) {\n\t\t\t\t\t\t\tparent = node.parent;\n\n\t\t\t\t\t\t\t// Move children after current node\n\t\t\t\t\t\t\tsibling = node.lastChild;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tprevSibling = sibling.prev;\n\t\t\t\t\t\t\t\tparent.insert(sibling, node);\n\t\t\t\t\t\t\t\tsibling = prevSibling;\n\t\t\t\t\t\t\t} while (sibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Convert src and href into data-mce-src, data-mce-href and data-mce-style\n\t\t\tt.parser.addAttributeFilter('src,href,style', function(nodes, name) {\n\t\t\t\tvar i = nodes.length, node, dom = t.dom, value, internalName;\n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tnode = nodes[i];\n\t\t\t\t\tvalue = node.attr(name);\n\t\t\t\t\tinternalName = 'data-mce-' + name;\n\n\t\t\t\t\t// Add internal attribute if we need to we don't on a refresh of the document\n\t\t\t\t\tif (!node.attributes.map[internalName]) {\n\t\t\t\t\t\tif (name === \"style\")\n\t\t\t\t\t\t\tnode.attr(internalName, dom.serializeStyle(dom.parseStyle(value), node.name));\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tnode.attr(internalName, t.convertURL(value, name, node.name));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Keep scripts from executing\n\t\t\tt.parser.addNodeFilter('script', function(nodes, name) {\n\t\t\t\tvar i = nodes.length, node;\n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tnode = nodes[i];\n\t\t\t\t\tnode.attr('type', 'mce-' + (node.attr('type') || 'text/javascript'));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tt.parser.addNodeFilter('#cdata', function(nodes, name) {\n\t\t\t\tvar i = nodes.length, node;\n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tnode = nodes[i];\n\t\t\t\t\tnode.type = 8;\n\t\t\t\t\tnode.name = '#comment';\n\t\t\t\t\tnode.value = '[CDATA[' + node.value + ']]';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tt.parser.addNodeFilter('p,h1,h2,h3,h4,h5,h6,div', function(nodes, name) {\n\t\t\t\tvar i = nodes.length, node, nonEmptyElements = t.schema.getNonEmptyElements();\n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tnode = nodes[i];\n\n\t\t\t\t\tif (node.isEmpty(nonEmptyElements))\n\t\t\t\t\t\tnode.empty().append(new tinymce.html.Node('br', 1)).shortEnded = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/**\n\t\t\t * DOM serializer for the editor. Will be used when contents is extracted from the editor.\n\t\t\t *\n\t\t\t * @property serializer\n\t\t\t * @type tinymce.dom.Serializer\n\t\t\t * @example\n\t\t\t * // Serializes the first paragraph in the editor into a string\n\t\t\t * tinyMCE.activeEditor.serializer.serialize(tinyMCE.activeEditor.dom.select('p')[0]);\n\t\t\t */\n\t\t\tt.serializer = new tinymce.dom.Serializer(s, t.dom, t.schema);\n\n\t\t\t/**\n\t\t\t * Selection instance for the editor.\n\t\t\t *\n\t\t\t * @property selection\n\t\t\t * @type tinymce.dom.Selection\n\t\t\t * @example\n\t\t\t * // Sets some contents to the current selection in the editor\n\t\t\t * tinyMCE.activeEditor.selection.setContent('Some contents');\n\t\t\t *\n\t\t\t * // Gets the current selection\n\t\t\t * alert(tinyMCE.activeEditor.selection.getContent());\n\t\t\t *\n\t\t\t * // Selects the first paragraph found\n\t\t\t * tinyMCE.activeEditor.selection.select(tinyMCE.activeEditor.dom.select('p')[0]);\n\t\t\t */\n\t\t\tt.selection = new tinymce.dom.Selection(t.dom, t.getWin(), t.serializer);\n\n\t\t\t/**\n\t\t\t * Formatter instance.\n\t\t\t *\n\t\t\t * @property formatter\n\t\t\t * @type tinymce.Formatter\n\t\t\t */\n\t\t\tt.formatter = new tinymce.Formatter(this);\n\n\t\t\t// Register default formats\n\t\t\tt.formatter.register({\n\t\t\t\talignleft : [\n\t\t\t\t\t{selector : 'p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li', styles : {textAlign : 'left'}},\n\t\t\t\t\t{selector : 'img,table', collapsed : false, styles : {'float' : 'left'}}\n\t\t\t\t],\n\n\t\t\t\taligncenter : [\n\t\t\t\t\t{selector : 'p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li', styles : {textAlign : 'center'}},\n\t\t\t\t\t{selector : 'img', collapsed : false, styles : {display : 'block', marginLeft : 'auto', marginRight : 'auto'}},\n\t\t\t\t\t{selector : 'table', collapsed : false, styles : {marginLeft : 'auto', marginRight : 'auto'}}\n\t\t\t\t],\n\n\t\t\t\talignright : [\n\t\t\t\t\t{selector : 'p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li', styles : {textAlign : 'right'}},\n\t\t\t\t\t{selector : 'img,table', collapsed : false, styles : {'float' : 'right'}}\n\t\t\t\t],\n\n\t\t\t\talignfull : [\n\t\t\t\t\t{selector : 'p,h1,h2,h3,h4,h5,h6,td,th,div,ul,ol,li', styles : {textAlign : 'justify'}}\n\t\t\t\t],\n\n\t\t\t\tbold : [\n\t\t\t\t\t{inline : 'strong', remove : 'all'},\n\t\t\t\t\t{inline : 'span', styles : {fontWeight : 'bold'}},\n\t\t\t\t\t{inline : 'b', remove : 'all'}\n\t\t\t\t],\n\n\t\t\t\titalic : [\n\t\t\t\t\t{inline : 'em', remove : 'all'},\n\t\t\t\t\t{inline : 'span', styles : {fontStyle : 'italic'}},\n\t\t\t\t\t{inline : 'i', remove : 'all'}\n\t\t\t\t],\n\n\t\t\t\tunderline : [\n\t\t\t\t\t{inline : 'span', styles : {textDecoration : 'underline'}, exact : true},\n\t\t\t\t\t{inline : 'u', remove : 'all'}\n\t\t\t\t],\n\n\t\t\t\tstrikethrough : [\n\t\t\t\t\t{inline : 'span', styles : {textDecoration : 'line-through'}, exact : true},\n\t\t\t\t\t{inline : 'strike', remove : 'all'}\n\t\t\t\t],\n\n\t\t\t\tforecolor : {inline : 'span', styles : {color : '%value'}, wrap_links : false},\n\t\t\t\thilitecolor : {inline : 'span', styles : {backgroundColor : '%value'}, wrap_links : false},\n\t\t\t\tfontname : {inline : 'span', styles : {fontFamily : '%value'}},\n\t\t\t\tfontsize : {inline : 'span', styles : {fontSize : '%value'}},\n\t\t\t\tfontsize_class : {inline : 'span', attributes : {'class' : '%value'}},\n\t\t\t\tblockquote : {block : 'blockquote', wrapper : 1, remove : 'all'},\n\t\t\t\tsubscript : {inline : 'sub'},\n\t\t\t\tsuperscript : {inline : 'sup'},\n\n\t\t\t\tlink : {inline : 'a', selector : 'a', remove : 'all', split : true, deep : true,\n\t\t\t\t\tonmatch : function(node) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t},\n\n\t\t\t\t\tonformat : function(elm, fmt, vars) {\n\t\t\t\t\t\teach(vars, function(value, key) {\n\t\t\t\t\t\t\tt.dom.setAttrib(elm, key, value);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tremoveformat : [\n\t\t\t\t\t{selector : 'b,strong,em,i,font,u,strike', remove : 'all', split : true, expand : false, block_expand : true, deep : true},\n\t\t\t\t\t{selector : 'span', attributes : ['style', 'class'], remove : 'empty', split : true, expand : false, deep : true},\n\t\t\t\t\t{selector : '*', attributes : ['style', 'class'], split : false, expand : false, deep : true}\n\t\t\t\t]\n\t\t\t});\n\n\t\t\t// Register default block formats\n\t\t\teach('p h1 h2 h3 h4 h5 h6 div address pre div code dt dd samp'.split(/\\s/), function(name) {\n\t\t\t\tt.formatter.register(name, {block : name, remove : 'all'});\n\t\t\t});\n\n\t\t\t// Register user defined formats\n\t\t\tt.formatter.register(t.settings.formats);\n\n\t\t\t/**\n\t\t\t * Undo manager instance, responsible for handling undo levels.\n\t\t\t *\n\t\t\t * @property undoManager\n\t\t\t * @type tinymce.UndoManager\n\t\t\t * @example\n\t\t\t * // Undoes the last modification to the editor\n\t\t\t * tinyMCE.activeEditor.undoManager.undo();\n\t\t\t */\n\t\t\tt.undoManager = new tinymce.UndoManager(t);\n\n\t\t\t// Pass through\n\t\t\tt.undoManager.onAdd.add(function(um, l) {\n\t\t\t\tif (um.hasUndo())\n\t\t\t\t\treturn t.onChange.dispatch(t, l, um);\n\t\t\t});\n\n\t\t\tt.undoManager.onUndo.add(function(um, l) {\n\t\t\t\treturn t.onUndo.dispatch(t, l, um);\n\t\t\t});\n\n\t\t\tt.undoManager.onRedo.add(function(um, l) {\n\t\t\t\treturn t.onRedo.dispatch(t, l, um);\n\t\t\t});\n\n\t\t\tt.forceBlocks = new tinymce.ForceBlocks(t, {\n\t\t\t\tforced_root_block : s.forced_root_block\n\t\t\t});\n\n\t\t\tt.editorCommands = new tinymce.EditorCommands(t);\n\n\t\t\t// Pass through\n\t\t\tt.serializer.onPreProcess.add(function(se, o) {\n\t\t\t\treturn t.onPreProcess.dispatch(t, o, se);\n\t\t\t});\n\n\t\t\tt.serializer.onPostProcess.add(function(se, o) {\n\t\t\t\treturn t.onPostProcess.dispatch(t, o, se);\n\t\t\t});\n\n\t\t\tt.onPreInit.dispatch(t);\n\n\t\t\tif (!s.gecko_spellcheck)\n\t\t\t\tt.getBody().spellcheck = 0;\n\n\t\t\tif (!s.readonly)\n\t\t\t\tt._addEvents();\n\n\t\t\tt.controlManager.onPostRender.dispatch(t, t.controlManager);\n\t\t\tt.onPostRender.dispatch(t);\n\n\t\t\tt.quirks = new tinymce.util.Quirks(this);\n\n\t\t\tif (s.directionality)\n\t\t\t\tt.getBody().dir = s.directionality;\n\n\t\t\tif (s.nowrap)\n\t\t\t\tt.getBody().style.whiteSpace = \"nowrap\";\n\n\t\t\tif (s.handle_node_change_callback) {\n\t\t\t\tt.onNodeChange.add(function(ed, cm, n) {\n\t\t\t\t\tt.execCallback('handle_node_change_callback', t.id, n, -1, -1, true, t.selection.isCollapsed());\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.save_callback) {\n\t\t\t\tt.onSaveContent.add(function(ed, o) {\n\t\t\t\t\tvar h = t.execCallback('save_callback', t.id, o.content, t.getBody());\n\n\t\t\t\t\tif (h)\n\t\t\t\t\t\to.content = h;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.onchange_callback) {\n\t\t\t\tt.onChange.add(function(ed, l) {\n\t\t\t\t\tt.execCallback('onchange_callback', t, l);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.protect) {\n\t\t\t\tt.onBeforeSetContent.add(function(ed, o) {\n\t\t\t\t\tif (s.protect) {\n\t\t\t\t\t\teach(s.protect, function(pattern) {\n\t\t\t\t\t\t\to.content = o.content.replace(pattern, function(str) {\n\t\t\t\t\t\t\t\treturn '<!--mce:protected ' + escape(str) + '-->';\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.convert_newlines_to_brs) {\n\t\t\t\tt.onBeforeSetContent.add(function(ed, o) {\n\t\t\t\t\tif (o.initial)\n\t\t\t\t\t\to.content = o.content.replace(/\\r?\\n/g, '<br />');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.preformatted) {\n\t\t\t\tt.onPostProcess.add(function(ed, o) {\n\t\t\t\t\to.content = o.content.replace(/^\\s*<pre.*?>/, '');\n\t\t\t\t\to.content = o.content.replace(/<\\/pre>\\s*$/, '');\n\n\t\t\t\t\tif (o.set)\n\t\t\t\t\t\to.content = '<pre class=\"mceItemHidden\">' + o.content + '</pre>';\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.verify_css_classes) {\n\t\t\t\tt.serializer.attribValueFilter = function(n, v) {\n\t\t\t\t\tvar s, cl;\n\n\t\t\t\t\tif (n == 'class') {\n\t\t\t\t\t\t// Build regexp for classes\n\t\t\t\t\t\tif (!t.classesRE) {\n\t\t\t\t\t\t\tcl = t.dom.getClasses();\n\n\t\t\t\t\t\t\tif (cl.length > 0) {\n\t\t\t\t\t\t\t\ts = '';\n\n\t\t\t\t\t\t\t\teach (cl, function(o) {\n\t\t\t\t\t\t\t\t\ts += (s ? '|' : '') + o['class'];\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tt.classesRE = new RegExp('(' + s + ')', 'gi');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn !t.classesRE || /(\\bmceItem\\w+\\b|\\bmceTemp\\w+\\b)/g.test(v) || t.classesRE.test(v) ? v : '';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn v;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (s.cleanup_callback) {\n\t\t\t\tt.onBeforeSetContent.add(function(ed, o) {\n\t\t\t\t\to.content = t.execCallback('cleanup_callback', 'insert_to_editor', o.content, o);\n\t\t\t\t});\n\n\t\t\t\tt.onPreProcess.add(function(ed, o) {\n\t\t\t\t\tif (o.set)\n\t\t\t\t\t\tt.execCallback('cleanup_callback', 'insert_to_editor_dom', o.node, o);\n\n\t\t\t\t\tif (o.get)\n\t\t\t\t\t\tt.execCallback('cleanup_callback', 'get_from_editor_dom', o.node, o);\n\t\t\t\t});\n\n\t\t\t\tt.onPostProcess.add(function(ed, o) {\n\t\t\t\t\tif (o.set)\n\t\t\t\t\t\to.content = t.execCallback('cleanup_callback', 'insert_to_editor', o.content, o);\n\n\t\t\t\t\tif (o.get)\n\t\t\t\t\t\to.content = t.execCallback('cleanup_callback', 'get_from_editor', o.content, o);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.save_callback) {\n\t\t\t\tt.onGetContent.add(function(ed, o) {\n\t\t\t\t\tif (o.save)\n\t\t\t\t\t\to.content = t.execCallback('save_callback', t.id, o.content, t.getBody());\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (s.handle_event_callback) {\n\t\t\t\tt.onEvent.add(function(ed, e, o) {\n\t\t\t\t\tif (t.execCallback('handle_event_callback', e, ed, o) === false)\n\t\t\t\t\t\tEvent.cancel(e);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add visual aids when new contents is added\n\t\t\tt.onSetContent.add(function() {\n\t\t\t\tt.addVisual(t.getBody());\n\t\t\t});\n\n\t\t\t// Remove empty contents\n\t\t\tif (s.padd_empty_editor) {\n\t\t\t\tt.onPostProcess.add(function(ed, o) {\n\t\t\t\t\to.content = o.content.replace(/^(<p[^>]*>(&nbsp;|&#160;|\\s|\\u00a0|)<\\/p>[\\r\\n]*|<br \\/>[\\r\\n]*)$/, '');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (isGecko) {\n\t\t\t\t// Fix gecko link bug, when a link is placed at the end of block elements there is\n\t\t\t\t// no way to move the caret behind the link. This fix adds a bogus br element after the link\n\t\t\t\tfunction fixLinks(ed, o) {\n\t\t\t\t\teach(ed.dom.select('a'), function(n) {\n\t\t\t\t\t\tvar pn = n.parentNode;\n\n\t\t\t\t\t\tif (ed.dom.isBlock(pn) && pn.lastChild === n)\n\t\t\t\t\t\t\ted.dom.add(pn, 'br', {'data-mce-bogus' : 1});\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tt.onExecCommand.add(function(ed, cmd) {\n\t\t\t\t\tif (cmd === 'CreateLink')\n\t\t\t\t\t\tfixLinks(ed);\n\t\t\t\t});\n\n\t\t\t\tt.onSetContent.add(t.selection.onSetContent.add(fixLinks));\n\t\t\t}\n\n\t\t\tt.load({initial : true, format : 'html'});\n\t\t\tt.startContent = t.getContent({format : 'raw'});\n\t\t\tt.undoManager.add();\n\t\t\tt.initialized = true;\n\n\t\t\tt.onInit.dispatch(t);\n\t\t\tt.execCallback('setupcontent_callback', t.id, t.getBody(), t.getDoc());\n\t\t\tt.execCallback('init_instance_callback', t);\n\t\t\tt.focus(true);\n\t\t\tt.nodeChanged({initial : 1});\n\n\t\t\t// Load specified content CSS last\n\t\t\teach(t.contentCSS, function(u) {\n\t\t\t\tt.dom.loadCSS(u);\n\t\t\t});\n\n\t\t\t// Handle auto focus\n\t\t\tif (s.auto_focus) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tvar ed = tinymce.get(s.auto_focus);\n\n\t\t\t\t\ted.selection.select(ed.getBody(), 1);\n\t\t\t\t\ted.selection.collapse(1);\n\t\t\t\t\ted.getBody().focus();\n\t\t\t\t\ted.getWin().focus();\n\t\t\t\t}, 100);\n\t\t\t}\n\n\t\t\te = null;\n\t\t},\n\n\t\t// #ifdef contentEditable\n\n\t\t/**\n\t\t * Sets up the contentEditable mode.\n\t\t *\n\t\t * @method setupContentEditable\n\t\t */\n\t\tsetupContentEditable : function() {\n\t\t\tvar t = this, s = t.settings, e = t.getElement();\n\n\t\t\tt.contentDocument = s.content_document || document;\n\t\t\tt.contentWindow = s.content_window || window;\n\t\t\tt.bodyElement = e;\n\n\t\t\t// Prevent leak in IE\n\t\t\ts.content_document = s.content_window = null;\n\n\t\t\tDOM.hide(e);\n\t\t\te.contentEditable = t.getParam('content_editable_state', true);\n\t\t\tDOM.show(e);\n\n\t\t\tif (!s.gecko_spellcheck)\n\t\t\t\tt.getDoc().body.spellcheck = 0;\n\n\t\t\t// Setup objects\n\t\t\tt.dom = new tinymce.dom.DOMUtils(t.getDoc(), {\n\t\t\t\tkeep_values : true,\n\t\t\t\turl_converter : t.convertURL,\n\t\t\t\turl_converter_scope : t,\n\t\t\t\thex_colors : s.force_hex_style_colors,\n\t\t\t\tclass_filter : s.class_filter,\n\t\t\t\troot_element : t.id,\n\t\t\t\tfix_ie_paragraphs : 1,\n\t\t\t\tupdate_styles : 1\n\t\t\t});\n\n\t\t\tt.serializer = new tinymce.dom.Serializer(s, t.dom, schema);\n\n\t\t\tt.selection = new tinymce.dom.Selection(t.dom, t.getWin(), t.serializer);\n\t\t\tt.forceBlocks = new tinymce.ForceBlocks(t, {\n\t\t\t\tforced_root_block : s.forced_root_block\n\t\t\t});\n\n\t\t\tt.editorCommands = new tinymce.EditorCommands(t);\n\n\t\t\t// Pass through\n\t\t\tt.serializer.onPreProcess.add(function(se, o) {\n\t\t\t\treturn t.onPreProcess.dispatch(t, o, se);\n\t\t\t});\n\n\t\t\tt.serializer.onPostProcess.add(function(se, o) {\n\t\t\t\treturn t.onPostProcess.dispatch(t, o, se);\n\t\t\t});\n\n\t\t\tt.onPreInit.dispatch(t);\n\t\t\tt._addEvents();\n\n\t\t\tt.controlManager.onPostRender.dispatch(t, t.controlManager);\n\t\t\tt.onPostRender.dispatch(t);\n\n\t\t\tt.onSetContent.add(function() {\n\t\t\t\tt.addVisual(t.getBody());\n\t\t\t});\n\n\t\t\t//t.load({initial : true, format : (s.cleanup_on_startup ? 'html' : 'raw')});\n\t\t\tt.startContent = t.getContent({format : 'raw'});\n\t\t\tt.undoManager.add({initial : true});\n\t\t\tt.initialized = true;\n\n\t\t\tt.onInit.dispatch(t);\n\t\t\tt.focus(true);\n\t\t\tt.nodeChanged({initial : 1});\n\n\t\t\t// Load specified content CSS last\n\t\t\tif (s.content_css) {\n\t\t\t\teach(explode(s.content_css), function(u) {\n\t\t\t\t\tt.dom.loadCSS(t.documentBaseURI.toAbsolute(u));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (isIE) {\n\t\t\t\t// Store away selection\n\t\t\t\tt.dom.bind(t.getElement(), 'beforedeactivate', function() {\n\t\t\t\t\tt.lastSelectionBookmark = t.selection.getBookmark(1);\n\t\t\t\t});\n\n\t\t\t\tt.onBeforeExecCommand.add(function(ed, cmd, ui, val, o) {\n\t\t\t\t\tif (!DOM.getParent(ed.selection.getStart(), function(n) {return n == ed.getBody();}))\n\t\t\t\t\t\to.terminate = 1;\n\n\t\t\t\t\tif (!DOM.getParent(ed.selection.getEnd(), function(n) {return n == ed.getBody();}))\n\t\t\t\t\t\to.terminate = 1;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\te = null; // Cleanup\n\t\t},\n\n\t\t// #endif\n\n\t\t/**\n\t\t * Focuses/activates the editor. This will set this editor as the activeEditor in the tinymce collection\n\t\t * it will also place DOM focus inside the editor.\n\t\t *\n\t\t * @method focus\n\t\t * @param {Boolean} sf Skip DOM focus. Just set is as the active editor.\n\t\t */\n\t\tfocus : function(sf) {\n\t\t\tvar oed, t = this, selection = t.selection, ce = t.settings.content_editable, ieRng, controlElm, doc = t.getDoc();\n\n\t\t\tif (!sf) {\n\t\t\t\t// Get selected control element\n\t\t\t\tieRng = selection.getRng();\n\t\t\t\tif (ieRng.item) {\n\t\t\t\t\tcontrolElm = ieRng.item(0);\n\t\t\t\t}\n\n\t\t\t\tt._refreshContentEditable();\n\t\t\t\tselection.normalize();\n\n\t\t\t\t// Is not content editable\n\t\t\t\tif (!ce)\n\t\t\t\t\tt.getWin().focus();\n\n\t\t\t\t// Focus the body as well since it's contentEditable\n\t\t\t\tif (tinymce.isGecko) {\n\t\t\t\t\tt.getBody().focus();\n\t\t\t\t}\n\n\t\t\t\t// Restore selected control element\n\t\t\t\t// This is needed when for example an image is selected within a\n\t\t\t\t// layer a call to focus will then remove the control selection\n\t\t\t\tif (controlElm && controlElm.ownerDocument == doc) {\n\t\t\t\t\tieRng = doc.body.createControlRange();\n\t\t\t\t\tieRng.addElement(controlElm);\n\t\t\t\t\tieRng.select();\n\t\t\t\t}\n\n\t\t\t\t// #ifdef contentEditable\n\n\t\t\t\t// Content editable mode ends here\n\t\t\t\tif (ce) {\n\t\t\t\t\tif (tinymce.isWebKit)\n\t\t\t\t\t\tt.getWin().focus();\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (tinymce.isIE)\n\t\t\t\t\t\t\tt.getElement().setActive();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tt.getElement().focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// #endif\n\t\t\t}\n\n\t\t\tif (tinymce.activeEditor != t) {\n\t\t\t\tif ((oed = tinymce.activeEditor) != null)\n\t\t\t\t\toed.onDeactivate.dispatch(oed, t);\n\n\t\t\t\tt.onActivate.dispatch(t, oed);\n\t\t\t}\n\n\t\t\ttinymce._setActive(t);\n\t\t},\n\n\t\t/**\n\t\t * Executes a legacy callback. This method is useful to call old 2.x option callbacks.\n\t\t * There new event model is a better way to add callback so this method might be removed in the future.\n\t\t *\n\t\t * @method execCallback\n\t\t * @param {String} n Name of the callback to execute.\n\t\t * @return {Object} Return value passed from callback function.\n\t\t */\n\t\texecCallback : function(n) {\n\t\t\tvar t = this, f = t.settings[n], s;\n\n\t\t\tif (!f)\n\t\t\t\treturn;\n\n\t\t\t// Look through lookup\n\t\t\tif (t.callbackLookup && (s = t.callbackLookup[n])) {\n\t\t\t\tf = s.func;\n\t\t\t\ts = s.scope;\n\t\t\t}\n\n\t\t\tif (is(f, 'string')) {\n\t\t\t\ts = f.replace(/\\.\\w+$/, '');\n\t\t\t\ts = s ? tinymce.resolve(s) : 0;\n\t\t\t\tf = tinymce.resolve(f);\n\t\t\t\tt.callbackLookup = t.callbackLookup || {};\n\t\t\t\tt.callbackLookup[n] = {func : f, scope : s};\n\t\t\t}\n\n\t\t\treturn f.apply(s || t, Array.prototype.slice.call(arguments, 1));\n\t\t},\n\n\t\t/**\n\t\t * Translates the specified string by replacing variables with language pack items it will also check if there is\n\t\t * a key mathcin the input.\n\t\t *\n\t\t * @method translate\n\t\t * @param {String} s String to translate by the language pack data.\n\t\t * @return {String} Translated string.\n\t\t */\n\t\ttranslate : function(s) {\n\t\t\tvar c = this.settings.language || 'en', i18n = tinymce.i18n;\n\n\t\t\tif (!s)\n\t\t\t\treturn '';\n\n\t\t\treturn i18n[c + '.' + s] || s.replace(/{\\#([^}]+)\\}/g, function(a, b) {\n\t\t\t\treturn i18n[c + '.' + b] || '{#' + b + '}';\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns a language pack item by name/key.\n\t\t *\n\t\t * @method getLang\n\t\t * @param {String} n Name/key to get from the language pack.\n\t\t * @param {String} dv Optional default value to retrieve.\n\t\t */\n\t\tgetLang : function(n, dv) {\n\t\t\treturn tinymce.i18n[(this.settings.language || 'en') + '.' + n] || (is(dv) ? dv : '{#' + n + '}');\n\t\t},\n\n\t\t/**\n\t\t * Returns a configuration parameter by name.\n\t\t *\n\t\t * @method getParam\n\t\t * @param {String} n Configruation parameter to retrieve.\n\t\t * @param {String} dv Optional default value to return.\n\t\t * @param {String} ty Optional type parameter.\n\t\t * @return {String} Configuration parameter value or default value.\n\t\t * @example\n\t\t * // Returns a specific config value from the currently active editor\n\t\t * var someval = tinyMCE.activeEditor.getParam('myvalue');\n\t\t *\n\t\t * // Returns a specific config value from a specific editor instance by id\n\t\t * var someval2 = tinyMCE.get('my_editor').getParam('myvalue');\n\t\t */\n\t\tgetParam : function(n, dv, ty) {\n\t\t\tvar tr = tinymce.trim, v = is(this.settings[n]) ? this.settings[n] : dv, o;\n\n\t\t\tif (ty === 'hash') {\n\t\t\t\to = {};\n\n\t\t\t\tif (is(v, 'string')) {\n\t\t\t\t\teach(v.indexOf('=') > 0 ? v.split(/[;,](?![^=;,]*(?:[;,]|$))/) : v.split(','), function(v) {\n\t\t\t\t\t\tv = v.split('=');\n\n\t\t\t\t\t\tif (v.length > 1)\n\t\t\t\t\t\t\to[tr(v[0])] = tr(v[1]);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\to[tr(v[0])] = tr(v);\n\t\t\t\t\t});\n\t\t\t\t} else\n\t\t\t\t\to = v;\n\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\treturn v;\n\t\t},\n\n\t\t/**\n\t\t * Distpaches out a onNodeChange event to all observers. This method should be called when you\n\t\t * need to update the UI states or element path etc.\n\t\t *\n\t\t * @method nodeChanged\n\t\t * @param {Object} o Optional object to pass along for the node changed event.\n\t\t */\n\t\tnodeChanged : function(o) {\n\t\t\tvar t = this, s = t.selection, n = s.getStart() || t.getBody();\n\n\t\t\t// Fix for bug #1896577 it seems that this can not be fired while the editor is loading\n\t\t\tif (t.initialized) {\n\t\t\t\to = o || {};\n\t\t\t\tn = isIE && n.ownerDocument != t.getDoc() ? t.getBody() : n; // Fix for IE initial state\n\n\t\t\t\t// Get parents and add them to object\n\t\t\t\to.parents = [];\n\t\t\t\tt.dom.getParent(n, function(node) {\n\t\t\t\t\tif (node.nodeName == 'BODY')\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\to.parents.push(node);\n\t\t\t\t});\n\n\t\t\t\tt.onNodeChange.dispatch(\n\t\t\t\t\tt,\n\t\t\t\t\to ? o.controlManager || t.controlManager : t.controlManager,\n\t\t\t\t\tn,\n\t\t\t\t\ts.isCollapsed(),\n\t\t\t\t\to\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Adds a button that later gets created by the ControlManager. This is a shorter and easier method\n\t\t * of adding buttons without the need to deal with the ControlManager directly. But it's also less\n\t\t * powerfull if you need more control use the ControlManagers factory methods instead.\n\t\t *\n\t\t * @method addButton\n\t\t * @param {String} n Button name to add.\n\t\t * @param {Object} s Settings object with title, cmd etc.\n\t\t * @example\n\t\t * // Adds a custom button to the editor and when a user clicks the button it will open\n\t\t * // an alert box with the selected contents as plain text.\n\t\t * tinyMCE.init({\n\t\t *    ...\n\t\t *\n\t\t *    theme_advanced_buttons1 : 'example,..'\n\t\t *\n\t\t *    setup : function(ed) {\n\t\t *       // Register example button\n\t\t *       ed.addButton('example', {\n\t\t *          title : 'example.desc',\n\t\t *          image : '../jscripts/tiny_mce/plugins/example/img/example.gif',\n\t\t *          onclick : function() {\n\t\t *             ed.windowManager.alert('Hello world!! Selection: ' + ed.selection.getContent({format : 'text'}));\n\t\t *          }\n\t\t *       });\n\t\t *    }\n\t\t * });\n\t\t */\n\t\taddButton : function(n, s) {\n\t\t\tvar t = this;\n\n\t\t\tt.buttons = t.buttons || {};\n\t\t\tt.buttons[n] = s;\n\t\t},\n\n\t\t/**\n\t\t * Adds a custom command to the editor, you can also override existing commands with this method.\n\t\t * The command that you add can be executed with execCommand.\n\t\t *\n\t\t * @method addCommand\n\t\t * @param {String} name Command name to add/override.\n\t\t * @param {addCommandCallback} callback Function to execute when the command occurs.\n\t\t * @param {Object} scope Optional scope to execute the function in.\n\t\t * @example\n\t\t * // Adds a custom command that later can be executed using execCommand\n\t\t * tinyMCE.init({\n\t\t *    ...\n\t\t *\n\t\t *    setup : function(ed) {\n\t\t *       // Register example command\n\t\t *       ed.addCommand('mycommand', function(ui, v) {\n\t\t *          ed.windowManager.alert('Hello world!! Selection: ' + ed.selection.getContent({format : 'text'}));\n\t\t *       });\n\t\t *    }\n\t\t * });\n\t\t */\n\t\taddCommand : function(name, callback, scope) {\n\t\t\t/**\n\t\t\t * Callback function that gets called when a command is executed.\n\t\t\t *\n\t\t\t * @callback addCommandCallback\n\t\t\t * @param {Boolean} ui Display UI state true/false.\n\t\t\t * @param {Object} value Optional value for command.\n\t\t\t * @return {Boolean} True/false state if the command was handled or not.\n\t\t\t */\n\t\t\tthis.execCommands[name] = {func : callback, scope : scope || this};\n\t\t},\n\n\t\t/**\n\t\t * Adds a custom query state command to the editor, you can also override existing commands with this method.\n\t\t * The command that you add can be executed with queryCommandState function.\n\t\t *\n\t\t * @method addQueryStateHandler\n\t\t * @param {String} name Command name to add/override.\n\t\t * @param {addQueryStateHandlerCallback} callback Function to execute when the command state retrival occurs.\n\t\t * @param {Object} scope Optional scope to execute the function in.\n\t\t */\n\t\taddQueryStateHandler : function(name, callback, scope) {\n\t\t\t/**\n\t\t\t * Callback function that gets called when a queryCommandState is executed.\n\t\t\t *\n\t\t\t * @callback addQueryStateHandlerCallback\n\t\t\t * @return {Boolean} True/false state if the command is enabled or not like is it bold.\n\t\t\t */\n\t\t\tthis.queryStateCommands[name] = {func : callback, scope : scope || this};\n\t\t},\n\n\t\t/**\n\t\t * Adds a custom query value command to the editor, you can also override existing commands with this method.\n\t\t * The command that you add can be executed with queryCommandValue function.\n\t\t *\n\t\t * @method addQueryValueHandler\n\t\t * @param {String} name Command name to add/override.\n\t\t * @param {addQueryValueHandlerCallback} callback Function to execute when the command value retrival occurs.\n\t\t * @param {Object} scope Optional scope to execute the function in.\n\t\t */\n\t\taddQueryValueHandler : function(name, callback, scope) {\n\t\t\t/**\n\t\t\t * Callback function that gets called when a queryCommandValue is executed.\n\t\t\t *\n\t\t\t * @callback addQueryValueHandlerCallback\n\t\t\t * @return {Object} Value of the command or undefined.\n\t\t\t */\n\t\t\tthis.queryValueCommands[name] = {func : callback, scope : scope || this};\n\t\t},\n\n\t\t/**\n\t\t * Adds a keyboard shortcut for some command or function.\n\t\t *\n\t\t * @method addShortcut\n\t\t * @param {String} pa Shortcut pattern. Like for example: ctrl+alt+o.\n\t\t * @param {String} desc Text description for the command.\n\t\t * @param {String/Function} cmd_func Command name string or function to execute when the key is pressed.\n\t\t * @param {Object} sc Optional scope to execute the function in.\n\t\t * @return {Boolean} true/false state if the shortcut was added or not.\n\t\t */\n\t\taddShortcut : function(pa, desc, cmd_func, sc) {\n\t\t\tvar t = this, c;\n\n\t\t\tif (!t.settings.custom_shortcuts)\n\t\t\t\treturn false;\n\n\t\t\tt.shortcuts = t.shortcuts || {};\n\n\t\t\tif (is(cmd_func, 'string')) {\n\t\t\t\tc = cmd_func;\n\n\t\t\t\tcmd_func = function() {\n\t\t\t\t\tt.execCommand(c, false, null);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (is(cmd_func, 'object')) {\n\t\t\t\tc = cmd_func;\n\n\t\t\t\tcmd_func = function() {\n\t\t\t\t\tt.execCommand(c[0], c[1], c[2]);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\teach(explode(pa), function(pa) {\n\t\t\t\tvar o = {\n\t\t\t\t\tfunc : cmd_func,\n\t\t\t\t\tscope : sc || this,\n\t\t\t\t\tdesc : desc,\n\t\t\t\t\talt : false,\n\t\t\t\t\tctrl : false,\n\t\t\t\t\tshift : false\n\t\t\t\t};\n\n\t\t\t\teach(explode(pa, '+'), function(v) {\n\t\t\t\t\tswitch (v) {\n\t\t\t\t\t\tcase 'alt':\n\t\t\t\t\t\tcase 'ctrl':\n\t\t\t\t\t\tcase 'shift':\n\t\t\t\t\t\t\to[v] = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\to.charCode = v.charCodeAt(0);\n\t\t\t\t\t\t\to.keyCode = v.toUpperCase().charCodeAt(0);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tt.shortcuts[(o.ctrl ? 'ctrl' : '') + ',' + (o.alt ? 'alt' : '') + ',' + (o.shift ? 'shift' : '') + ',' + o.keyCode] = o;\n\t\t\t});\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * Executes a command on the current instance. These commands can be TinyMCE internal commands prefixed with \"mce\" or\n\t\t * they can be build in browser commands such as \"Bold\". A compleate list of browser commands is available on MSDN or Mozilla.org.\n\t\t * This function will dispatch the execCommand function on each plugin, theme or the execcommand_callback option if none of these\n\t\t * return true it will handle the command as a internal browser command.\n\t\t *\n\t\t * @method execCommand\n\t\t * @param {String} cmd Command name to execute, for example mceLink or Bold.\n\t\t * @param {Boolean} ui True/false state if a UI (dialog) should be presented or not.\n\t\t * @param {mixed} val Optional command value, this can be anything.\n\t\t * @param {Object} a Optional arguments object.\n\t\t * @return {Boolean} True/false if the command was executed or not.\n\t\t */\n\t\texecCommand : function(cmd, ui, val, a) {\n\t\t\tvar t = this, s = 0, o, st;\n\n\t\t\tif (!/^(mceAddUndoLevel|mceEndUndoLevel|mceBeginUndoLevel|mceRepaint|SelectAll)$/.test(cmd) && (!a || !a.skip_focus))\n\t\t\t\tt.focus();\n\n\t\t\to = {};\n\t\t\tt.onBeforeExecCommand.dispatch(t, cmd, ui, val, o);\n\t\t\tif (o.terminate)\n\t\t\t\treturn false;\n\n\t\t\t// Command callback\n\t\t\tif (t.execCallback('execcommand_callback', t.id, t.selection.getNode(), cmd, ui, val)) {\n\t\t\t\tt.onExecCommand.dispatch(t, cmd, ui, val, a);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Registred commands\n\t\t\tif (o = t.execCommands[cmd]) {\n\t\t\t\tst = o.func.call(o.scope, ui, val);\n\n\t\t\t\t// Fall through on true\n\t\t\t\tif (st !== true) {\n\t\t\t\t\tt.onExecCommand.dispatch(t, cmd, ui, val, a);\n\t\t\t\t\treturn st;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Plugin commands\n\t\t\teach(t.plugins, function(p) {\n\t\t\t\tif (p.execCommand && p.execCommand(cmd, ui, val)) {\n\t\t\t\t\tt.onExecCommand.dispatch(t, cmd, ui, val, a);\n\t\t\t\t\ts = 1;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (s)\n\t\t\t\treturn true;\n\n\t\t\t// Theme commands\n\t\t\tif (t.theme && t.theme.execCommand && t.theme.execCommand(cmd, ui, val)) {\n\t\t\t\tt.onExecCommand.dispatch(t, cmd, ui, val, a);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Editor commands\n\t\t\tif (t.editorCommands.execCommand(cmd, ui, val)) {\n\t\t\t\tt.onExecCommand.dispatch(t, cmd, ui, val, a);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Browser commands\n\t\t\tt.getDoc().execCommand(cmd, ui, val);\n\t\t\tt.onExecCommand.dispatch(t, cmd, ui, val, a);\n\t\t},\n\n\t\t/**\n\t\t * Returns a command specific state, for example if bold is enabled or not.\n\t\t *\n\t\t * @method queryCommandState\n\t\t * @param {string} cmd Command to query state from.\n\t\t * @return {Boolean} Command specific state, for example if bold is enabled or not.\n\t\t */\n\t\tqueryCommandState : function(cmd) {\n\t\t\tvar t = this, o, s;\n\n\t\t\t// Is hidden then return undefined\n\t\t\tif (t._isHidden())\n\t\t\t\treturn;\n\n\t\t\t// Registred commands\n\t\t\tif (o = t.queryStateCommands[cmd]) {\n\t\t\t\ts = o.func.call(o.scope);\n\n\t\t\t\t// Fall though on true\n\t\t\t\tif (s !== true)\n\t\t\t\t\treturn s;\n\t\t\t}\n\n\t\t\t// Registred commands\n\t\t\to = t.editorCommands.queryCommandState(cmd);\n\t\t\tif (o !== -1)\n\t\t\t\treturn o;\n\n\t\t\t// Browser commands\n\t\t\ttry {\n\t\t\t\treturn this.getDoc().queryCommandState(cmd);\n\t\t\t} catch (ex) {\n\t\t\t\t// Fails sometimes see bug: 1896577\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Returns a command specific value, for example the current font size.\n\t\t *\n\t\t * @method queryCommandValue\n\t\t * @param {string} c Command to query value from.\n\t\t * @return {Object} Command specific value, for example the current font size.\n\t\t */\n\t\tqueryCommandValue : function(c) {\n\t\t\tvar t = this, o, s;\n\n\t\t\t// Is hidden then return undefined\n\t\t\tif (t._isHidden())\n\t\t\t\treturn;\n\n\t\t\t// Registred commands\n\t\t\tif (o = t.queryValueCommands[c]) {\n\t\t\t\ts = o.func.call(o.scope);\n\n\t\t\t\t// Fall though on true\n\t\t\t\tif (s !== true)\n\t\t\t\t\treturn s;\n\t\t\t}\n\n\t\t\t// Registred commands\n\t\t\to = t.editorCommands.queryCommandValue(c);\n\t\t\tif (is(o))\n\t\t\t\treturn o;\n\n\t\t\t// Browser commands\n\t\t\ttry {\n\t\t\t\treturn this.getDoc().queryCommandValue(c);\n\t\t\t} catch (ex) {\n\t\t\t\t// Fails sometimes see bug: 1896577\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows the editor and hides any textarea/div that the editor is supposed to replace.\n\t\t *\n\t\t * @method show\n\t\t */\n\t\tshow : function() {\n\t\t\tvar t = this;\n\n\t\t\tDOM.show(t.getContainer());\n\t\t\tDOM.hide(t.id);\n\t\t\tt.load();\n\t\t},\n\n\t\t/**\n\t\t * Hides the editor and shows any textarea/div that the editor is supposed to replace.\n\t\t *\n\t\t * @method hide\n\t\t */\n\t\thide : function() {\n\t\t\tvar t = this, d = t.getDoc();\n\n\t\t\t// Fixed bug where IE has a blinking cursor left from the editor\n\t\t\tif (isIE && d)\n\t\t\t\td.execCommand('SelectAll');\n\n\t\t\t// We must save before we hide so Safari doesn't crash\n\t\t\tt.save();\n\t\t\tDOM.hide(t.getContainer());\n\t\t\tDOM.setStyle(t.id, 'display', t.orgDisplay);\n\t\t},\n\n\t\t/**\n\t\t * Returns true/false if the editor is hidden or not.\n\t\t *\n\t\t * @method isHidden\n\t\t * @return {Boolean} True/false if the editor is hidden or not.\n\t\t */\n\t\tisHidden : function() {\n\t\t\treturn !DOM.isHidden(this.id);\n\t\t},\n\n\t\t/**\n\t\t * Sets the progress state, this will display a throbber/progess for the editor.\n\t\t * This is ideal for asycronous operations like an AJAX save call.\n\t\t *\n\t\t * @method setProgressState\n\t\t * @param {Boolean} b Boolean state if the progress should be shown or hidden.\n\t\t * @param {Number} ti Optional time to wait before the progress gets shown.\n\t\t * @param {Object} o Optional object to pass to the progress observers.\n\t\t * @return {Boolean} Same as the input state.\n\t\t * @example\n\t\t * // Show progress for the active editor\n\t\t * tinyMCE.activeEditor.setProgressState(true);\n\t\t *\n\t\t * // Hide progress for the active editor\n\t\t * tinyMCE.activeEditor.setProgressState(false);\n\t\t *\n\t\t * // Show progress after 3 seconds\n\t\t * tinyMCE.activeEditor.setProgressState(true, 3000);\n\t\t */\n\t\tsetProgressState : function(b, ti, o) {\n\t\t\tthis.onSetProgressState.dispatch(this, b, ti, o);\n\n\t\t\treturn b;\n\t\t},\n\n\t\t/**\n\t\t * Loads contents from the textarea or div element that got converted into an editor instance.\n\t\t * This method will move the contents from that textarea or div into the editor by using setContent\n\t\t * so all events etc that method has will get dispatched as well.\n\t\t *\n\t\t * @method load\n\t\t * @param {Object} o Optional content object, this gets passed around through the whole load process.\n\t\t * @return {String} HTML string that got set into the editor.\n\t\t */\n\t\tload : function(o) {\n\t\t\tvar t = this, e = t.getElement(), h;\n\n\t\t\tif (e) {\n\t\t\t\to = o || {};\n\t\t\t\to.load = true;\n\n\t\t\t\t// Double encode existing entities in the value\n\t\t\t\th = t.setContent(is(e.value) ? e.value : e.innerHTML, o);\n\t\t\t\to.element = e;\n\n\t\t\t\tif (!o.no_events)\n\t\t\t\t\tt.onLoadContent.dispatch(t, o);\n\n\t\t\t\to.element = e = null;\n\n\t\t\t\treturn h;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Saves the contents from a editor out to the textarea or div element that got converted into an editor instance.\n\t\t * This method will move the HTML contents from the editor into that textarea or div by getContent\n\t\t * so all events etc that method has will get dispatched as well.\n\t\t *\n\t\t * @method save\n\t\t * @param {Object} o Optional content object, this gets passed around through the whole save process.\n\t\t * @return {String} HTML string that got set into the textarea/div.\n\t\t */\n\t\tsave : function(o) {\n\t\t\tvar t = this, e = t.getElement(), h, f;\n\n\t\t\tif (!e || !t.initialized)\n\t\t\t\treturn;\n\n\t\t\to = o || {};\n\t\t\to.save = true;\n\n\t\t\t// Add undo level will trigger onchange event\n\t\t\tif (!o.no_events) {\n\t\t\t\tt.undoManager.typing = false;\n\t\t\t\tt.undoManager.add();\n\t\t\t}\n\n\t\t\to.element = e;\n\t\t\th = o.content = t.getContent(o);\n\n\t\t\tif (!o.no_events)\n\t\t\t\tt.onSaveContent.dispatch(t, o);\n\n\t\t\th = o.content;\n\n\t\t\tif (!/TEXTAREA|INPUT/i.test(e.nodeName)) {\n\t\t\t\te.innerHTML = h;\n\n\t\t\t\t// Update hidden form element\n\t\t\t\tif (f = DOM.getParent(t.id, 'form')) {\n\t\t\t\t\teach(f.elements, function(e) {\n\t\t\t\t\t\tif (e.name == t.id) {\n\t\t\t\t\t\t\te.value = h;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\te.value = h;\n\n\t\t\to.element = e = null;\n\n\t\t\treturn h;\n\t\t},\n\n\t\t/**\n\t\t * Sets the specified content to the editor instance, this will cleanup the content before it gets set using\n\t\t * the different cleanup rules options.\n\t\t *\n\t\t * @method setContent\n\t\t * @param {String} content Content to set to editor, normally HTML contents but can be other formats as well.\n\t\t * @param {Object} args Optional content object, this gets passed around through the whole set process.\n\t\t * @return {String} HTML string that got set into the editor.\n\t\t * @example\n\t\t * // Sets the HTML contents of the activeEditor editor\n\t\t * tinyMCE.activeEditor.setContent('<span>some</span> html');\n\t\t *\n\t\t * // Sets the raw contents of the activeEditor editor\n\t\t * tinyMCE.activeEditor.setContent('<span>some</span> html', {format : 'raw'});\n\t\t *\n\t\t * // Sets the content of a specific editor (my_editor in this example)\n\t\t * tinyMCE.get('my_editor').setContent(data);\n\t\t *\n\t\t * // Sets the bbcode contents of the activeEditor editor if the bbcode plugin was added\n\t\t * tinyMCE.activeEditor.setContent('[b]some[/b] html', {format : 'bbcode'});\n\t\t */\n\t\tsetContent : function(content, args) {\n\t\t\tvar self = this, rootNode, body = self.getBody(), forcedRootBlockName;\n\n\t\t\t// Setup args object\n\t\t\targs = args || {};\n\t\t\targs.format = args.format || 'html';\n\t\t\targs.set = true;\n\t\t\targs.content = content;\n\n\t\t\t// Do preprocessing\n\t\t\tif (!args.no_events)\n\t\t\t\tself.onBeforeSetContent.dispatch(self, args);\n\n\t\t\tcontent = args.content;\n\n\t\t\t// Padd empty content in Gecko and Safari. Commands will otherwise fail on the content\n\t\t\t// It will also be impossible to place the caret in the editor unless there is a BR element present\n\t\t\tif (!tinymce.isIE && (content.length === 0 || /^\\s+$/.test(content))) {\n\t\t\t\tforcedRootBlockName = self.settings.forced_root_block;\n\t\t\t\tif (forcedRootBlockName)\n\t\t\t\t\tcontent = '<' + forcedRootBlockName + '><br data-mce-bogus=\"1\"></' + forcedRootBlockName + '>';\n\t\t\t\telse\n\t\t\t\t\tcontent = '<br data-mce-bogus=\"1\">';\n\n\t\t\t\tbody.innerHTML = content;\n\t\t\t\tself.selection.select(body, true);\n\t\t\t\tself.selection.collapse(true);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Parse and serialize the html\n\t\t\tif (args.format !== 'raw') {\n\t\t\t\tcontent = new tinymce.html.Serializer({}, self.schema).serialize(\n\t\t\t\t\tself.parser.parse(content)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Set the new cleaned contents to the editor\n\t\t\targs.content = tinymce.trim(content);\n\t\t\tself.dom.setHTML(body, args.content);\n\n\t\t\t// Do post processing\n\t\t\tif (!args.no_events)\n\t\t\t\tself.onSetContent.dispatch(self, args);\n\n\t\t\tself.selection.normalize();\n\n\t\t\treturn args.content;\n\t\t},\n\n\t\t/**\n\t\t * Gets the content from the editor instance, this will cleanup the content before it gets returned using\n\t\t * the different cleanup rules options.\n\t\t *\n\t\t * @method getContent\n\t\t * @param {Object} args Optional content object, this gets passed around through the whole get process.\n\t\t * @return {String} Cleaned content string, normally HTML contents.\n\t\t * @example\n\t\t * // Get the HTML contents of the currently active editor\n\t\t * console.debug(tinyMCE.activeEditor.getContent());\n\t\t *\n\t\t * // Get the raw contents of the currently active editor\n\t\t * tinyMCE.activeEditor.getContent({format : 'raw'});\n\t\t *\n\t\t * // Get content of a specific editor:\n\t\t * tinyMCE.get('content id').getContent()\n\t\t */\n\t\tgetContent : function(args) {\n\t\t\tvar self = this, content;\n\n\t\t\t// Setup args object\n\t\t\targs = args || {};\n\t\t\targs.format = args.format || 'html';\n\t\t\targs.get = true;\n\n\t\t\t// Do preprocessing\n\t\t\tif (!args.no_events)\n\t\t\t\tself.onBeforeGetContent.dispatch(self, args);\n\n\t\t\t// Get raw contents or by default the cleaned contents\n\t\t\tif (args.format == 'raw')\n\t\t\t\tcontent = self.getBody().innerHTML;\n\t\t\telse\n\t\t\t\tcontent = self.serializer.serialize(self.getBody(), args);\n\n\t\t\targs.content = tinymce.trim(content);\n\n\t\t\t// Do post processing\n\t\t\tif (!args.no_events)\n\t\t\t\tself.onGetContent.dispatch(self, args);\n\n\t\t\treturn args.content;\n\t\t},\n\n\t\t/**\n\t\t * Returns true/false if the editor is dirty or not. It will get dirty if the user has made modifications to the contents.\n\t\t *\n\t\t * @method isDirty\n\t\t * @return {Boolean} True/false if the editor is dirty or not. It will get dirty if the user has made modifications to the contents.\n\t\t * @example\n\t\t * if (tinyMCE.activeEditor.isDirty())\n\t\t *     alert(\"You must save your contents.\");\n\t\t */\n\t\tisDirty : function() {\n\t\t\tvar self = this;\n\n\t\t\treturn tinymce.trim(self.startContent) != tinymce.trim(self.getContent({format : 'raw', no_events : 1})) && !self.isNotDirty;\n\t\t},\n\n\t\t/**\n\t\t * Returns the editors container element. The container element wrappes in\n\t\t * all the elements added to the page for the editor. Such as UI, iframe etc.\n\t\t *\n\t\t * @method getContainer\n\t\t * @return {Element} HTML DOM element for the editor container.\n\t\t */\n\t\tgetContainer : function() {\n\t\t\tvar t = this;\n\n\t\t\tif (!t.container)\n\t\t\t\tt.container = DOM.get(t.editorContainer || t.id + '_parent');\n\n\t\t\treturn t.container;\n\t\t},\n\n\t\t/**\n\t\t * Returns the editors content area container element. The this element is the one who\n\t\t * holds the iframe or the editable element.\n\t\t *\n\t\t * @method getContentAreaContainer\n\t\t * @return {Element} HTML DOM element for the editor area container.\n\t\t */\n\t\tgetContentAreaContainer : function() {\n\t\t\treturn this.contentAreaContainer;\n\t\t},\n\n\t\t/**\n\t\t * Returns the target element/textarea that got replaced with a TinyMCE editor instance.\n\t\t *\n\t\t * @method getElement\n\t\t * @return {Element} HTML DOM element for the replaced element.\n\t\t */\n\t\tgetElement : function() {\n\t\t\treturn DOM.get(this.settings.content_element || this.id);\n\t\t},\n\n\t\t/**\n\t\t * Returns the iframes window object.\n\t\t *\n\t\t * @method getWin\n\t\t * @return {Window} Iframe DOM window object.\n\t\t */\n\t\tgetWin : function() {\n\t\t\tvar t = this, e;\n\n\t\t\tif (!t.contentWindow) {\n\t\t\t\te = DOM.get(t.id + \"_ifr\");\n\n\t\t\t\tif (e)\n\t\t\t\t\tt.contentWindow = e.contentWindow;\n\t\t\t}\n\n\t\t\treturn t.contentWindow;\n\t\t},\n\n\t\t/**\n\t\t * Returns the iframes document object.\n\t\t *\n\t\t * @method getDoc\n\t\t * @return {Document} Iframe DOM document object.\n\t\t */\n\t\tgetDoc : function() {\n\t\t\tvar t = this, w;\n\n\t\t\tif (!t.contentDocument) {\n\t\t\t\tw = t.getWin();\n\n\t\t\t\tif (w)\n\t\t\t\t\tt.contentDocument = w.document;\n\t\t\t}\n\n\t\t\treturn t.contentDocument;\n\t\t},\n\n\t\t/**\n\t\t * Returns the iframes body element.\n\t\t *\n\t\t * @method getBody\n\t\t * @return {Element} Iframe body element.\n\t\t */\n\t\tgetBody : function() {\n\t\t\treturn this.bodyElement || this.getDoc().body;\n\t\t},\n\n\t\t/**\n\t\t * URL converter function this gets executed each time a user adds an img, a or\n\t\t * any other element that has a URL in it. This will be called both by the DOM and HTML\n\t\t * manipulation functions.\n\t\t *\n\t\t * @method convertURL\n\t\t * @param {string} u URL to convert.\n\t\t * @param {string} n Attribute name src, href etc.\n\t\t * @param {string/HTMLElement} Tag name or HTML DOM element depending on HTML or DOM insert.\n\t\t * @return {string} Converted URL string.\n\t\t */\n\t\tconvertURL : function(u, n, e) {\n\t\t\tvar t = this, s = t.settings;\n\n\t\t\t// Use callback instead\n\t\t\tif (s.urlconverter_callback)\n\t\t\t\treturn t.execCallback('urlconverter_callback', u, e, true, n);\n\n\t\t\t// Don't convert link href since thats the CSS files that gets loaded into the editor also skip local file URLs\n\t\t\tif (!s.convert_urls || (e && e.nodeName == 'LINK') || u.indexOf('file:') === 0)\n\t\t\t\treturn u;\n\n\t\t\t// Convert to relative\n\t\t\tif (s.relative_urls)\n\t\t\t\treturn t.documentBaseURI.toRelative(u);\n\n\t\t\t// Convert to absolute\n\t\t\tu = t.documentBaseURI.toAbsolute(u, s.remove_script_host);\n\n\t\t\treturn u;\n\t\t},\n\n\t\t/**\n\t\t * Adds visual aid for tables, anchors etc so they can be more easily edited inside the editor.\n\t\t *\n\t\t * @method addVisual\n\t\t * @param {Element} e Optional root element to loop though to find tables etc that needs the visual aid.\n\t\t */\n\t\taddVisual : function(e) {\n\t\t\tvar t = this, s = t.settings;\n\n\t\t\te = e || t.getBody();\n\n\t\t\tif (!is(t.hasVisual))\n\t\t\t\tt.hasVisual = s.visual;\n\n\t\t\teach(t.dom.select('table,a', e), function(e) {\n\t\t\t\tvar v;\n\n\t\t\t\tswitch (e.nodeName) {\n\t\t\t\t\tcase 'TABLE':\n\t\t\t\t\t\tv = t.dom.getAttrib(e, 'border');\n\n\t\t\t\t\t\tif (!v || v == '0') {\n\t\t\t\t\t\t\tif (t.hasVisual)\n\t\t\t\t\t\t\t\tt.dom.addClass(e, s.visual_table_class);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tt.dom.removeClass(e, s.visual_table_class);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tcase 'A':\n\t\t\t\t\t\tv = t.dom.getAttrib(e, 'name');\n\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tif (t.hasVisual)\n\t\t\t\t\t\t\t\tt.dom.addClass(e, 'mceItemAnchor');\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tt.dom.removeClass(e, 'mceItemAnchor');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tt.onVisualAid.dispatch(t, e, t.hasVisual);\n\t\t},\n\n\t\t/**\n\t\t * Removes the editor from the dom and tinymce collection.\n\t\t *\n\t\t * @method remove\n\t\t */\n\t\tremove : function() {\n\t\t\tvar t = this, e = t.getContainer();\n\n\t\t\tt.removed = 1; // Cancels post remove event execution\n\t\t\tt.hide();\n\n\t\t\tt.execCallback('remove_instance_callback', t);\n\t\t\tt.onRemove.dispatch(t);\n\n\t\t\t// Clear all execCommand listeners this is required to avoid errors if the editor was removed inside another command\n\t\t\tt.onExecCommand.listeners = [];\n\n\t\t\ttinymce.remove(t);\n\t\t\tDOM.remove(e);\n\t\t},\n\n\t\t/**\n\t\t * Destroys the editor instance by removing all events, element references or other resources\n\t\t * that could leak memory. This method will be called automatically when the page is unloaded\n\t\t * but you can also call it directly if you know what you are doing.\n\t\t *\n\t\t * @method destroy\n\t\t * @param {Boolean} s Optional state if the destroy is an automatic destroy or user called one.\n\t\t */\n\t\tdestroy : function(s) {\n\t\t\tvar t = this;\n\n\t\t\t// One time is enough\n\t\t\tif (t.destroyed)\n\t\t\t\treturn;\n\n\t\t\tif (!s) {\n\t\t\t\ttinymce.removeUnload(t.destroy);\n\t\t\t\ttinyMCE.onBeforeUnload.remove(t._beforeUnload);\n\n\t\t\t\t// Manual destroy\n\t\t\t\tif (t.theme && t.theme.destroy)\n\t\t\t\t\tt.theme.destroy();\n\n\t\t\t\t// Destroy controls, selection and dom\n\t\t\t\tt.controlManager.destroy();\n\t\t\t\tt.selection.destroy();\n\t\t\t\tt.dom.destroy();\n\n\t\t\t\t// Remove all events\n\n\t\t\t\t// Don't clear the window or document if content editable\n\t\t\t\t// is enabled since other instances might still be present\n\t\t\t\tif (!t.settings.content_editable) {\n\t\t\t\t\tEvent.clear(t.getWin());\n\t\t\t\t\tEvent.clear(t.getDoc());\n\t\t\t\t}\n\n\t\t\t\tEvent.clear(t.getBody());\n\t\t\t\tEvent.clear(t.formElement);\n\t\t\t}\n\n\t\t\tif (t.formElement) {\n\t\t\t\tt.formElement.submit = t.formElement._mceOldSubmit;\n\t\t\t\tt.formElement._mceOldSubmit = null;\n\t\t\t}\n\n\t\t\tt.contentAreaContainer = t.formElement = t.container = t.settings.content_element = t.bodyElement = t.contentDocument = t.contentWindow = null;\n\n\t\t\tif (t.selection)\n\t\t\t\tt.selection = t.selection.win = t.selection.dom = t.selection.dom.doc = null;\n\n\t\t\tt.destroyed = 1;\n\t\t},\n\n\t\t// Internal functions\n\n\t\t_addEvents : function() {\n\t\t\t// 'focus', 'blur', 'dblclick', 'beforedeactivate', submit, reset\n\t\t\tvar t = this, i, s = t.settings, dom = t.dom, lo = {\n\t\t\t\tmouseup : 'onMouseUp',\n\t\t\t\tmousedown : 'onMouseDown',\n\t\t\t\tclick : 'onClick',\n\t\t\t\tkeyup : 'onKeyUp',\n\t\t\t\tkeydown : 'onKeyDown',\n\t\t\t\tkeypress : 'onKeyPress',\n\t\t\t\tsubmit : 'onSubmit',\n\t\t\t\treset : 'onReset',\n\t\t\t\tcontextmenu : 'onContextMenu',\n\t\t\t\tdblclick : 'onDblClick',\n\t\t\t\tpaste : 'onPaste' // Doesn't work in all browsers yet\n\t\t\t};\n\n\t\t\tfunction eventHandler(e, o) {\n\t\t\t\tvar ty = e.type;\n\n\t\t\t\t// Don't fire events when it's removed\n\t\t\t\tif (t.removed)\n\t\t\t\t\treturn;\n\n\t\t\t\t// Generic event handler\n\t\t\t\tif (t.onEvent.dispatch(t, e, o) !== false) {\n\t\t\t\t\t// Specific event handler\n\t\t\t\t\tt[lo[e.fakeType || e.type]].dispatch(t, e, o);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Add DOM events\n\t\t\teach(lo, function(v, k) {\n\t\t\t\tswitch (k) {\n\t\t\t\t\tcase 'contextmenu':\n\t\t\t\t\t\tdom.bind(t.getDoc(), k, eventHandler);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'paste':\n\t\t\t\t\t\tdom.bind(t.getBody(), k, function(e) {\n\t\t\t\t\t\t\teventHandler(e);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'submit':\n\t\t\t\t\tcase 'reset':\n\t\t\t\t\t\tdom.bind(t.getElement().form || DOM.getParent(t.id, 'form'), k, eventHandler);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdom.bind(s.content_editable ? t.getBody() : t.getDoc(), k, eventHandler);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdom.bind(s.content_editable ? t.getBody() : (isGecko ? t.getDoc() : t.getWin()), 'focus', function(e) {\n\t\t\t\tt.focus(true);\n\t\t\t});\n\n\t\t\t// #ifdef contentEditable\n\n\t\t\tif (s.content_editable && tinymce.isOpera) {\n\t\t\t\t// Opera doesn't support focus event for contentEditable elements so we need to fake it\n\t\t\t\tfunction doFocus(e) {\n\t\t\t\t\tt.focus(true);\n\t\t\t\t};\n\n\t\t\t\tdom.bind(t.getBody(), 'click', doFocus);\n\t\t\t\tdom.bind(t.getBody(), 'keydown', doFocus);\n\t\t\t}\n\n\t\t\t// #endif\n\n\t\t\t// Fixes bug where a specified document_base_uri could result in broken images\n\t\t\t// This will also fix drag drop of images in Gecko\n\t\t\tif (tinymce.isGecko) {\n\t\t\t\tdom.bind(t.getDoc(), 'DOMNodeInserted', function(e) {\n\t\t\t\t\tvar v;\n\n\t\t\t\t\te = e.target;\n\n\t\t\t\t\tif (e.nodeType === 1 && e.nodeName === 'IMG' && (v = e.getAttribute('data-mce-src')))\n\t\t\t\t\t\te.src = t.documentBaseURI.toAbsolute(v);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Set various midas options in Gecko\n\t\t\tif (isGecko) {\n\t\t\t\tfunction setOpts() {\n\t\t\t\t\tvar t = this, d = t.getDoc(), s = t.settings;\n\n\t\t\t\t\tif (isGecko && !s.readonly) {\n\t\t\t\t\t\tt._refreshContentEditable();\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Try new Gecko method\n\t\t\t\t\t\t\td.execCommand(\"styleWithCSS\", 0, false);\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t// Use old method\n\t\t\t\t\t\t\tif (!t._isHidden())\n\t\t\t\t\t\t\t\ttry {d.execCommand(\"useCSS\", 0, true);} catch (ex) {}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!s.table_inline_editing)\n\t\t\t\t\t\t\ttry {d.execCommand('enableInlineTableEditing', false, false);} catch (ex) {}\n\n\t\t\t\t\t\tif (!s.object_resizing)\n\t\t\t\t\t\t\ttry {d.execCommand('enableObjectResizing', false, false);} catch (ex) {}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tt.onBeforeExecCommand.add(setOpts);\n\t\t\t\tt.onMouseDown.add(setOpts);\n\t\t\t}\n\n\t\t\t// Add node change handlers\n\t\t\tt.onMouseUp.add(t.nodeChanged);\n\t\t\t//t.onClick.add(t.nodeChanged);\n\t\t\tt.onKeyUp.add(function(ed, e) {\n\t\t\t\tvar c = e.keyCode;\n\n\t\t\t\tif ((c >= 33 && c <= 36) || (c >= 37 && c <= 40) || c == 13 || c == 45 || c == 46 || c == 8 || (tinymce.isMac && (c == 91 || c == 93)) || e.ctrlKey)\n\t\t\t\t\tt.nodeChanged();\n\t\t\t});\n\n\n\t\t\t// Add block quote deletion handler\n\t\t\tt.onKeyDown.add(function(ed, e) {\n\t\t\t\t// Was the BACKSPACE key pressed?\n\t\t\t\tif (e.keyCode != 8)\n\t\t\t\t\treturn;\n\n\t\t\t\tvar n = ed.selection.getRng().startContainer;\n\t\t\t\tvar offset = ed.selection.getRng().startOffset;\n\n\t\t\t\twhile (n && n.nodeType && n.nodeType != 1 && n.parentNode)\n\t\t\t\t\tn = n.parentNode;\n\n\t\t\t\t// Is the cursor at the beginning of a blockquote?\n\t\t\t\tif (n && n.parentNode && n.parentNode.tagName === 'BLOCKQUOTE' && n.parentNode.firstChild == n && offset == 0) {\n\t\t\t\t\t// Remove the blockquote\n\t\t\t\t\ted.formatter.toggle('blockquote', null, n.parentNode);\n\n\t\t\t\t\t// Move the caret to the beginning of n\n\t\t\t\t\tvar rng = ed.selection.getRng();\n\t\t\t\t\trng.setStart(n, 0);\n\t\t\t\t\trng.setEnd(n, 0);\n\t\t\t\t\ted.selection.setRng(rng);\n\t\t\t\t\ted.selection.collapse(false);\n\t\t\t\t}\n\t\t\t});\n\n\n\n\t\t\t// Add reset handler\n\t\t\tt.onReset.add(function() {\n\t\t\t\tt.setContent(t.startContent, {format : 'raw'});\n\t\t\t});\n\n\t\t\t// Add shortcuts\n\t\t\tif (s.custom_shortcuts) {\n\t\t\t\tif (s.custom_undo_redo_keyboard_shortcuts) {\n\t\t\t\t\tt.addShortcut('ctrl+z', t.getLang('undo_desc'), 'Undo');\n\t\t\t\t\tt.addShortcut('ctrl+y', t.getLang('redo_desc'), 'Redo');\n\t\t\t\t}\n\n\t\t\t\t// Add default shortcuts for gecko\n\t\t\t\tt.addShortcut('ctrl+b', t.getLang('bold_desc'), 'Bold');\n\t\t\t\tt.addShortcut('ctrl+i', t.getLang('italic_desc'), 'Italic');\n\t\t\t\tt.addShortcut('ctrl+u', t.getLang('underline_desc'), 'Underline');\n\n\t\t\t\t// BlockFormat shortcuts keys\n\t\t\t\tfor (i=1; i<=6; i++)\n\t\t\t\t\tt.addShortcut('ctrl+' + i, '', ['FormatBlock', false, 'h' + i]);\n\n\t\t\t\tt.addShortcut('ctrl+7', '', ['FormatBlock', false, 'p']);\n\t\t\t\tt.addShortcut('ctrl+8', '', ['FormatBlock', false, 'div']);\n\t\t\t\tt.addShortcut('ctrl+9', '', ['FormatBlock', false, 'address']);\n\n\t\t\t\tfunction find(e) {\n\t\t\t\t\tvar v = null;\n\n\t\t\t\t\tif (!e.altKey && !e.ctrlKey && !e.metaKey)\n\t\t\t\t\t\treturn v;\n\n\t\t\t\t\teach(t.shortcuts, function(o) {\n\t\t\t\t\t\tif (tinymce.isMac && o.ctrl != e.metaKey)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\telse if (!tinymce.isMac && o.ctrl != e.ctrlKey)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tif (o.alt != e.altKey)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tif (o.shift != e.shiftKey)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tif (e.keyCode == o.keyCode || (e.charCode && e.charCode == o.charCode)) {\n\t\t\t\t\t\t\tv = o;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn v;\n\t\t\t\t};\n\n\t\t\t\tt.onKeyUp.add(function(ed, e) {\n\t\t\t\t\tvar o = find(e);\n\n\t\t\t\t\tif (o)\n\t\t\t\t\t\treturn Event.cancel(e);\n\t\t\t\t});\n\n\t\t\t\tt.onKeyPress.add(function(ed, e) {\n\t\t\t\t\tvar o = find(e);\n\n\t\t\t\t\tif (o)\n\t\t\t\t\t\treturn Event.cancel(e);\n\t\t\t\t});\n\n\t\t\t\tt.onKeyDown.add(function(ed, e) {\n\t\t\t\t\tvar o = find(e);\n\n\t\t\t\t\tif (o) {\n\t\t\t\t\t\to.func.call(o.scope);\n\t\t\t\t\t\treturn Event.cancel(e);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (tinymce.isIE) {\n\t\t\t\t// Fix so resize will only update the width and height attributes not the styles of an image\n\t\t\t\t// It will also block mceItemNoResize items\n\t\t\t\tdom.bind(t.getDoc(), 'controlselect', function(e) {\n\t\t\t\t\tvar re = t.resizeInfo, cb;\n\n\t\t\t\t\te = e.target;\n\n\t\t\t\t\t// Don't do this action for non image elements\n\t\t\t\t\tif (e.nodeName !== 'IMG')\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tif (re)\n\t\t\t\t\t\tdom.unbind(re.node, re.ev, re.cb);\n\n\t\t\t\t\tif (!dom.hasClass(e, 'mceItemNoResize')) {\n\t\t\t\t\t\tev = 'resizeend';\n\t\t\t\t\t\tcb = dom.bind(e, ev, function(e) {\n\t\t\t\t\t\t\tvar v;\n\n\t\t\t\t\t\t\te = e.target;\n\n\t\t\t\t\t\t\tif (v = dom.getStyle(e, 'width')) {\n\t\t\t\t\t\t\t\tdom.setAttrib(e, 'width', v.replace(/[^0-9%]+/g, ''));\n\t\t\t\t\t\t\t\tdom.setStyle(e, 'width', '');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (v = dom.getStyle(e, 'height')) {\n\t\t\t\t\t\t\t\tdom.setAttrib(e, 'height', v.replace(/[^0-9%]+/g, ''));\n\t\t\t\t\t\t\t\tdom.setStyle(e, 'height', '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tev = 'resizestart';\n\t\t\t\t\t\tcb = dom.bind(e, 'resizestart', Event.cancel, Event);\n\t\t\t\t\t}\n\n\t\t\t\t\tre = t.resizeInfo = {\n\t\t\t\t\t\tnode : e,\n\t\t\t\t\t\tev : ev,\n\t\t\t\t\t\tcb : cb\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (tinymce.isOpera) {\n\t\t\t\tt.onClick.add(function(ed, e) {\n\t\t\t\t\tEvent.prevent(e);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add custom undo/redo handlers\n\t\t\tif (s.custom_undo_redo) {\n\t\t\t\tfunction addUndo() {\n\t\t\t\t\tt.undoManager.typing = false;\n\t\t\t\t\tt.undoManager.add();\n\t\t\t\t};\n\n\t\t\t\tdom.bind(t.getDoc(), 'focusout', function(e) {\n\t\t\t\t\tif (!t.removed && t.undoManager.typing)\n\t\t\t\t\t\taddUndo();\n\t\t\t\t});\n\n\t\t\t\t// Add undo level when contents is drag/dropped within the editor\n\t\t\t\tt.dom.bind(t.dom.getRoot(), 'dragend', function(e) {\n\t\t\t\t\taddUndo();\n\t\t\t\t});\n\n\t\t\t\tt.onKeyUp.add(function(ed, e) {\n\t\t\t\t\tvar keyCode = e.keyCode;\n\n\t\t\t\t\tif ((keyCode >= 33 && keyCode <= 36) || (keyCode >= 37 && keyCode <= 40) || keyCode == 13 || keyCode == 45 || e.ctrlKey)\n\t\t\t\t\t\taddUndo();\n\t\t\t\t});\n\n\t\t\t\tt.onKeyDown.add(function(ed, e) {\n\t\t\t\t\tvar keyCode = e.keyCode, sel;\n\n\t\t\t\t\tif (keyCode == 8) {\n\t\t\t\t\t\tsel = t.getDoc().selection;\n\n\t\t\t\t\t\t// Fix IE control + backspace browser bug\n\t\t\t\t\t\tif (sel && sel.createRange && sel.createRange().item) {\n\t\t\t\t\t\t\tt.undoManager.beforeChange();\n\t\t\t\t\t\t\ted.dom.remove(sel.createRange().item(0));\n\t\t\t\t\t\t\taddUndo();\n\n\t\t\t\t\t\t\treturn Event.cancel(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Is caracter positon keys left,right,up,down,home,end,pgdown,pgup,enter\n\t\t\t\t\tif ((keyCode >= 33 && keyCode <= 36) || (keyCode >= 37 && keyCode <= 40) || keyCode == 13 || keyCode == 45) {\n\t\t\t\t\t\t// Add position before enter key is pressed, used by IE since it still uses the default browser behavior\n\t\t\t\t\t\t// Todo: Remove this once we normalize enter behavior on IE\n\t\t\t\t\t\tif (tinymce.isIE && keyCode == 13)\n\t\t\t\t\t\t\tt.undoManager.beforeChange();\n\n\t\t\t\t\t\tif (t.undoManager.typing)\n\t\t\t\t\t\t\taddUndo();\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If key isn't shift,ctrl,alt,capslock,metakey\n\t\t\t\t\tif ((keyCode < 16 || keyCode > 20) && keyCode != 224 && keyCode != 91 && !t.undoManager.typing) {\n\t\t\t\t\t\tt.undoManager.beforeChange();\n\t\t\t\t\t\tt.undoManager.typing = true;\n\t\t\t\t\t\tt.undoManager.add();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tt.onMouseDown.add(function() {\n\t\t\t\t\tif (t.undoManager.typing)\n\t\t\t\t\t\taddUndo();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Bug fix for FireFox keeping styles from end of selection instead of start.\n\t\t\tif (tinymce.isGecko) {\n\t\t\t\tfunction getAttributeApplyFunction() {\n\t\t\t\t\tvar template = t.dom.getAttribs(t.selection.getStart().cloneNode(false));\n\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tvar target = t.selection.getStart();\n\n\t\t\t\t\t\tif (target !== t.getBody()) {\n\t\t\t\t\t\t\tt.dom.setAttrib(target, \"style\", null);\n\n\t\t\t\t\t\t\teach(template, function(attr) {\n\t\t\t\t\t\t\t\ttarget.setAttributeNode(attr.cloneNode(true));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tfunction isSelectionAcrossElements() {\n\t\t\t\t\tvar s = t.selection;\n\n\t\t\t\t\treturn !s.isCollapsed() && s.getStart() != s.getEnd();\n\t\t\t\t}\n\n\t\t\t\tt.onKeyPress.add(function(ed, e) {\n\t\t\t\t\tvar applyAttributes;\n\n\t\t\t\t\tif ((e.keyCode == 8 || e.keyCode == 46) && isSelectionAcrossElements()) {\n\t\t\t\t\t\tapplyAttributes = getAttributeApplyFunction();\n\t\t\t\t\t\tt.getDoc().execCommand('delete', false, null);\n\t\t\t\t\t\tapplyAttributes();\n\n\t\t\t\t\t\treturn Event.cancel(e);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tt.dom.bind(t.getDoc(), 'cut', function(e) {\n\t\t\t\t\tvar applyAttributes;\n\n\t\t\t\t\tif (isSelectionAcrossElements()) {\n\t\t\t\t\t\tapplyAttributes = getAttributeApplyFunction();\n\t\t\t\t\t\tt.onKeyUp.addToTop(Event.cancel, Event);\n\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tapplyAttributes();\n\t\t\t\t\t\t\tt.onKeyUp.remove(Event.cancel, Event);\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t_refreshContentEditable : function() {\n\t\t\tvar self = this, body, parent;\n\n\t\t\t// Check if the editor was hidden and the re-initalize contentEditable mode by removing and adding the body again\n\t\t\tif (self._isHidden()) {\n\t\t\t\tbody = self.getBody();\n\t\t\t\tparent = body.parentNode;\n\n\t\t\t\tparent.removeChild(body);\n\t\t\t\tparent.appendChild(body);\n\n\t\t\t\tbody.focus();\n\t\t\t}\n\t\t},\n\n\t\t_isHidden : function() {\n\t\t\tvar s;\n\n\t\t\tif (!isGecko)\n\t\t\t\treturn 0;\n\n\t\t\t// Weird, wheres that cursor selection?\n\t\t\ts = this.selection.getSel();\n\t\t\treturn (!s || !s.rangeCount || s.rangeCount == 0);\n\t\t}\n\t});\n})(tinymce);\n"}
}});
