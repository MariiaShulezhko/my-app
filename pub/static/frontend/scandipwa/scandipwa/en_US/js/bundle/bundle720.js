require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/classes/ui/MenuButton.js":"/**\n * MenuButton.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n(function(tinymce) {\n\tvar DOM = tinymce.DOM, Event = tinymce.dom.Event, each = tinymce.each;\n\n\t/**\n\t * This class is used to create a UI button. A button is basically a link\n\t * that is styled to look like a button or icon.\n\t *\n\t * @class tinymce.ui.MenuButton\n\t * @extends tinymce.ui.Control\n\t * @example\n\t * // Creates a new plugin class and a custom menu button\n\t * tinymce.create('tinymce.plugins.ExamplePlugin', {\n\t *     createControl: function(n, cm) {\n\t *         switch (n) {\n\t *             case 'mymenubutton':\n\t *                 var c = cm.createSplitButton('mysplitbutton', {\n\t *                     title : 'My menu button',\n\t *                     image : 'some.gif'\n\t *                 });\n\t * \n\t *                 c.onRenderMenu.add(function(c, m) {\n\t *                     m.add({title : 'Some title', 'class' : 'mceMenuItemTitle'}).setDisabled(1);\n\t * \n\t *                     m.add({title : 'Some item 1', onclick : function() {\n\t *                         alert('Some item 1 was clicked.');\n\t *                     }});\n\t * \n\t *                     m.add({title : 'Some item 2', onclick : function() {\n\t *                         alert('Some item 2 was clicked.');\n\t *                     }});\n\t *               });\n\t * \n\t *               // Return the new menubutton instance\n\t *               return c;\n\t *         }\n\t * \n\t *         return null;\n\t *     }\n\t * });\n\t */\n\ttinymce.create('tinymce.ui.MenuButton:tinymce.ui.Button', {\n\t\t/**\n\t\t * Constructs a new split button control instance.\n\t\t *\n\t\t * @constructor\n\t\t * @method MenuButton\n\t\t * @param {String} id Control id for the split button.\n\t\t * @param {Object} s Optional name/value settings object.\n\t\t * @param {Editor} ed Optional the editor instance this button is for.\n\t\t */\n\t\tMenuButton : function(id, s, ed) {\n\t\t\tthis.parent(id, s, ed);\n\n\t\t\t/**\n\t\t\t * Fires when the menu is rendered.\n\t\t\t *\n\t\t\t * @event onRenderMenu\n\t\t\t */\n\t\t\tthis.onRenderMenu = new tinymce.util.Dispatcher(this);\n\n\t\t\ts.menu_container = s.menu_container || DOM.doc.body;\n\t\t},\n\n\t\t/**\n\t\t * Shows the menu.\n\t\t *\n\t\t * @method showMenu\n\t\t */\n\t\tshowMenu : function() {\n\t\t\tvar t = this, p1, p2, e = DOM.get(t.id), m;\n\n\t\t\tif (t.isDisabled())\n\t\t\t\treturn;\n\n\t\t\tif (!t.isMenuRendered) {\n\t\t\t\tt.renderMenu();\n\t\t\t\tt.isMenuRendered = true;\n\t\t\t}\n\n\t\t\tif (t.isMenuVisible)\n\t\t\t\treturn t.hideMenu();\n\n\t\t\tp1 = DOM.getPos(t.settings.menu_container);\n\t\t\tp2 = DOM.getPos(e);\n\n\t\t\tm = t.menu;\n\t\t\tm.settings.offset_x = p2.x;\n\t\t\tm.settings.offset_y = p2.y;\n\t\t\tm.settings.vp_offset_x = p2.x;\n\t\t\tm.settings.vp_offset_y = p2.y;\n\t\t\tm.settings.keyboard_focus = t._focused;\n\t\t\tm.showMenu(0, e.clientHeight);\n\n\t\t\tEvent.add(DOM.doc, 'mousedown', t.hideMenu, t);\n\t\t\tt.setState('Selected', 1);\n\n\t\t\tt.isMenuVisible = 1;\n\t\t},\n\n\t\t/**\n\t\t * Renders the menu to the DOM.\n\t\t *\n\t\t * @method renderMenu\n\t\t */\n\t\trenderMenu : function() {\n\t\t\tvar t = this, m;\n\n\t\t\tm = t.settings.control_manager.createDropMenu(t.id + '_menu', {\n\t\t\t\tmenu_line : 1,\n\t\t\t\t'class' : this.classPrefix + 'Menu',\n\t\t\t\ticons : t.settings.icons\n\t\t\t});\n\n\t\t\tm.onHideMenu.add(function() {\n\t\t\t\tt.hideMenu();\n\t\t\t\tt.focus();\n\t\t\t});\n\n\t\t\tt.onRenderMenu.dispatch(t, m);\n\t\t\tt.menu = m;\n\t\t},\n\n\t\t/**\n\t\t * Hides the menu. The optional event parameter is used to check where the event occurred so it\n\t\t * doesn't close them menu if it was a event inside the menu.\n\t\t *\n\t\t * @method hideMenu\n\t\t * @param {Event} e Optional event object.\n\t\t */\n\t\thideMenu : function(e) {\n\t\t\tvar t = this;\n\n\t\t\t// Prevent double toogles by canceling the mouse click event to the button\n\t\t\tif (e && e.type == \"mousedown\" && DOM.getParent(e.target, function(e) {return e.id === t.id || e.id === t.id + '_open';}))\n\t\t\t\treturn;\n\n\t\t\tif (!e || !DOM.getParent(e.target, '.mceMenu')) {\n\t\t\t\tt.setState('Selected', 0);\n\t\t\t\tEvent.remove(DOM.doc, 'mousedown', t.hideMenu, t);\n\t\t\t\tif (t.menu)\n\t\t\t\t\tt.menu.hideMenu();\n\t\t\t}\n\n\t\t\tt.isMenuVisible = 0;\n\t\t},\n\n\t\t/**\n\t\t * Post render handler. This function will be called after the UI has been\n\t\t * rendered so that events can be added.\n\t\t *\n\t\t * @method postRender\n\t\t */\n\t\tpostRender : function() {\n\t\t\tvar t = this, s = t.settings;\n\n\t\t\tEvent.add(t.id, 'click', function() {\n\t\t\t\tif (!t.isDisabled()) {\n\t\t\t\t\tif (s.onclick)\n\t\t\t\t\t\ts.onclick(t.value);\n\n\t\t\t\t\tt.showMenu();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n})(tinymce);\n"}
}});
