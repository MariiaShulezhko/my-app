require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/classes/dom/DOMUtils.js":"/**\n * DOMUtils.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n(function(tinymce) {\n\t// Shorten names\n\tvar each = tinymce.each,\n\t\tis = tinymce.is,\n\t\tisWebKit = tinymce.isWebKit,\n\t\tisIE = tinymce.isIE,\n\t\tEntities = tinymce.html.Entities,\n\t\tsimpleSelectorRe = /^([a-z0-9],?)+$/i,\n\t\tblockElementsMap = tinymce.html.Schema.blockElementsMap,\n\t\twhiteSpaceRegExp = /^[ \\t\\r\\n]*$/;\n\n\t/**\n\t * Utility class for various DOM manipulation and retrival functions.\n\t *\n\t * @class tinymce.dom.DOMUtils\n\t * @example\n\t * // Add a class to an element by id in the page\n\t * tinymce.DOM.addClass('someid', 'someclass');\n\t *\n\t * // Add a class to an element by id inside the editor\n\t * tinyMCE.activeEditor.dom.addClass('someid', 'someclass');\n\t */\n\ttinymce.create('tinymce.dom.DOMUtils', {\n\t\tdoc : null,\n\t\troot : null,\n\t\tfiles : null,\n\t\tpixelStyles : /^(top|left|bottom|right|width|height|borderWidth)$/,\n\t\tprops : {\n\t\t\t\"for\" : \"htmlFor\",\n\t\t\t\"class\" : \"className\",\n\t\t\tclassName : \"className\",\n\t\t\tchecked : \"checked\",\n\t\t\tdisabled : \"disabled\",\n\t\t\tmaxlength : \"maxLength\",\n\t\t\treadonly : \"readOnly\",\n\t\t\tselected : \"selected\",\n\t\t\tvalue : \"value\",\n\t\t\tid : \"id\",\n\t\t\tname : \"name\",\n\t\t\ttype : \"type\"\n\t\t},\n\n\t\t/**\n\t\t * Constructs a new DOMUtils instance. Consult the Wiki for more details on settings etc for this class.\n\t\t *\n\t\t * @constructor\n\t\t * @method DOMUtils\n\t\t * @param {Document} d Document reference to bind the utility class to.\n\t\t * @param {settings} s Optional settings collection.\n\t\t */\n\t\tDOMUtils : function(d, s) {\n\t\t\tvar t = this, globalStyle, name;\n\n\t\t\tt.doc = d;\n\t\t\tt.win = window;\n\t\t\tt.files = {};\n\t\t\tt.cssFlicker = false;\n\t\t\tt.counter = 0;\n\t\t\tt.stdMode = !tinymce.isIE || d.documentMode >= 8;\n\t\t\tt.boxModel = !tinymce.isIE || d.compatMode == \"CSS1Compat\" || t.stdMode;\n\t\t\tt.hasOuterHTML = \"outerHTML\" in d.createElement(\"a\");\n\n\t\t\tt.settings = s = tinymce.extend({\n\t\t\t\tkeep_values : false,\n\t\t\t\thex_colors : 1\n\t\t\t}, s);\n\t\t\t\n\t\t\tt.schema = s.schema;\n\t\t\tt.styles = new tinymce.html.Styles({\n\t\t\t\turl_converter : s.url_converter,\n\t\t\t\turl_converter_scope : s.url_converter_scope\n\t\t\t}, s.schema);\n\n\t\t\t// Fix IE6SP2 flicker and check it failed for pre SP2\n\t\t\tif (tinymce.isIE6) {\n\t\t\t\ttry {\n\t\t\t\t\td.execCommand('BackgroundImageCache', false, true);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tt.cssFlicker = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isIE && s.schema) {\n\t\t\t\t// Add missing HTML 4/5 elements to IE\n\t\t\t\t('abbr article aside audio canvas ' +\n\t\t\t\t'details figcaption figure footer ' +\n\t\t\t\t'header hgroup mark menu meter nav ' +\n\t\t\t\t'output progress section summary ' +\n\t\t\t\t'time video').replace(/\\w+/g, function(name) {\n\t\t\t\t\td.createElement(name);\n\t\t\t\t});\n\n\t\t\t\t// Create all custom elements\n\t\t\t\tfor (name in s.schema.getCustomElements()) {\n\t\t\t\t\td.createElement(name);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttinymce.addUnload(t.destroy, t);\n\t\t},\n\n\t\t/**\n\t\t * Returns the root node of the document this is normally the body but might be a DIV. Parents like getParent will not\n\t\t * go above the point of this root node.\n\t\t *\n\t\t * @method getRoot\n\t\t * @return {Element} Root element for the utility class.\n\t\t */\n\t\tgetRoot : function() {\n\t\t\tvar t = this, s = t.settings;\n\n\t\t\treturn (s && t.get(s.root_element)) || t.doc.body;\n\t\t},\n\n\t\t/**\n\t\t * Returns the viewport of the window.\n\t\t *\n\t\t * @method getViewPort\n\t\t * @param {Window} w Optional window to get viewport of.\n\t\t * @return {Object} Viewport object with fields x, y, w and h.\n\t\t */\n\t\tgetViewPort : function(w) {\n\t\t\tvar d, b;\n\n\t\t\tw = !w ? this.win : w;\n\t\t\td = w.document;\n\t\t\tb = this.boxModel ? d.documentElement : d.body;\n\n\t\t\t// Returns viewport size excluding scrollbars\n\t\t\treturn {\n\t\t\t\tx : w.pageXOffset || b.scrollLeft,\n\t\t\t\ty : w.pageYOffset || b.scrollTop,\n\t\t\t\tw : w.innerWidth || b.clientWidth,\n\t\t\t\th : w.innerHeight || b.clientHeight\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Returns the rectangle for a specific element.\n\t\t *\n\t\t * @method getRect\n\t\t * @param {Element/String} e Element object or element ID to get rectange from.\n\t\t * @return {object} Rectange for specified element object with x, y, w, h fields.\n\t\t */\n\t\tgetRect : function(e) {\n\t\t\tvar p, t = this, sr;\n\n\t\t\te = t.get(e);\n\t\t\tp = t.getPos(e);\n\t\t\tsr = t.getSize(e);\n\n\t\t\treturn {\n\t\t\t\tx : p.x,\n\t\t\t\ty : p.y,\n\t\t\t\tw : sr.w,\n\t\t\t\th : sr.h\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Returns the size dimensions of the specified element.\n\t\t *\n\t\t * @method getSize\n\t\t * @param {Element/String} e Element object or element ID to get rectange from.\n\t\t * @return {object} Rectange for specified element object with w, h fields.\n\t\t */\n\t\tgetSize : function(e) {\n\t\t\tvar t = this, w, h;\n\n\t\t\te = t.get(e);\n\t\t\tw = t.getStyle(e, 'width');\n\t\t\th = t.getStyle(e, 'height');\n\n\t\t\t// Non pixel value, then force offset/clientWidth\n\t\t\tif (w.indexOf('px') === -1)\n\t\t\t\tw = 0;\n\n\t\t\t// Non pixel value, then force offset/clientWidth\n\t\t\tif (h.indexOf('px') === -1)\n\t\t\t\th = 0;\n\n\t\t\treturn {\n\t\t\t\tw : parseInt(w) || e.offsetWidth || e.clientWidth,\n\t\t\t\th : parseInt(h) || e.offsetHeight || e.clientHeight\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Returns a node by the specified selector function. This function will\n\t\t * loop through all parent nodes and call the specified function for each node.\n\t\t * If the function then returns true indicating that it has found what it was looking for, the loop execution will then end\n\t\t * and the node it found will be returned.\n\t\t *\n\t\t * @method getParent\n\t\t * @param {Node/String} n DOM node to search parents on or ID string.\n\t\t * @param {function} f Selection function to execute on each node or CSS pattern.\n\t\t * @param {Node} r Optional root element, never go below this point.\n\t\t * @return {Node} DOM Node or null if it wasn't found.\n\t\t */\n\t\tgetParent : function(n, f, r) {\n\t\t\treturn this.getParents(n, f, r, false);\n\t\t},\n\n\t\t/**\n\t\t * Returns a node list of all parents matching the specified selector function or pattern.\n\t\t * If the function then returns true indicating that it has found what it was looking for and that node will be collected.\n\t\t *\n\t\t * @method getParents\n\t\t * @param {Node/String} n DOM node to search parents on or ID string.\n\t\t * @param {function} f Selection function to execute on each node or CSS pattern.\n\t\t * @param {Node} r Optional root element, never go below this point.\n\t\t * @return {Array} Array of nodes or null if it wasn't found.\n\t\t */\n\t\tgetParents : function(n, f, r, c) {\n\t\t\tvar t = this, na, se = t.settings, o = [];\n\n\t\t\tn = t.get(n);\n\t\t\tc = c === undefined;\n\n\t\t\tif (se.strict_root)\n\t\t\t\tr = r || t.getRoot();\n\n\t\t\t// Wrap node name as func\n\t\t\tif (is(f, 'string')) {\n\t\t\t\tna = f;\n\n\t\t\t\tif (f === '*') {\n\t\t\t\t\tf = function(n) {return n.nodeType == 1;};\n\t\t\t\t} else {\n\t\t\t\t\tf = function(n) {\n\t\t\t\t\t\treturn t.is(n, na);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (n) {\n\t\t\t\tif (n == r || !n.nodeType || n.nodeType === 9)\n\t\t\t\t\tbreak;\n\n\t\t\t\tif (!f || f(n)) {\n\t\t\t\t\tif (c)\n\t\t\t\t\t\to.push(n);\n\t\t\t\t\telse\n\t\t\t\t\t\treturn n;\n\t\t\t\t}\n\n\t\t\t\tn = n.parentNode;\n\t\t\t}\n\n\t\t\treturn c ? o : null;\n\t\t},\n\n\t\t/**\n\t\t * Returns the specified element by ID or the input element if it isn't a string.\n\t\t *\n\t\t * @method get\n\t\t * @param {String/Element} n Element id to look for or element to just pass though.\n\t\t * @return {Element} Element matching the specified id or null if it wasn't found.\n\t\t */\n\t\tget : function(e) {\n\t\t\tvar n;\n\n\t\t\tif (e && this.doc && typeof(e) == 'string') {\n\t\t\t\tn = e;\n\t\t\t\te = this.doc.getElementById(e);\n\n\t\t\t\t// IE and Opera returns meta elements when they match the specified input ID, but getElementsByName seems to do the trick\n\t\t\t\tif (e && e.id !== n)\n\t\t\t\t\treturn this.doc.getElementsByName(n)[1];\n\t\t\t}\n\n\t\t\treturn e;\n\t\t},\n\n\t\t/**\n\t\t * Returns the next node that matches selector or function\n\t\t *\n\t\t * @method getNext\n\t\t * @param {Node} node Node to find siblings from.\n\t\t * @param {String/function} selector Selector CSS expression or function.\n\t\t * @return {Node} Next node item matching the selector or null if it wasn't found.\n\t\t */\n\t\tgetNext : function(node, selector) {\n\t\t\treturn this._findSib(node, selector, 'nextSibling');\n\t\t},\n\n\t\t/**\n\t\t * Returns the previous node that matches selector or function\n\t\t *\n\t\t * @method getPrev\n\t\t * @param {Node} node Node to find siblings from.\n\t\t * @param {String/function} selector Selector CSS expression or function.\n\t\t * @return {Node} Previous node item matching the selector or null if it wasn't found.\n\t\t */\n\t\tgetPrev : function(node, selector) {\n\t\t\treturn this._findSib(node, selector, 'previousSibling');\n\t\t},\n\n\t\t// #ifndef jquery\n\n\t\t/**\n\t\t * Selects specific elements by a CSS level 3 pattern. For example \"div#a1 p.test\".\n\t\t * This function is optimized for the most common patterns needed in TinyMCE but it also performes good enough\n\t\t * on more complex patterns.\n\t\t *\n\t\t * @method select\n\t\t * @param {String} p CSS level 1 pattern to select/find elements by.\n\t\t * @param {Object} s Optional root element/scope element to search in.\n\t\t * @return {Array} Array with all matched elements.\n\t\t * @example\n\t\t * // Adds a class to all paragraphs in the currently active editor\n\t\t * tinyMCE.activeEditor.dom.addClass(tinyMCE.activeEditor.dom.select('p'), 'someclass');\n\t\t * \n\t\t * // Adds a class to all spans that has the test class in the currently active editor\n\t\t * tinyMCE.activeEditor.dom.addClass(tinyMCE.activeEditor.dom.select('span.test'), 'someclass')\n\t\t */\n\t\tselect : function(pa, s) {\n\t\t\tvar t = this;\n\n\t\t\treturn tinymce.dom.Sizzle(pa, t.get(s) || t.get(t.settings.root_element) || t.doc, []);\n\t\t},\n\n\t\t/**\n\t\t * Returns true/false if the specified element matches the specified css pattern.\n\t\t *\n\t\t * @method is\n\t\t * @param {Node/NodeList} n DOM node to match or an array of nodes to match.\n\t\t * @param {String} selector CSS pattern to match the element agains.\n\t\t */\n\t\tis : function(n, selector) {\n\t\t\tvar i;\n\n\t\t\t// If it isn't an array then try to do some simple selectors instead of Sizzle for to boost performance\n\t\t\tif (n.length === undefined) {\n\t\t\t\t// Simple all selector\n\t\t\t\tif (selector === '*')\n\t\t\t\t\treturn n.nodeType == 1;\n\n\t\t\t\t// Simple selector just elements\n\t\t\t\tif (simpleSelectorRe.test(selector)) {\n\t\t\t\t\tselector = selector.toLowerCase().split(/,/);\n\t\t\t\t\tn = n.nodeName.toLowerCase();\n\n\t\t\t\t\tfor (i = selector.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tif (selector[i] == n)\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn tinymce.dom.Sizzle.matches(selector, n.nodeType ? [n] : n).length > 0;\n\t\t},\n\n\t\t// #endif\n\n\t\t/**\n\t\t * Adds the specified element to another element or elements.\n\t\t *\n\t\t * @method add\n\t\t * @param {String/Element/Array} Element id string, DOM node element or array of id's or elements to add to.\n\t\t * @param {String/Element} n Name of new element to add or existing element to add.\n\t\t * @param {Object} a Optional object collection with arguments to add to the new element(s).\n\t\t * @param {String} h Optional inner HTML contents to add for each element.\n\t\t * @param {Boolean} c Optional internal state to indicate if it should create or add.\n\t\t * @return {Element/Array} Element that got created or array with elements if multiple elements where passed.\n\t\t * @example\n\t\t * // Adds a new paragraph to the end of the active editor\n\t\t * tinyMCE.activeEditor.dom.add(tinyMCE.activeEditor.getBody(), 'p', {title : 'my title'}, 'Some content');\n\t\t */\n\t\tadd : function(p, n, a, h, c) {\n\t\t\tvar t = this;\n\n\t\t\treturn this.run(p, function(p) {\n\t\t\t\tvar e, k;\n\n\t\t\t\te = is(n, 'string') ? t.doc.createElement(n) : n;\n\t\t\t\tt.setAttribs(e, a);\n\n\t\t\t\tif (h) {\n\t\t\t\t\tif (h.nodeType)\n\t\t\t\t\t\te.appendChild(h);\n\t\t\t\t\telse\n\t\t\t\t\t\tt.setHTML(e, h);\n\t\t\t\t}\n\n\t\t\t\treturn !c ? p.appendChild(e) : e;\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Creates a new element.\n\t\t *\n\t\t * @method create\n\t\t * @param {String} n Name of new element.\n\t\t * @param {Object} a Optional object name/value collection with element attributes.\n\t\t * @param {String} h Optional HTML string to set as inner HTML of the element.\n\t\t * @return {Element} HTML DOM node element that got created.\n\t\t * @example\n\t\t * // Adds an element where the caret/selection is in the active editor\n\t\t * var el = tinyMCE.activeEditor.dom.create('div', {id : 'test', 'class' : 'myclass'}, 'some content');\n\t\t * tinyMCE.activeEditor.selection.setNode(el);\n\t\t */\n\t\tcreate : function(n, a, h) {\n\t\t\treturn this.add(this.doc.createElement(n), n, a, h, 1);\n\t\t},\n\n\t\t/**\n\t\t * Create HTML string for element. The element will be closed unless an empty inner HTML string is passed.\n\t\t *\n\t\t * @method createHTML\n\t\t * @param {String} n Name of new element.\n\t\t * @param {Object} a Optional object name/value collection with element attributes.\n\t\t * @param {String} h Optional HTML string to set as inner HTML of the element.\n\t\t * @return {String} String with new HTML element like for example: <a href=\"#\">test</a>.\n\t\t * @example\n\t\t * // Creates a html chunk and inserts it at the current selection/caret location\n\t\t * tinyMCE.activeEditor.selection.setContent(tinyMCE.activeEditor.dom.createHTML('a', {href : 'test.html'}, 'some line'));\n\t\t */\n\t\tcreateHTML : function(n, a, h) {\n\t\t\tvar o = '', t = this, k;\n\n\t\t\to += '<' + n;\n\n\t\t\tfor (k in a) {\n\t\t\t\tif (a.hasOwnProperty(k))\n\t\t\t\t\to += ' ' + k + '=\"' + t.encode(a[k]) + '\"';\n\t\t\t}\n\n\t\t\t// A call to tinymce.is doesn't work for some odd reason on IE9 possible bug inside their JS runtime\n\t\t\tif (typeof(h) != \"undefined\")\n\t\t\t\treturn o + '>' + h + '</' + n + '>';\n\n\t\t\treturn o + ' />';\n\t\t},\n\n\t\t/**\n\t\t * Removes/deletes the specified element(s) from the DOM.\n\t\t *\n\t\t * @method remove\n\t\t * @param {String/Element/Array} node ID of element or DOM element object or array containing multiple elements/ids.\n\t\t * @param {Boolean} keep_children Optional state to keep children or not. If set to true all children will be placed at the location of the removed element.\n\t\t * @return {Element/Array} HTML DOM element that got removed or array of elements depending on input.\n\t\t * @example\n\t\t * // Removes all paragraphs in the active editor\n\t\t * tinyMCE.activeEditor.dom.remove(tinyMCE.activeEditor.dom.select('p'));\n\t\t * \n\t\t * // Removes a element by id in the document\n\t\t * tinyMCE.DOM.remove('mydiv');\n\t\t */\n\t\tremove : function(node, keep_children) {\n\t\t\treturn this.run(node, function(node) {\n\t\t\t\tvar child, parent = node.parentNode;\n\n\t\t\t\tif (!parent)\n\t\t\t\t\treturn null;\n\n\t\t\t\tif (keep_children) {\n\t\t\t\t\twhile (child = node.firstChild) {\n\t\t\t\t\t\t// IE 8 will crash if you don't remove completely empty text nodes\n\t\t\t\t\t\tif (!tinymce.isIE || child.nodeType !== 3 || child.nodeValue)\n\t\t\t\t\t\t\tparent.insertBefore(child, node);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tnode.removeChild(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn parent.removeChild(node);\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Sets the CSS style value on a HTML element. The name can be a camelcase string\n\t\t * or the CSS style name like background-color.\n\t\t *\n\t\t * @method setStyle\n\t\t * @param {String/Element/Array} n HTML element/Element ID or Array of elements/ids to set CSS style value on.\n\t\t * @param {String} na Name of the style value to set.\n\t\t * @param {String} v Value to set on the style.\n\t\t * @example\n\t\t * // Sets a style value on all paragraphs in the currently active editor\n\t\t * tinyMCE.activeEditor.dom.setStyle(tinyMCE.activeEditor.dom.select('p'), 'background-color', 'red');\n\t\t * \n\t\t * // Sets a style value to an element by id in the current document\n\t\t * tinyMCE.DOM.setStyle('mydiv', 'background-color', 'red');\n\t\t */\n\t\tsetStyle : function(n, na, v) {\n\t\t\tvar t = this;\n\n\t\t\treturn t.run(n, function(e) {\n\t\t\t\tvar s, i;\n\n\t\t\t\ts = e.style;\n\n\t\t\t\t// Camelcase it, if needed\n\t\t\t\tna = na.replace(/-(\\D)/g, function(a, b){\n\t\t\t\t\treturn b.toUpperCase();\n\t\t\t\t});\n\n\t\t\t\t// Default px suffix on these\n\t\t\t\tif (t.pixelStyles.test(na) && (tinymce.is(v, 'number') || /^[\\-0-9\\.]+$/.test(v)))\n\t\t\t\t\tv += 'px';\n\n\t\t\t\tswitch (na) {\n\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\t// IE specific opacity\n\t\t\t\t\t\tif (isIE) {\n\t\t\t\t\t\t\ts.filter = v === '' ? '' : \"alpha(opacity=\" + (v * 100) + \")\";\n\n\t\t\t\t\t\t\tif (!n.currentStyle || !n.currentStyle.hasLayout)\n\t\t\t\t\t\t\t\ts.display = 'inline-block';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Fix for older browsers\n\t\t\t\t\t\ts[na] = s['-moz-opacity'] = s['-khtml-opacity'] = v || '';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'float':\n\t\t\t\t\t\tisIE ? s.styleFloat = v : s.cssFloat = v;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ts[na] = v || '';\n\t\t\t\t}\n\n\t\t\t\t// Force update of the style data\n\t\t\t\tif (t.settings.update_styles)\n\t\t\t\t\tt.setAttrib(e, 'data-mce-style');\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns the current style or runtime/computed value of a element.\n\t\t *\n\t\t * @method getStyle\n\t\t * @param {String/Element} n HTML element or element id string to get style from.\n\t\t * @param {String} na Style name to return.\n\t\t * @param {Boolean} c Computed style.\n\t\t * @return {String} Current style or computed style value of a element.\n\t\t */\n\t\tgetStyle : function(n, na, c) {\n\t\t\tn = this.get(n);\n\n\t\t\tif (!n)\n\t\t\t\treturn;\n\n\t\t\t// Gecko\n\t\t\tif (this.doc.defaultView && c) {\n\t\t\t\t// Remove camelcase\n\t\t\t\tna = na.replace(/[A-Z]/g, function(a){\n\t\t\t\t\treturn '-' + a;\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\treturn this.doc.defaultView.getComputedStyle(n, null).getPropertyValue(na);\n\t\t\t\t} catch (ex) {\n\t\t\t\t\t// Old safari might fail\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Camelcase it, if needed\n\t\t\tna = na.replace(/-(\\D)/g, function(a, b){\n\t\t\t\treturn b.toUpperCase();\n\t\t\t});\n\n\t\t\tif (na == 'float')\n\t\t\t\tna = isIE ? 'styleFloat' : 'cssFloat';\n\n\t\t\t// IE & Opera\n\t\t\tif (n.currentStyle && c)\n\t\t\t\treturn n.currentStyle[na];\n\n\t\t\treturn n.style ? n.style[na] : undefined;\n\t\t},\n\n\t\t/**\n\t\t * Sets multiple styles on the specified element(s).\n\t\t *\n\t\t * @method setStyles\n\t\t * @param {Element/String/Array} e DOM element, element id string or array of elements/ids to set styles on.\n\t\t * @param {Object} o Name/Value collection of style items to add to the element(s).\n\t\t * @example\n\t\t * // Sets styles on all paragraphs in the currently active editor\n\t\t * tinyMCE.activeEditor.dom.setStyles(tinyMCE.activeEditor.dom.select('p'), {'background-color' : 'red', 'color' : 'green'});\n\t\t * \n\t\t * // Sets styles to an element by id in the current document\n\t\t * tinyMCE.DOM.setStyles('mydiv', {'background-color' : 'red', 'color' : 'green'});\n\t\t */\n\t\tsetStyles : function(e, o) {\n\t\t\tvar t = this, s = t.settings, ol;\n\n\t\t\tol = s.update_styles;\n\t\t\ts.update_styles = 0;\n\n\t\t\teach(o, function(v, n) {\n\t\t\t\tt.setStyle(e, n, v);\n\t\t\t});\n\n\t\t\t// Update style info\n\t\t\ts.update_styles = ol;\n\t\t\tif (s.update_styles)\n\t\t\t\tt.setAttrib(e, s.cssText);\n\t\t},\n\n\t\t/**\n\t\t * Removes all attributes from an element or elements.\n\t\t * \n\t\t * @param {Element/String/Array} e DOM element, element id string or array of elements/ids to remove attributes from.\n\t\t */\n\t\tremoveAllAttribs: function(e) {\n\t\t\treturn this.run(e, function(e) {\n\t\t\t\tvar i, attrs = e.attributes;\n\t\t\t\tfor (i = attrs.length - 1; i >= 0; i--) {\n\t\t\t\t\te.removeAttributeNode(attrs.item(i));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Sets the specified attributes value of a element or elements.\n\t\t *\n\t\t * @method setAttrib\n\t\t * @param {Element/String/Array} e DOM element, element id string or array of elements/ids to set attribute on.\n\t\t * @param {String} n Name of attribute to set.\n\t\t * @param {String} v Value to set on the attribute of this value is falsy like null 0 or '' it will remove the attribute instead.\n\t\t * @example\n\t\t * // Sets an attribute to all paragraphs in the active editor\n\t\t * tinyMCE.activeEditor.dom.setAttrib(tinyMCE.activeEditor.dom.select('p'), 'class', 'myclass');\n\t\t * \n\t\t * // Sets an attribute to a specific element in the current page\n\t\t * tinyMCE.dom.setAttrib('mydiv', 'class', 'myclass');\n\t\t */\n\t\tsetAttrib : function(e, n, v) {\n\t\t\tvar t = this;\n\n\t\t\t// Whats the point\n\t\t\tif (!e || !n)\n\t\t\t\treturn;\n\n\t\t\t// Strict XML mode\n\t\t\tif (t.settings.strict)\n\t\t\t\tn = n.toLowerCase();\n\n\t\t\treturn this.run(e, function(e) {\n\t\t\t\tvar s = t.settings;\n\t\t\t\tif (v !== null) {\n\t\t\t\t\tswitch (n) {\n\t\t\t\t\t\tcase \"style\":\n\t\t\t\t\t\t\tif (!is(v, 'string')) {\n\t\t\t\t\t\t\t\teach(v, function(v, n) {\n\t\t\t\t\t\t\t\t\tt.setStyle(e, n, v);\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// No mce_style for elements with these since they might get resized by the user\n\t\t\t\t\t\t\tif (s.keep_values) {\n\t\t\t\t\t\t\t\tif (v && !t._isRes(v))\n\t\t\t\t\t\t\t\t\te.setAttribute('data-mce-style', v, 2);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\te.removeAttribute('data-mce-style', 2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\te.style.cssText = v;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase \"class\":\n\t\t\t\t\t\t\te.className = v || ''; // Fix IE null bug\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase \"src\":\n\t\t\t\t\t\tcase \"href\":\n\t\t\t\t\t\t\tif (s.keep_values) {\n\t\t\t\t\t\t\t\tif (s.url_converter)\n\t\t\t\t\t\t\t\t\tv = s.url_converter.call(s.url_converter_scope || t, v, n, e);\n\n\t\t\t\t\t\t\t\tt.setAttrib(e, 'data-mce-' + n, v, 2);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase \"shape\":\n\t\t\t\t\t\t\te.setAttribute('data-mce-style', v);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (is(v) && v !== null && v.length !== 0)\n\t\t\t\t\te.setAttribute(n, '' + v, 2);\n\t\t\t\telse\n\t\t\t\t\te.removeAttribute(n, 2);\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Sets the specified attributes of a element or elements.\n\t\t *\n\t\t * @method setAttribs\n\t\t * @param {Element/String/Array} e DOM element, element id string or array of elements/ids to set attributes on.\n\t\t * @param {Object} o Name/Value collection of attribute items to add to the element(s).\n\t\t * @example\n\t\t * // Sets some attributes to all paragraphs in the active editor\n\t\t * tinyMCE.activeEditor.dom.setAttribs(tinyMCE.activeEditor.dom.select('p'), {'class' : 'myclass', title : 'some title'});\n\t\t * \n\t\t * // Sets some attributes to a specific element in the current page\n\t\t * tinyMCE.DOM.setAttribs('mydiv', {'class' : 'myclass', title : 'some title'});\n\t\t */\n\t\tsetAttribs : function(e, o) {\n\t\t\tvar t = this;\n\n\t\t\treturn this.run(e, function(e) {\n\t\t\t\teach(o, function(v, n) {\n\t\t\t\t\tt.setAttrib(e, n, v);\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns the specified attribute by name.\n\t\t *\n\t\t * @method getAttrib\n\t\t * @param {String/Element} e Element string id or DOM element to get attribute from.\n\t\t * @param {String} n Name of attribute to get.\n\t\t * @param {String} dv Optional default value to return if the attribute didn't exist.\n\t\t * @return {String} Attribute value string, default value or null if the attribute wasn't found.\n\t\t */\n\t\tgetAttrib : function(e, n, dv) {\n\t\t\tvar v, t = this, undef;\n\n\t\t\te = t.get(e);\n\n\t\t\tif (!e || e.nodeType !== 1)\n\t\t\t\treturn dv === undef ? false : dv;\n\n\t\t\tif (!is(dv))\n\t\t\t\tdv = '';\n\n\t\t\t// Try the mce variant for these\n\t\t\tif (/^(src|href|style|coords|shape)$/.test(n)) {\n\t\t\t\tv = e.getAttribute(\"data-mce-\" + n);\n\n\t\t\t\tif (v)\n\t\t\t\t\treturn v;\n\t\t\t}\n\n\t\t\tif (isIE && t.props[n]) {\n\t\t\t\tv = e[t.props[n]];\n\t\t\t\tv = v && v.nodeValue ? v.nodeValue : v;\n\t\t\t}\n\n\t\t\tif (!v)\n\t\t\t\tv = e.getAttribute(n, 2);\n\n\t\t\t// Check boolean attribs\n\t\t\tif (/^(checked|compact|declare|defer|disabled|ismap|multiple|nohref|noshade|nowrap|readonly|selected)$/.test(n)) {\n\t\t\t\tif (e[t.props[n]] === true && v === '')\n\t\t\t\t\treturn n;\n\n\t\t\t\treturn v ? n : '';\n\t\t\t}\n\n\t\t\t// Inner input elements will override attributes on form elements\n\t\t\tif (e.nodeName === \"FORM\" && e.getAttributeNode(n))\n\t\t\t\treturn e.getAttributeNode(n).nodeValue;\n\n\t\t\tif (n === 'style') {\n\t\t\t\tv = v || e.style.cssText;\n\n\t\t\t\tif (v) {\n\t\t\t\t\tv = t.serializeStyle(t.parseStyle(v), e.nodeName);\n\n\t\t\t\t\tif (t.settings.keep_values && !t._isRes(v))\n\t\t\t\t\t\te.setAttribute('data-mce-style', v);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove Apple and WebKit stuff\n\t\t\tif (isWebKit && n === \"class\" && v)\n\t\t\t\tv = v.replace(/(apple|webkit)\\-[a-z\\-]+/gi, '');\n\n\t\t\t// Handle IE issues\n\t\t\tif (isIE) {\n\t\t\t\tswitch (n) {\n\t\t\t\t\tcase 'rowspan':\n\t\t\t\t\tcase 'colspan':\n\t\t\t\t\t\t// IE returns 1 as default value\n\t\t\t\t\t\tif (v === 1)\n\t\t\t\t\t\t\tv = '';\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'size':\n\t\t\t\t\t\t// IE returns +0 as default value for size\n\t\t\t\t\t\tif (v === '+0' || v === 20 || v === 0)\n\t\t\t\t\t\t\tv = '';\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'width':\n\t\t\t\t\tcase 'height':\n\t\t\t\t\tcase 'vspace':\n\t\t\t\t\tcase 'checked':\n\t\t\t\t\tcase 'disabled':\n\t\t\t\t\tcase 'readonly':\n\t\t\t\t\t\tif (v === 0)\n\t\t\t\t\t\t\tv = '';\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hspace':\n\t\t\t\t\t\t// IE returns -1 as default value\n\t\t\t\t\t\tif (v === -1)\n\t\t\t\t\t\t\tv = '';\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'maxlength':\n\t\t\t\t\tcase 'tabindex':\n\t\t\t\t\t\t// IE returns default value\n\t\t\t\t\t\tif (v === 32768 || v === 2147483647 || v === '32768')\n\t\t\t\t\t\t\tv = '';\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'multiple':\n\t\t\t\t\tcase 'compact':\n\t\t\t\t\tcase 'noshade':\n\t\t\t\t\tcase 'nowrap':\n\t\t\t\t\t\tif (v === 65535)\n\t\t\t\t\t\t\treturn n;\n\n\t\t\t\t\t\treturn dv;\n\n\t\t\t\t\tcase 'shape':\n\t\t\t\t\t\tv = v.toLowerCase();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// IE has odd anonymous function for event attributes\n\t\t\t\t\t\tif (n.indexOf('on') === 0 && v)\n\t\t\t\t\t\t\tv = tinymce._replace(/^function\\s+\\w+\\(\\)\\s+\\{\\s+(.*)\\s+\\}$/, '$1', '' + v);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (v !== undef && v !== null && v !== '') ? '' + v : dv;\n\t\t},\n\n\t\t/**\n\t\t * Returns the absolute x, y position of a node. The position will be returned in a object with x, y fields.\n\t\t *\n\t\t * @method getPos\n\t\t * @param {Element/String} n HTML element or element id to get x, y position from.\n\t\t * @param {Element} ro Optional root element to stop calculations at.\n\t\t * @return {object} Absolute position of the specified element object with x, y fields.\n\t\t */\n\t\tgetPos : function(n, ro) {\n\t\t\tvar t = this, x = 0, y = 0, e, d = t.doc, r;\n\n\t\t\tn = t.get(n);\n\t\t\tro = ro || d.body;\n\n\t\t\tif (n) {\n\t\t\t\t// Use getBoundingClientRect if it exists since it's faster than looping offset nodes\n\t\t\t\tif (n.getBoundingClientRect) {\n\t\t\t\t\tn = n.getBoundingClientRect();\n\t\t\t\t\te = t.boxModel ? d.documentElement : d.body;\n\n\t\t\t\t\t// Add scroll offsets from documentElement or body since IE with the wrong box model will use d.body and so do WebKit\n\t\t\t\t\t// Also remove the body/documentelement clientTop/clientLeft on IE 6, 7 since they offset the position\n\t\t\t\t\tx = n.left + (d.documentElement.scrollLeft || d.body.scrollLeft) - e.clientTop;\n\t\t\t\t\ty = n.top + (d.documentElement.scrollTop || d.body.scrollTop) - e.clientLeft;\n\n\t\t\t\t\treturn {x : x, y : y};\n\t\t\t\t}\n\n\t\t\t\tr = n;\n\t\t\t\twhile (r && r != ro && r.nodeType) {\n\t\t\t\t\tx += r.offsetLeft || 0;\n\t\t\t\t\ty += r.offsetTop || 0;\n\t\t\t\t\tr = r.offsetParent;\n\t\t\t\t}\n\n\t\t\t\tr = n.parentNode;\n\t\t\t\twhile (r && r != ro && r.nodeType) {\n\t\t\t\t\tx -= r.scrollLeft || 0;\n\t\t\t\t\ty -= r.scrollTop || 0;\n\t\t\t\t\tr = r.parentNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {x : x, y : y};\n\t\t},\n\n\t\t/**\n\t\t * Parses the specified style value into an object collection. This parser will also\n\t\t * merge and remove any redundant items that browsers might have added. It will also convert non hex\n\t\t * colors to hex values. Urls inside the styles will also be converted to absolute/relative based on settings.\n\t\t *\n\t\t * @method parseStyle\n\t\t * @param {String} st Style value to parse for example: border:1px solid red;.\n\t\t * @return {Object} Object representation of that style like {border : '1px solid red'}\n\t\t */\n\t\tparseStyle : function(st) {\n\t\t\treturn this.styles.parse(st);\n\t\t},\n\n\t\t/**\n\t\t * Serializes the specified style object into a string.\n\t\t *\n\t\t * @method serializeStyle\n\t\t * @param {Object} o Object to serialize as string for example: {border : '1px solid red'}\n\t\t * @param {String} name Optional element name.\n\t\t * @return {String} String representation of the style object for example: border: 1px solid red.\n\t\t */\n\t\tserializeStyle : function(o, name) {\n\t\t\treturn this.styles.serialize(o, name);\n\t\t},\n\n\t\t/**\n\t\t * Imports/loads the specified CSS file into the document bound to the class.\n\t\t *\n\t\t * @method loadCSS\n\t\t * @param {String} u URL to CSS file to load.\n\t\t * @example\n\t\t * // Loads a CSS file dynamically into the current document\n\t\t * tinymce.DOM.loadCSS('somepath/some.css');\n\t\t * \n\t\t * // Loads a CSS file into the currently active editor instance\n\t\t * tinyMCE.activeEditor.dom.loadCSS('somepath/some.css');\n\t\t * \n\t\t * // Loads a CSS file into an editor instance by id\n\t\t * tinyMCE.get('someid').dom.loadCSS('somepath/some.css');\n\t\t * \n\t\t * // Loads multiple CSS files into the current document\n\t\t * tinymce.DOM.loadCSS('somepath/some.css,somepath/someother.css');\n\t\t */\n\t\tloadCSS : function(u) {\n\t\t\tvar t = this, d = t.doc, head;\n\n\t\t\tif (!u)\n\t\t\t\tu = '';\n\n\t\t\thead = t.select('head')[0];\n\n\t\t\teach(u.split(','), function(u) {\n\t\t\t\tvar link;\n\n\t\t\t\tif (t.files[u])\n\t\t\t\t\treturn;\n\n\t\t\t\tt.files[u] = true;\n\t\t\t\tlink = t.create('link', {rel : 'stylesheet', href : tinymce._addVer(u)});\n\n\t\t\t\t// IE 8 has a bug where dynamically loading stylesheets would produce a 1 item remaining bug\n\t\t\t\t// This fix seems to resolve that issue by realcing the document ones a stylesheet finishes loading\n\t\t\t\t// It's ugly but it seems to work fine.\n\t\t\t\tif (isIE && d.documentMode && d.recalc) {\n\t\t\t\t\tlink.onload = function() {\n\t\t\t\t\t\tif (d.recalc)\n\t\t\t\t\t\t\td.recalc();\n\n\t\t\t\t\t\tlink.onload = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\thead.appendChild(link);\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Adds a class to the specified element or elements.\n\t\t *\n\t\t * @method addClass\n\t\t * @param {String/Element/Array} Element ID string or DOM element or array with elements or IDs.\n\t\t * @param {String} c Class name to add to each element.\n\t\t * @return {String/Array} String with new class value or array with new class values for all elements.\n\t\t * @example\n\t\t * // Adds a class to all paragraphs in the active editor\n\t\t * tinyMCE.activeEditor.dom.addClass(tinyMCE.activeEditor.dom.select('p'), 'myclass');\n\t\t * \n\t\t * // Adds a class to a specific element in the current page\n\t\t * tinyMCE.DOM.addClass('mydiv', 'myclass');\n\t\t */\n\t\taddClass : function(e, c) {\n\t\t\treturn this.run(e, function(e) {\n\t\t\t\tvar o;\n\n\t\t\t\tif (!c)\n\t\t\t\t\treturn 0;\n\n\t\t\t\tif (this.hasClass(e, c))\n\t\t\t\t\treturn e.className;\n\n\t\t\t\to = this.removeClass(e, c);\n\n\t\t\t\treturn e.className = (o != '' ? (o + ' ') : '') + c;\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Removes a class from the specified element or elements.\n\t\t *\n\t\t * @method removeClass\n\t\t * @param {String/Element/Array} Element ID string or DOM element or array with elements or IDs.\n\t\t * @param {String} c Class name to remove to each element.\n\t\t * @return {String/Array} String with new class value or array with new class values for all elements.\n\t\t * @example\n\t\t * // Removes a class from all paragraphs in the active editor\n\t\t * tinyMCE.activeEditor.dom.removeClass(tinyMCE.activeEditor.dom.select('p'), 'myclass');\n\t\t * \n\t\t * // Removes a class from a specific element in the current page\n\t\t * tinyMCE.DOM.removeClass('mydiv', 'myclass');\n\t\t */\n\t\tremoveClass : function(e, c) {\n\t\t\tvar t = this, re;\n\n\t\t\treturn t.run(e, function(e) {\n\t\t\t\tvar v;\n\n\t\t\t\tif (t.hasClass(e, c)) {\n\t\t\t\t\tif (!re)\n\t\t\t\t\t\tre = new RegExp(\"(^|\\\\s+)\" + c + \"(\\\\s+|$)\", \"g\");\n\n\t\t\t\t\tv = e.className.replace(re, ' ');\n\t\t\t\t\tv = tinymce.trim(v != ' ' ? v : '');\n\n\t\t\t\t\te.className = v;\n\n\t\t\t\t\t// Empty class attr\n\t\t\t\t\tif (!v) {\n\t\t\t\t\t\te.removeAttribute('class');\n\t\t\t\t\t\te.removeAttribute('className');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn v;\n\t\t\t\t}\n\n\t\t\t\treturn e.className;\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns true if the specified element has the specified class.\n\t\t *\n\t\t * @method hasClass\n\t\t * @param {String/Element} n HTML element or element id string to check CSS class on.\n\t\t * @param {String} c CSS class to check for.\n\t\t * @return {Boolean} true/false if the specified element has the specified class.\n\t\t */\n\t\thasClass : function(n, c) {\n\t\t\tn = this.get(n);\n\n\t\t\tif (!n || !c)\n\t\t\t\treturn false;\n\n\t\t\treturn (' ' + n.className + ' ').indexOf(' ' + c + ' ') !== -1;\n\t\t},\n\n\t\t/**\n\t\t * Shows the specified element(s) by ID by setting the \"display\" style.\n\t\t *\n\t\t * @method show\n\t\t * @param {String/Element/Array} e ID of DOM element or DOM element or array with elements or IDs to show.\n\t\t */\n\t\tshow : function(e) {\n\t\t\treturn this.setStyle(e, 'display', 'block');\n\t\t},\n\n\t\t/**\n\t\t * Hides the specified element(s) by ID by setting the \"display\" style.\n\t\t *\n\t\t * @method hide\n\t\t * @param {String/Element/Array} e ID of DOM element or DOM element or array with elements or IDs to hide.\n\t\t * @example\n\t\t * // Hides a element by id in the document\n\t\t * tinymce.DOM.hide('myid');\n\t\t */\n\t\thide : function(e) {\n\t\t\treturn this.setStyle(e, 'display', 'none');\n\t\t},\n\n\t\t/**\n\t\t * Returns true/false if the element is hidden or not by checking the \"display\" style.\n\t\t *\n\t\t * @method isHidden\n\t\t * @param {String/Element} e Id or element to check display state on.\n\t\t * @return {Boolean} true/false if the element is hidden or not.\n\t\t */\n\t\tisHidden : function(e) {\n\t\t\te = this.get(e);\n\n\t\t\treturn !e || e.style.display == 'none' || this.getStyle(e, 'display') == 'none';\n\t\t},\n\n\t\t/**\n\t\t * Returns a unique id. This can be useful when generating elements on the fly.\n\t\t * This method will not check if the element already exists.\n\t\t *\n\t\t * @method uniqueId\n\t\t * @param {String} p Optional prefix to add infront of all ids defaults to \"mce_\".\n\t\t * @return {String} Unique id.\n\t\t */\n\t\tuniqueId : function(p) {\n\t\t\treturn (!p ? 'mce_' : p) + (this.counter++);\n\t\t},\n\n\t\t/**\n\t\t * Sets the specified HTML content inside the element or elements. The HTML will first be processed this means\n\t\t * URLs will get converted, hex color values fixed etc. Check processHTML for details.\n\t\t *\n\t\t * @method setHTML\n\t\t * @param {Element/String/Array} e DOM element, element id string or array of elements/ids to set HTML inside.\n\t\t * @param {String} h HTML content to set as inner HTML of the element.\n\t\t * @example\n\t\t * // Sets the inner HTML of all paragraphs in the active editor\n\t\t * tinyMCE.activeEditor.dom.setHTML(tinyMCE.activeEditor.dom.select('p'), 'some inner html');\n\t\t * \n\t\t * // Sets the inner HTML of a element by id in the document\n\t\t * tinyMCE.DOM.setHTML('mydiv', 'some inner html');\n\t\t */\n\t\tsetHTML : function(element, html) {\n\t\t\tvar self = this;\n\n\t\t\treturn self.run(element, function(element) {\n\t\t\t\tif (isIE) {\n\t\t\t\t\t// Remove all child nodes, IE keeps empty text nodes in DOM\n\t\t\t\t\twhile (element.firstChild)\n\t\t\t\t\t\telement.removeChild(element.firstChild);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// IE will remove comments from the beginning\n\t\t\t\t\t\t// unless you padd the contents with something\n\t\t\t\t\t\telement.innerHTML = '<br />' + html;\n\t\t\t\t\t\telement.removeChild(element.firstChild);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// IE sometimes produces an unknown runtime error on innerHTML if it's an block element within a block element for example a div inside a p\n\t\t\t\t\t\t// This seems to fix this problem\n\n\t\t\t\t\t\t// Create new div with HTML contents and a BR infront to keep comments\n\t\t\t\t\t\telement = self.create('div');\n\t\t\t\t\t\telement.innerHTML = '<br />' + html;\n\n\t\t\t\t\t\t// Add all children from div to target\n\t\t\t\t\t\teach (element.childNodes, function(node, i) {\n\t\t\t\t\t\t\t// Skip br element\n\t\t\t\t\t\t\tif (i)\n\t\t\t\t\t\t\t\telement.appendChild(node);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\telement.innerHTML = html;\n\n\t\t\t\treturn html;\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns the outer HTML of an element.\n\t\t *\n\t\t * @method getOuterHTML\n\t\t * @param {String/Element} elm Element ID or element object to get outer HTML from.\n\t\t * @return {String} Outer HTML string.\n\t\t * @example\n\t\t * tinymce.DOM.getOuterHTML(editorElement);\n\t\t * tinyMCE.activeEditor.getOuterHTML(tinyMCE.activeEditor.getBody());\n\t\t */\n\t\tgetOuterHTML : function(elm) {\n\t\t\tvar doc, self = this;\n\n\t\t\telm = self.get(elm);\n\n\t\t\tif (!elm)\n\t\t\t\treturn null;\n\n\t\t\tif (elm.nodeType === 1 && self.hasOuterHTML)\n\t\t\t\treturn elm.outerHTML;\n\n\t\t\tdoc = (elm.ownerDocument || self.doc).createElement(\"body\");\n\t\t\tdoc.appendChild(elm.cloneNode(true));\n\n\t\t\treturn doc.innerHTML;\n\t\t},\n\n\t\t/**\n\t\t * Sets the specified outer HTML on a element or elements.\n\t\t *\n\t\t * @method setOuterHTML\n\t\t * @param {Element/String/Array} e DOM element, element id string or array of elements/ids to set outer HTML on.\n\t\t * @param {Object} h HTML code to set as outer value for the element.\n\t\t * @param {Document} d Optional document scope to use in this process defaults to the document of the DOM class.\n\t\t * @example\n\t\t * // Sets the outer HTML of all paragraphs in the active editor\n\t\t * tinyMCE.activeEditor.dom.setOuterHTML(tinyMCE.activeEditor.dom.select('p'), '<div>some html</div>');\n\t\t * \n\t\t * // Sets the outer HTML of a element by id in the document\n\t\t * tinyMCE.DOM.setOuterHTML('mydiv', '<div>some html</div>');\n\t\t */\n\t\tsetOuterHTML : function(e, h, d) {\n\t\t\tvar t = this;\n\n\t\t\tfunction setHTML(e, h, d) {\n\t\t\t\tvar n, tp;\n\n\t\t\t\ttp = d.createElement(\"body\");\n\t\t\t\ttp.innerHTML = h;\n\n\t\t\t\tn = tp.lastChild;\n\t\t\t\twhile (n) {\n\t\t\t\t\tt.insertAfter(n.cloneNode(true), e);\n\t\t\t\t\tn = n.previousSibling;\n\t\t\t\t}\n\n\t\t\t\tt.remove(e);\n\t\t\t};\n\n\t\t\treturn this.run(e, function(e) {\n\t\t\t\te = t.get(e);\n\n\t\t\t\t// Only set HTML on elements\n\t\t\t\tif (e.nodeType == 1) {\n\t\t\t\t\td = d || e.ownerDocument || t.doc;\n\n\t\t\t\t\tif (isIE) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Try outerHTML for IE it sometimes produces an unknown runtime error\n\t\t\t\t\t\t\tif (isIE && e.nodeType == 1)\n\t\t\t\t\t\t\t\te.outerHTML = h;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tsetHTML(e, h, d);\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t// Fix for unknown runtime error\n\t\t\t\t\t\t\tsetHTML(e, h, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tsetHTML(e, h, d);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Entity decode a string, resolves any HTML entities like &aring;.\n\t\t *\n\t\t * @method decode\n\t\t * @param {String} s String to decode entities on.\n\t\t * @return {String} Entity decoded string.\n\t\t */\n\t\tdecode : Entities.decode,\n\n\t\t/**\n\t\t * Entity encodes a string, encodes the most common entities <>\"& into entities.\n\t\t *\n\t\t * @method encode\n\t\t * @param {String} text String to encode with entities.\n\t\t * @return {String} Entity encoded string.\n\t\t */\n\t\tencode : Entities.encodeAllRaw,\n\n\t\t/**\n\t\t * Inserts a element after the reference element.\n\t\t *\n\t\t * @method insertAfter\n\t\t * @param {Element} node Element to insert after the reference.\n\t\t * @param {Element/String/Array} reference_node Reference element, element id or array of elements to insert after.\n\t\t * @return {Element/Array} Element that got added or an array with elements. \n\t\t */\n\t\tinsertAfter : function(node, reference_node) {\n\t\t\treference_node = this.get(reference_node);\n\n\t\t\treturn this.run(node, function(node) {\n\t\t\t\tvar parent, nextSibling;\n\n\t\t\t\tparent = reference_node.parentNode;\n\t\t\t\tnextSibling = reference_node.nextSibling;\n\n\t\t\t\tif (nextSibling)\n\t\t\t\t\tparent.insertBefore(node, nextSibling);\n\t\t\t\telse\n\t\t\t\t\tparent.appendChild(node);\n\n\t\t\t\treturn node;\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Returns true/false if the specified element is a block element or not.\n\t\t *\n\t\t * @method isBlock\n\t\t * @param {Node/String} node Element/Node to check.\n\t\t * @return {Boolean} True/False state if the node is a block element or not.\n\t\t */\n\t\tisBlock : function(node) {\n\t\t\tvar type = node.nodeType;\n\n\t\t\t// If it's a node then check the type and use the nodeName\n\t\t\tif (type)\n\t\t\t\treturn !!(type === 1 && blockElementsMap[node.nodeName]);\n\n\t\t\treturn !!blockElementsMap[node];\n\t\t},\n\n\t\t/**\n\t\t * Replaces the specified element or elements with the specified element, the new element will\n\t\t * be cloned if multiple inputs elements are passed.\n\t\t *\n\t\t * @method replace\n\t\t * @param {Element} n New element to replace old ones with.\n\t\t * @param {Element/String/Array} o Element DOM node, element id or array of elements or ids to replace.\n\t\t * @param {Boolean} k Optional keep children state, if set to true child nodes from the old object will be added to new ones.\n\t\t */\n\t\treplace : function(n, o, k) {\n\t\t\tvar t = this;\n\n\t\t\tif (is(o, 'array'))\n\t\t\t\tn = n.cloneNode(true);\n\n\t\t\treturn t.run(o, function(o) {\n\t\t\t\tif (k) {\n\t\t\t\t\teach(tinymce.grep(o.childNodes), function(c) {\n\t\t\t\t\t\tn.appendChild(c);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn o.parentNode.replaceChild(n, o);\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Renames the specified element to a new name and keep it's attributes and children.\n\t\t *\n\t\t * @method rename\n\t\t * @param {Element} elm Element to rename.\n\t\t * @param {String} name Name of the new element.\n\t\t * @return New element or the old element if it needed renaming.\n\t\t */\n\t\trename : function(elm, name) {\n\t\t\tvar t = this, newElm;\n\n\t\t\tif (elm.nodeName != name.toUpperCase()) {\n\t\t\t\t// Rename block element\n\t\t\t\tnewElm = t.create(name);\n\n\t\t\t\t// Copy attribs to new block\n\t\t\t\teach(t.getAttribs(elm), function(attr_node) {\n\t\t\t\t\tt.setAttrib(newElm, attr_node.nodeName, t.getAttrib(elm, attr_node.nodeName));\n\t\t\t\t});\n\n\t\t\t\t// Replace block\n\t\t\t\tt.replace(newElm, elm, 1);\n\t\t\t}\n\n\t\t\treturn newElm || elm;\n\t\t},\n\n\t\t/**\n\t\t * Find the common ancestor of two elements. This is a shorter method than using the DOM Range logic.\n\t\t *\n\t\t * @method findCommonAncestor\n\t\t * @param {Element} a Element to find common ancestor of.\n\t\t * @param {Element} b Element to find common ancestor of.\n\t\t * @return {Element} Common ancestor element of the two input elements.\n\t\t */\n\t\tfindCommonAncestor : function(a, b) {\n\t\t\tvar ps = a, pe;\n\n\t\t\twhile (ps) {\n\t\t\t\tpe = b;\n\n\t\t\t\twhile (pe && ps != pe)\n\t\t\t\t\tpe = pe.parentNode;\n\n\t\t\t\tif (ps == pe)\n\t\t\t\t\tbreak;\n\n\t\t\t\tps = ps.parentNode;\n\t\t\t}\n\n\t\t\tif (!ps && a.ownerDocument)\n\t\t\t\treturn a.ownerDocument.documentElement;\n\n\t\t\treturn ps;\n\t\t},\n\n\t\t/**\n\t\t * Parses the specified RGB color value and returns a hex version of that color.\n\t\t *\n\t\t * @method toHex\n\t\t * @param {String} s RGB string value like rgb(1,2,3)\n\t\t * @return {String} Hex version of that RGB value like #FF00FF.\n\t\t */\n\t\ttoHex : function(s) {\n\t\t\tvar c = /^\\s*rgb\\s*?\\(\\s*?([0-9]+)\\s*?,\\s*?([0-9]+)\\s*?,\\s*?([0-9]+)\\s*?\\)\\s*$/i.exec(s);\n\n\t\t\tfunction hex(s) {\n\t\t\t\ts = parseInt(s).toString(16);\n\n\t\t\t\treturn s.length > 1 ? s : '0' + s; // 0 -> 00\n\t\t\t};\n\n\t\t\tif (c) {\n\t\t\t\ts = '#' + hex(c[1]) + hex(c[2]) + hex(c[3]);\n\n\t\t\t\treturn s;\n\t\t\t}\n\n\t\t\treturn s;\n\t\t},\n\n\t\t/**\n\t\t * Returns a array of all single CSS classes in the document. A single CSS class is a simple\n\t\t * rule like \".class\" complex ones like \"div td.class\" will not be added to output.\n\t\t *\n\t\t * @method getClasses\n\t\t * @return {Array} Array with class objects each object has a class field might be other fields in the future.\n\t\t */\n\t\tgetClasses : function() {\n\t\t\tvar t = this, cl = [], i, lo = {}, f = t.settings.class_filter, ov;\n\n\t\t\tif (t.classes)\n\t\t\t\treturn t.classes;\n\n\t\t\tfunction addClasses(s) {\n\t\t\t\t// IE style imports\n\t\t\t\teach(s.imports, function(r) {\n\t\t\t\t\taddClasses(r);\n\t\t\t\t});\n\n\t\t\t\teach(s.cssRules || s.rules, function(r) {\n\t\t\t\t\t// Real type or fake it on IE\n\t\t\t\t\tswitch (r.type || 1) {\n\t\t\t\t\t\t// Rule\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tif (r.selectorText) {\n\t\t\t\t\t\t\t\teach(r.selectorText.split(','), function(v) {\n\t\t\t\t\t\t\t\t\tv = v.replace(/^\\s*|\\s*$|^\\s\\./g, \"\");\n\n\t\t\t\t\t\t\t\t\t// Is internal or it doesn't contain a class\n\t\t\t\t\t\t\t\t\tif (/\\.mce/.test(v) || !/\\.[\\w\\-]+$/.test(v))\n\t\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t\t// Remove everything but class name\n\t\t\t\t\t\t\t\t\tov = v;\n\t\t\t\t\t\t\t\t\tv = tinymce._replace(/.*\\.([a-z0-9_\\-]+).*/i, '$1', v);\n\n\t\t\t\t\t\t\t\t\t// Filter classes\n\t\t\t\t\t\t\t\t\tif (f && !(v = f(v, ov)))\n\t\t\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\t\t\tif (!lo[v]) {\n\t\t\t\t\t\t\t\t\t\tcl.push({'class' : v});\n\t\t\t\t\t\t\t\t\t\tlo[v] = 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// Import\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\taddClasses(r.styleSheet);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\teach(t.doc.styleSheets, addClasses);\n\t\t\t} catch (ex) {\n\t\t\t\t// Ignore\n\t\t\t}\n\n\t\t\tif (cl.length > 0)\n\t\t\t\tt.classes = cl;\n\n\t\t\treturn cl;\n\t\t},\n\n\t\t/**\n\t\t * Executes the specified function on the element by id or dom element node or array of elements/id.\n\t\t *\n\t\t * @method run\n\t\t * @param {String/Element/Array} Element ID or DOM element object or array with ids or elements.\n\t\t * @param {function} f Function to execute for each item.\n\t\t * @param {Object} s Optional scope to execute the function in.\n\t\t * @return {Object/Array} Single object or array with objects depending on multiple input or not.\n\t\t */\n\t\trun : function(e, f, s) {\n\t\t\tvar t = this, o;\n\n\t\t\tif (t.doc && typeof(e) === 'string')\n\t\t\t\te = t.get(e);\n\n\t\t\tif (!e)\n\t\t\t\treturn false;\n\n\t\t\ts = s || this;\n\t\t\tif (!e.nodeType && (e.length || e.length === 0)) {\n\t\t\t\to = [];\n\n\t\t\t\teach(e, function(e, i) {\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\tif (typeof(e) == 'string')\n\t\t\t\t\t\t\te = t.doc.getElementById(e);\n\n\t\t\t\t\t\to.push(f.call(s, e, i));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\treturn f.call(s, e);\n\t\t},\n\n\t\t/**\n\t\t * Returns an NodeList with attributes for the element.\n\t\t *\n\t\t * @method getAttribs\n\t\t * @param {HTMLElement/string} n Element node or string id to get attributes from.\n\t\t * @return {NodeList} NodeList with attributes.\n\t\t */\n\t\tgetAttribs : function(n) {\n\t\t\tvar o;\n\n\t\t\tn = this.get(n);\n\n\t\t\tif (!n)\n\t\t\t\treturn [];\n\n\t\t\tif (isIE) {\n\t\t\t\to = [];\n\n\t\t\t\t// Object will throw exception in IE\n\t\t\t\tif (n.nodeName == 'OBJECT')\n\t\t\t\t\treturn n.attributes;\n\n\t\t\t\t// IE doesn't keep the selected attribute if you clone option elements\n\t\t\t\tif (n.nodeName === 'OPTION' && this.getAttrib(n, 'selected'))\n\t\t\t\t\to.push({specified : 1, nodeName : 'selected'});\n\n\t\t\t\t// It's crazy that this is faster in IE but it's because it returns all attributes all the time\n\t\t\t\tn.cloneNode(false).outerHTML.replace(/<\\/?[\\w:\\-]+ ?|=[\\\"][^\\\"]+\\\"|=\\'[^\\']+\\'|=[\\w\\-]+|>/gi, '').replace(/[\\w:\\-]+/gi, function(a) {\n\t\t\t\t\to.push({specified : 1, nodeName : a});\n\t\t\t\t});\n\n\t\t\t\treturn o;\n\t\t\t}\n\n\t\t\treturn n.attributes;\n\t\t},\n\n\t\t/**\n\t\t * Returns true/false if the specified node is to be considered empty or not.\n\t\t *\n\t\t * @example\n\t\t * tinymce.DOM.isEmpty(node, {img : true});\n\t\t * @method isEmpty\n\t\t * @param {Object} elements Optional name/value object with elements that are automatically treated as non empty elements.\n\t\t * @return {Boolean} true/false if the node is empty or not.\n\t\t */\n\t\tisEmpty : function(node, elements) {\n\t\t\tvar self = this, i, attributes, type, walker, name, parentNode;\n\n\t\t\tnode = node.firstChild;\n\t\t\tif (node) {\n\t\t\t\twalker = new tinymce.dom.TreeWalker(node);\n\t\t\t\telements = elements || self.schema ? self.schema.getNonEmptyElements() : null;\n\n\t\t\t\tdo {\n\t\t\t\t\ttype = node.nodeType;\n\n\t\t\t\t\tif (type === 1) {\n\t\t\t\t\t\t// Ignore bogus elements\n\t\t\t\t\t\tif (node.getAttribute('data-mce-bogus'))\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t// Keep empty elements like <img />\n\t\t\t\t\t\tname = node.nodeName.toLowerCase();\n\t\t\t\t\t\tif (elements && elements[name]) {\n\t\t\t\t\t\t\t// Ignore single BR elements in blocks like <p><br /></p>\n\t\t\t\t\t\t\tparentNode = node.parentNode;\n\t\t\t\t\t\t\tif (name === 'br' && self.isBlock(parentNode) && parentNode.firstChild === node && parentNode.lastChild === node) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Keep elements with data-bookmark attributes or name attribute like <a name=\"1\"></a>\n\t\t\t\t\t\tattributes = self.getAttribs(node);\n\t\t\t\t\t\ti = node.attributes.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tname = node.attributes[i].nodeName;\n\t\t\t\t\t\t\tif (name === \"name\" || name === 'data-mce-bookmark')\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Keep non whitespace text nodes\n\t\t\t\t\tif ((type === 3 && !whiteSpaceRegExp.test(node.nodeValue)))\n\t\t\t\t\t\treturn false;\n\t\t\t\t} while (node = walker.next());\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t/**\n\t\t * Destroys all internal references to the DOM to solve IE leak issues.\n\t\t *\n\t\t * @method destroy\n\t\t */\n\t\tdestroy : function(s) {\n\t\t\tvar t = this;\n\n\t\t\tif (t.events)\n\t\t\t\tt.events.destroy();\n\n\t\t\tt.win = t.doc = t.root = t.events = null;\n\n\t\t\t// Manual destroy then remove unload handler\n\t\t\tif (!s)\n\t\t\t\ttinymce.removeUnload(t.destroy);\n\t\t},\n\n\t\t/**\n\t\t * Created a new DOM Range object. This will use the native DOM Range API if it's\n\t\t * available if it's not it will fallback to the custom TinyMCE implementation.\n\t\t *\n\t\t * @method createRng\n\t\t * @return {DOMRange} DOM Range object.\n\t\t * @example\n\t\t * var rng = tinymce.DOM.createRng();\n\t\t * alert(rng.startContainer + \",\" + rng.startOffset);\n\t\t */\n\t\tcreateRng : function() {\n\t\t\tvar d = this.doc;\n\n\t\t\treturn d.createRange ? d.createRange() : new tinymce.dom.Range(this);\n\t\t},\n\n\t\t/**\n\t\t * Returns the index of the specified node within it's parent.\n\t\t *\n\t\t * @param {Node} node Node to look for.\n\t\t * @param {boolean} normalized Optional true/false state if the index is what it would be after a normalization.\n\t\t * @return {Number} Index of the specified node.\n\t\t */\n\t\tnodeIndex : function(node, normalized) {\n\t\t\tvar idx = 0, lastNodeType, lastNode, nodeType;\n\n\t\t\tif (node) {\n\t\t\t\tfor (lastNodeType = node.nodeType, node = node.previousSibling, lastNode = node; node; node = node.previousSibling) {\n\t\t\t\t\tnodeType = node.nodeType;\n\n\t\t\t\t\t// Normalize text nodes\n\t\t\t\t\tif (normalized && nodeType == 3) {\n\t\t\t\t\t\tif (nodeType == lastNodeType || !node.nodeValue.length)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tidx++;\n\t\t\t\t\tlastNodeType = nodeType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn idx;\n\t\t},\n\n\t\t/**\n\t\t * Splits an element into two new elements and places the specified split\n\t\t * element or element between the new ones. For example splitting the paragraph at the bold element in\n\t\t * this example <p>abc<b>abc</b>123</p> would produce <p>abc</p><b>abc</b><p>123</p>. \n\t\t *\n\t\t * @method split\n\t\t * @param {Element} pe Parent element to split.\n\t\t * @param {Element} e Element to split at.\n\t\t * @param {Element} re Optional replacement element to replace the split element by.\n\t\t * @return {Element} Returns the split element or the replacement element if that is specified.\n\t\t */\n\t\tsplit : function(pe, e, re) {\n\t\t\tvar t = this, r = t.createRng(), bef, aft, pa;\n\n\t\t\t// W3C valid browsers tend to leave empty nodes to the left/right side of the contents, this makes sense\n\t\t\t// but we don't want that in our code since it serves no purpose for the end user\n\t\t\t// For example if this is chopped:\n\t\t\t//   <p>text 1<span><b>CHOP</b></span>text 2</p>\n\t\t\t// would produce:\n\t\t\t//   <p>text 1<span></span></p><b>CHOP</b><p><span></span>text 2</p>\n\t\t\t// this function will then trim of empty edges and produce:\n\t\t\t//   <p>text 1</p><b>CHOP</b><p>text 2</p>\n\t\t\tfunction trim(node) {\n\t\t\t\tvar i, children = node.childNodes, type = node.nodeType;\n\n\t\t\t\tif (type == 1 && node.getAttribute('data-mce-type') == 'bookmark')\n\t\t\t\t\treturn;\n\n\t\t\t\tfor (i = children.length - 1; i >= 0; i--)\n\t\t\t\t\ttrim(children[i]);\n\n\t\t\t\tif (type != 9) {\n\t\t\t\t\t// Keep non whitespace text nodes\n\t\t\t\t\tif (type == 3 && node.nodeValue.length > 0) {\n\t\t\t\t\t\t// If parent element isn't a block or there isn't any useful contents for example \"<p>   </p>\"\n\t\t\t\t\t\tif (!t.isBlock(node.parentNode) || tinymce.trim(node.nodeValue).length > 0)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (type == 1) {\n\t\t\t\t\t\t// If the only child is a bookmark then move it up\n\t\t\t\t\t\tchildren = node.childNodes;\n\t\t\t\t\t\tif (children.length == 1 && children[0] && children[0].nodeType == 1 && children[0].getAttribute('data-mce-type') == 'bookmark')\n\t\t\t\t\t\t\tnode.parentNode.insertBefore(children[0], node);\n\n\t\t\t\t\t\t// Keep non empty elements or img, hr etc\n\t\t\t\t\t\tif (children.length || /^(br|hr|input|img)$/i.test(node.nodeName))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tt.remove(node);\n\t\t\t\t}\n\n\t\t\t\treturn node;\n\t\t\t};\n\n\t\t\tif (pe && e) {\n\t\t\t\t// Get before chunk\n\t\t\t\tr.setStart(pe.parentNode, t.nodeIndex(pe));\n\t\t\t\tr.setEnd(e.parentNode, t.nodeIndex(e));\n\t\t\t\tbef = r.extractContents();\n\n\t\t\t\t// Get after chunk\n\t\t\t\tr = t.createRng();\n\t\t\t\tr.setStart(e.parentNode, t.nodeIndex(e) + 1);\n\t\t\t\tr.setEnd(pe.parentNode, t.nodeIndex(pe) + 1);\n\t\t\t\taft = r.extractContents();\n\n\t\t\t\t// Insert before chunk\n\t\t\t\tpa = pe.parentNode;\n\t\t\t\tpa.insertBefore(trim(bef), pe);\n\n\t\t\t\t// Insert middle chunk\n\t\t\t\tif (re)\n\t\t\t\t\tpa.replaceChild(re, e);\n\t\t\t\telse\n\t\t\t\t\tpa.insertBefore(e, pe);\n\n\t\t\t\t// Insert after chunk\n\t\t\t\tpa.insertBefore(trim(aft), pe);\n\t\t\t\tt.remove(pe);\n\n\t\t\t\treturn re || e;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Adds an event handler to the specified object.\n\t\t *\n\t\t * @method bind\n\t\t * @param {Element/Document/Window/Array/String} o Object or element id string to add event handler to or an array of elements/ids/documents.\n\t\t * @param {String} n Name of event handler to add for example: click.\n\t\t * @param {function} f Function to execute when the event occurs.\n\t\t * @param {Object} s Optional scope to execute the function in.\n\t\t * @return {function} Function callback handler the same as the one passed in.\n\t\t */\n\t\tbind : function(target, name, func, scope) {\n\t\t\tvar t = this;\n\n\t\t\tif (!t.events)\n\t\t\t\tt.events = new tinymce.dom.EventUtils();\n\n\t\t\treturn t.events.add(target, name, func, scope || this);\n\t\t},\n\n\t\t/**\n\t\t * Removes the specified event handler by name and function from a element or collection of elements.\n\t\t *\n\t\t * @method unbind\n\t\t * @param {String/Element/Array} o Element ID string or HTML element or an array of elements or ids to remove handler from.\n\t\t * @param {String} n Event handler name like for example: \"click\"\n\t\t * @param {function} f Function to remove.\n\t\t * @return {bool/Array} Bool state if true if the handler was removed or an array with states if multiple elements where passed in.\n\t\t */\n\t\tunbind : function(target, name, func) {\n\t\t\tvar t = this;\n\n\t\t\tif (!t.events)\n\t\t\t\tt.events = new tinymce.dom.EventUtils();\n\n\t\t\treturn t.events.remove(target, name, func);\n\t\t},\n\n\t\t// #ifdef debug\n\n\t\tdumpRng : function(r) {\n\t\t\treturn 'startContainer: ' + r.startContainer.nodeName + ', startOffset: ' + r.startOffset + ', endContainer: ' + r.endContainer.nodeName + ', endOffset: ' + r.endOffset;\n\t\t},\n\n\t\t// #endif\n\n\t\t_findSib : function(node, selector, name) {\n\t\t\tvar t = this, f = selector;\n\n\t\t\tif (node) {\n\t\t\t\t// If expression make a function of it using is\n\t\t\t\tif (is(f, 'string')) {\n\t\t\t\t\tf = function(node) {\n\t\t\t\t\t\treturn t.is(node, selector);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Loop all siblings\n\t\t\t\tfor (node = node[name]; node; node = node[name]) {\n\t\t\t\t\tif (f(node))\n\t\t\t\t\t\treturn node;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t},\n\n\t\t_isRes : function(c) {\n\t\t\t// Is live resizble element\n\t\t\treturn /^(top|left|bottom|right|width|height)/i.test(c) || /;\\s*(top|left|bottom|right|width|height)/i.test(c);\n\t\t}\n\n\t\t/*\n\t\twalk : function(n, f, s) {\n\t\t\tvar d = this.doc, w;\n\n\t\t\tif (d.createTreeWalker) {\n\t\t\t\tw = d.createTreeWalker(n, NodeFilter.SHOW_TEXT, null, false);\n\n\t\t\t\twhile ((n = w.nextNode()) != null)\n\t\t\t\t\tf.call(s || this, n);\n\t\t\t} else\n\t\t\t\ttinymce.walk(n, f, 'childNodes', s);\n\t\t}\n\t\t*/\n\n\t\t/*\n\t\ttoRGB : function(s) {\n\t\t\tvar c = /^\\s*?#([0-9A-F]{2})([0-9A-F]{1,2})([0-9A-F]{2})?\\s*?$/.exec(s);\n\n\t\t\tif (c) {\n\t\t\t\t// #FFF -> #FFFFFF\n\t\t\t\tif (!is(c[3]))\n\t\t\t\t\tc[3] = c[2] = c[1];\n\n\t\t\t\treturn \"rgb(\" + parseInt(c[1], 16) + \",\" + parseInt(c[2], 16) + \",\" + parseInt(c[3], 16) + \")\";\n\t\t\t}\n\n\t\t\treturn s;\n\t\t}\n\t\t*/\n\t});\n\n\t/**\n\t * Instance of DOMUtils for the current document.\n\t *\n\t * @property DOM\n\t * @member tinymce\n\t * @type tinymce.dom.DOMUtils\n\t * @example\n\t * // Example of how to add a class to some element by id\n\t * tinymce.DOM.addClass('someid', 'someclass');\n\t */\n\ttinymce.DOM = new tinymce.dom.DOMUtils(document, {process_html : 0});\n})(tinymce);\n"}
}});
