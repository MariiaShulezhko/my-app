require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/plugins/autoresize/editor_plugin_src.js":"/**\n * editor_plugin_src.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n(function() {\n\t/**\n\t * Auto Resize\n\t * \n\t * This plugin automatically resizes the content area to fit its content height.\n\t * It will retain a minimum height, which is the height of the content area when\n\t * it's initialized.\n\t */\n\ttinymce.create('tinymce.plugins.AutoResizePlugin', {\n\t\t/**\n\t\t * Initializes the plugin, this will be executed after the plugin has been created.\n\t\t * This call is done before the editor instance has finished it's initialization so use the onInit event\n\t\t * of the editor instance to intercept that event.\n\t\t *\n\t\t * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.\n\t\t * @param {string} url Absolute URL to where the plugin is located.\n\t\t */\n\t\tinit : function(ed, url) {\n\t\t\tvar t = this, oldSize = 0;\n\n\t\t\tif (ed.getParam('fullscreen_is_enabled'))\n\t\t\t\treturn;\n\n\t\t\t/**\n\t\t\t * This method gets executed each time the editor needs to resize.\n\t\t\t */\n\t\t\tfunction resize() {\n\t\t\t\tvar d = ed.getDoc(), b = d.body, de = d.documentElement, DOM = tinymce.DOM, resizeHeight = t.autoresize_min_height, myHeight;\n\n\t\t\t\t// Get height differently depending on the browser used\n\t\t\t\tmyHeight = tinymce.isIE ? b.scrollHeight : d.body.offsetHeight;\n\n\t\t\t\t// Don't make it smaller than the minimum height\n\t\t\t\tif (myHeight > t.autoresize_min_height)\n\t\t\t\t\tresizeHeight = myHeight;\n\n\t\t\t\t// If a maximum height has been defined don't exceed this height\n\t\t\t\tif (t.autoresize_max_height && myHeight > t.autoresize_max_height) {\n\t\t\t\t\tresizeHeight = t.autoresize_max_height;\n\t\t\t\t\ted.getBody().style.overflowY = \"auto\";\n\t\t\t\t} else\n\t\t\t\t\ted.getBody().style.overflowY = \"hidden\";\n\n\t\t\t\t// Resize content element\n\t\t\t\tif (resizeHeight !== oldSize) {\n\t\t\t\t\tDOM.setStyle(DOM.get(ed.id + '_ifr'), 'height', resizeHeight + 'px');\n\t\t\t\t\toldSize = resizeHeight;\n\t\t\t\t}\n\n\t\t\t\t// if we're throbbing, we'll re-throb to match the new size\n\t\t\t\tif (t.throbbing) {\n\t\t\t\t\ted.setProgressState(false);\n\t\t\t\t\ted.setProgressState(true);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tt.editor = ed;\n\n\t\t\t// Define minimum height\n\t\t\tt.autoresize_min_height = parseInt( ed.getParam('autoresize_min_height', ed.getElement().offsetHeight) );\n\n\t\t\t// Define maximum height\t\n\t\t\tt.autoresize_max_height = parseInt( ed.getParam('autoresize_max_height', 0) );\n\n\t\t\t// Add padding at the bottom for better UX\n\t\t\ted.onInit.add(function(ed){\n\t\t\t\ted.dom.setStyle(ed.getBody(), 'paddingBottom', ed.getParam('autoresize_bottom_margin', 50) + 'px');\n\t\t\t});\n\n\t\t\t// Add appropriate listeners for resizing content area\n\t\t\ted.onChange.add(resize);\n\t\t\ted.onSetContent.add(resize);\n\t\t\ted.onPaste.add(resize);\n\t\t\ted.onKeyUp.add(resize);\n\t\t\ted.onPostRender.add(resize);\n\n\t\t\tif (ed.getParam('autoresize_on_init', true)) {\n\t\t\t\t// Things to do when the editor is ready\n\t\t\t\ted.onInit.add(function(ed, l) {\n\t\t\t\t\t// Show throbber until content area is resized properly\n\t\t\t\t\ted.setProgressState(true);\n\t\t\t\t\tt.throbbing = true;\n\n\t\t\t\t\t// Hide scrollbars\n\t\t\t\t\ted.getBody().style.overflowY = \"hidden\";\n\t\t\t\t});\n\n\t\t\t\ted.onLoadContent.add(function(ed, l) {\n\t\t\t\t\tresize();\n\n\t\t\t\t\t// Because the content area resizes when its content CSS loads,\n\t\t\t\t\t// and we can't easily add a listener to its onload event,\n\t\t\t\t\t// we'll just trigger a resize after a short loading period\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tresize();\n\n\t\t\t\t\t\t// Disable throbber\n\t\t\t\t\t\ted.setProgressState(false);\n\t\t\t\t\t\tt.throbbing = false;\n\t\t\t\t\t}, 1250);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Register the command so that it can be invoked by using tinyMCE.activeEditor.execCommand('mceExample');\n\t\t\ted.addCommand('mceAutoResize', resize);\n\t\t},\n\n\t\t/**\n\t\t * Returns information about the plugin as a name/value array.\n\t\t * The current keys are longname, author, authorurl, infourl and version.\n\t\t *\n\t\t * @return {Object} Name/value array containing information about the plugin.\n\t\t */\n\t\tgetInfo : function() {\n\t\t\treturn {\n\t\t\t\tlongname : 'Auto Resize',\n\t\t\t\tauthor : 'Moxiecode Systems AB',\n\t\t\t\tauthorurl : 'http://tinymce.moxiecode.com',\n\t\t\t\tinfourl : 'http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/autoresize',\n\t\t\t\tversion : tinymce.majorVersion + \".\" + tinymce.minorVersion\n\t\t\t};\n\t\t}\n\t});\n\n\t// Register plugin\n\ttinymce.PluginManager.add('autoresize', tinymce.plugins.AutoResizePlugin);\n})();\n"}
}});
