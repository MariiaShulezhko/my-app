require.config({"config": {
        "jsbuild":{"Magento_Tinymce3/tiny_mce/classes/AddOnManager.js":"/**\n * AddOnManager.js\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under LGPL License.\n *\n * License: http://tinymce.moxiecode.com/license\n * Contributing: http://tinymce.moxiecode.com/contributing\n */\n\n(function(tinymce) {\n\tvar Dispatcher = tinymce.util.Dispatcher, each = tinymce.each;\n\n\t/**\n\t * This class handles the loading of themes/plugins or other add-ons and their language packs.\n\t *\n\t * @class tinymce.AddOnManager\n\t */\n\ttinymce.create('tinymce.AddOnManager', {\n\t\tAddOnManager : function() {\n\t\t\tvar self = this;\n\n\t\t\tself.items = [];\n\t\t\tself.urls = {};\n\t\t\tself.lookup = {};\n\t\t\tself.onAdd = new Dispatcher(self);\n\t\t},\n\n\t\t/**\n\t\t * Fires when a item is added.\n\t\t *\n\t\t * @event onAdd\n\t\t */\n\n\t\t/**\n\t\t * Returns the specified add on by the short name.\n\t\t *\n\t\t * @method get\n\t\t * @param {String} n Add-on to look for.\n\t\t * @return {tinymce.Theme/tinymce.Plugin} Theme or plugin add-on instance or undefined.\n\t\t */\n\t\tget : function(n) {\n\t\t\tif (this.lookup[n]) {\n\t\t\t\treturn this.lookup[n].instance;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t},\n\n\t\tdependencies : function(n) {\n\t\t\tvar result;\n\t\t\tif (this.lookup[n]) {\n\t\t\t\tresult = this.lookup[n].dependencies;\n\t\t\t}\n\t\t\treturn result || [];\n\t\t},\n\n\t\t/**\n\t\t * Loads a language pack for the specified add-on.\n\t\t *\n\t\t * @method requireLangPack\n\t\t * @param {String} n Short name of the add-on.\n\t\t */\n\t\trequireLangPack : function(n) {\n\t\t\tvar s = tinymce.settings;\n\n\t\t\tif (s && s.language && s.language_load !== false)\n\t\t\t\ttinymce.ScriptLoader.add(this.urls[n] + '/langs/' + s.language + '.js');\n\t\t},\n\n\t\t/**\n\t\t * Adds a instance of the add-on by it's short name.\n\t\t *\n\t\t * @method add\n\t\t * @param {String} id Short name/id for the add-on.\n\t\t * @param {tinymce.Theme/tinymce.Plugin} o Theme or plugin to add.\n\t\t * @return {tinymce.Theme/tinymce.Plugin} The same theme or plugin instance that got passed in.\n\t\t * @example\n\t\t * // Create a simple plugin\n\t\t * tinymce.create('tinymce.plugins.TestPlugin', {\n\t\t *     TestPlugin : function(ed, url) {\n\t\t *         ed.onClick.add(function(ed, e) {\n\t\t *             ed.windowManager.alert('Hello World!');\n\t\t *         });\n\t\t *     }\n\t\t * });\n\t\t * \n\t\t * // Register plugin using the add method\n\t\t * tinymce.PluginManager.add('test', tinymce.plugins.TestPlugin);\n\t\t * \n\t\t * // Initialize TinyMCE\n\t\t * tinyMCE.init({\n\t\t *    ...\n\t\t *    plugins : '-test' // Init the plugin but don't try to load it\n\t\t * });\n\t\t */\n\t\tadd : function(id, o, dependencies) {\n\t\t\tthis.items.push(o);\n\t\t\tthis.lookup[id] = {instance:o, dependencies:dependencies};\n\t\t\tthis.onAdd.dispatch(this, id, o);\n\n\t\t\treturn o;\n\t\t},\n\t\tcreateUrl: function(baseUrl, dep) {\n\t\t\tif (typeof dep === \"object\") {\n\t\t\t\treturn dep\n\t\t\t} else {\n\t\t\t\treturn {prefix: baseUrl.prefix, resource: dep, suffix: baseUrl.suffix};\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t \t * Add a set of components that will make up the add-on. Using the url of the add-on name as the base url.\n\t\t * This should be used in development mode.  A new compressor/javascript munger process will ensure that the \n\t\t * components are put together into the editor_plugin.js file and compressed correctly.\n\t\t * @param pluginName {String} name of the plugin to load scripts from (will be used to get the base url for the plugins).\n\t\t * @param scripts {Array} Array containing the names of the scripts to load.\n\t \t */\n\t\taddComponents: function(pluginName, scripts) {\n\t\t\tvar pluginUrl = this.urls[pluginName];\n\t\t\ttinymce.each(scripts, function(script){\n\t\t\t\ttinymce.ScriptLoader.add(pluginUrl+\"/\"+script);\t\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Loads an add-on from a specific url.\n\t\t *\n\t\t * @method load\n\t\t * @param {String} n Short name of the add-on that gets loaded.\n\t\t * @param {String} u URL to the add-on that will get loaded.\n\t\t * @param {function} cb Optional callback to execute ones the add-on is loaded.\n\t\t * @param {Object} s Optional scope to execute the callback in.\n\t\t * @example\n\t\t * // Loads a plugin from an external URL\n\t\t * tinymce.PluginManager.load('myplugin', '/some/dir/someplugin/editor_plugin.js');\n\t\t *\n\t\t * // Initialize TinyMCE\n\t\t * tinyMCE.init({\n\t\t *    ...\n\t\t *    plugins : '-myplugin' // Don't try to load it again\n\t\t * });\n\t\t */\n\t\tload : function(n, u, cb, s) {\n\t\t\tvar t = this, url = u;\n\n\t\t\tfunction loadDependencies() {\n\t\t\t\tvar dependencies = t.dependencies(n);\n\t\t\t\ttinymce.each(dependencies, function(dep) {\n\t\t\t\t\tvar newUrl = t.createUrl(u, dep);\n\t\t\t\t\tt.load(newUrl.resource, newUrl, undefined, undefined);\n\t\t\t\t});\n\t\t\t\tif (cb) {\n\t\t\t\t\tif (s) {\n\t\t\t\t\t\tcb.call(s);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcb.call(tinymce.ScriptLoader);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (t.urls[n])\n\t\t\t\treturn;\n\t\t\tif (typeof u === \"object\")\n\t\t\t\turl = u.prefix + u.resource + u.suffix;\n\n\t\t\tif (url.indexOf('/') != 0 && url.indexOf('://') == -1)\n\t\t\t\turl = tinymce.baseURL + '/' + url;\n\n\t\t\tt.urls[n] = url.substring(0, url.lastIndexOf('/'));\n\n\t\t\tif (t.lookup[n]) {\n\t\t\t\tloadDependencies();\n\t\t\t} else {\n\t\t\t\ttinymce.ScriptLoader.add(url, loadDependencies, s);\n\t\t\t}\n\t\t}\n\t});\n\n\t// Create plugin and theme managers\n\ttinymce.PluginManager = new tinymce.AddOnManager();\n\ttinymce.ThemeManager = new tinymce.AddOnManager();\n}(tinymce));\n\n/**\n * TinyMCE theme class.\n *\n * @class tinymce.Theme\n */\n\n/**\n * Initializes the theme.\n *\n * @method init\n * @param {tinymce.Editor} editor Editor instance that created the theme instance.\n * @param {String} url Absolute URL where the theme is located. \n */\n\n/**\n * Meta info method, this method gets executed when TinyMCE wants to present information about the theme for example in the about/help dialog.\n *\n * @method getInfo\n * @return {Object} Returns an object with meta information about the theme the current items are longname, author, authorurl, infourl and version.\n */\n\n/**\n * This method is responsible for rendering/generating the overall user interface with toolbars, buttons, iframe containers etc.\n *\n * @method renderUI\n * @param {Object} obj Object parameter containing the targetNode DOM node that will be replaced visually with an editor instance. \n * @return {Object} an object with items like iframeContainer, editorContainer, sizeContainer, deltaWidth, deltaHeight. \n */\n\n/**\n * Plugin base class, this is a pseudo class that describes how a plugin is to be created for TinyMCE. The methods below are all optional.\n *\n * @class tinymce.Plugin\n * @example\n * // Create a new plugin class\n * tinymce.create('tinymce.plugins.ExamplePlugin', {\n *     init : function(ed, url) {\n *         // Register an example button\n *         ed.addButton('example', {\n *             title : 'example.desc',\n *             onclick : function() {\n *                  // Display an alert when the user clicks the button\n *                  ed.windowManager.alert('Hello world!');\n *             },\n *             'class' : 'bold' // Use the bold icon from the theme\n *         });\n *     }\n * });\n * \n * // Register plugin with a short name\n * tinymce.PluginManager.add('example', tinymce.plugins.ExamplePlugin);\n * \n * // Initialize TinyMCE with the new plugin and button\n * tinyMCE.init({\n *    ...\n *    plugins : '-example', // - means TinyMCE will not try to load it\n *    theme_advanced_buttons1 : 'example' // Add the new example button to the toolbar\n * });\n */\n\n/**\n * Initialization function for the plugin. This will be called when the plugin is created. \n *\n * @method init\n * @param {tinymce.Editor} editor Editor instance that created the plugin instance. \n * @param {String} url Absolute URL where the plugin is located. \n * @example\n * // Creates a new plugin class\n * tinymce.create('tinymce.plugins.ExamplePlugin', {\n *     init : function(ed, url) {\n *         // Register the command so that it can be invoked by using tinyMCE.activeEditor.execCommand('mceExample');\n *         ed.addCommand('mceExample', function() {\n *             ed.windowManager.open({\n *                 file : url + '/dialog.htm',\n *                 width : 320 + ed.getLang('example.delta_width', 0),\n *                 height : 120 + ed.getLang('example.delta_height', 0),\n *                 inline : 1\n *             }, {\n *                 plugin_url : url, // Plugin absolute URL\n *                 some_custom_arg : 'custom arg' // Custom argument\n *             });\n *         });\n * \n *         // Register example button\n *         ed.addButton('example', {\n *             title : 'example.desc',\n *             cmd : 'mceExample',\n *             image : url + '/img/example.gif'\n *         });\n * \n *         // Add a node change handler, selects the button in the UI when a image is selected\n *         ed.onNodeChange.add(function(ed, cm, n) {\n *             cm.setActive('example', n.nodeName == 'IMG');\n *         });\n *     }\n * });\n * \n * // Register plugin\n * tinymce.PluginManager.add('example', tinymce.plugins.ExamplePlugin);\n */\n\n/**\n * Meta info method, this method gets executed when TinyMCE wants to present information about the plugin for example in the about/help dialog.\n *\n * @method getInfo\n * @return {Object} Returns an object with meta information about the plugin the current items are longname, author, authorurl, infourl and version.\n * @example \n * // Creates a new plugin class\n * tinymce.create('tinymce.plugins.ExamplePlugin', {\n *     // Meta info method\n *     getInfo : function() {\n *         return {\n *             longname : 'Example plugin',\n *             author : 'Some author',\n *             authorurl : 'http://tinymce.moxiecode.com',\n *             infourl : 'http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/example',\n *             version : \"1.0\"\n *         };\n *     }\n * });\n * \n * // Register plugin\n * tinymce.PluginManager.add('example', tinymce.plugins.ExamplePlugin);\n * \n * // Initialize TinyMCE with the new plugin\n * tinyMCE.init({\n *    ...\n *    plugins : '-example' // - means TinyMCE will not try to load it\n * });\n */\n\n/**\n * Gets called when a new control instance is created.\n *\n * @method createControl\n * @param {String} name Control name to create for example \"mylistbox\" \n * @param {tinymce.ControlManager} controlman Control manager/factory to use to create the control. \n * @return {tinymce.ui.Control} Returns a new control instance or null.\n * @example \n * // Creates a new plugin class\n * tinymce.create('tinymce.plugins.ExamplePlugin', {\n *     createControl: function(n, cm) {\n *         switch (n) {\n *             case 'mylistbox':\n *                 var mlb = cm.createListBox('mylistbox', {\n *                      title : 'My list box',\n *                      onselect : function(v) {\n *                          tinyMCE.activeEditor.windowManager.alert('Value selected:' + v);\n *                      }\n *                 });\n * \n *                 // Add some values to the list box\n *                 mlb.add('Some item 1', 'val1');\n *                 mlb.add('some item 2', 'val2');\n *                 mlb.add('some item 3', 'val3');\n * \n *                 // Return the new listbox instance\n *                 return mlb;\n *         }\n * \n *         return null;\n *     }\n * });\n * \n * // Register plugin\n * tinymce.PluginManager.add('example', tinymce.plugins.ExamplePlugin);\n * \n * // Initialize TinyMCE with the new plugin and button\n * tinyMCE.init({\n *    ...\n *    plugins : '-example', // - means TinyMCE will not try to load it\n *    theme_advanced_buttons1 : 'mylistbox' // Add the new mylistbox control to the toolbar\n * });\n */\n"}
}});
